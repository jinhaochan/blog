<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>glob - Software Engineering</title><link href="/" rel="alternate"></link><link href="/feeds/software-engineering.atom.xml" rel="self"></link><id>/</id><updated>2019-10-12T02:22:00+08:00</updated><entry><title>React Project</title><link href="/react-project.html" rel="alternate"></link><published>2019-10-12T02:22:00+08:00</published><updated>2019-10-12T02:22:00+08:00</updated><author><name>Chan Jin Hao</name></author><id>tag:None,2019-10-12:/react-project.html</id><summary type="html">&lt;p&gt;I've always been drawn toward software development, and the UI/UX part of it. Recently, I stumbled upon this package called Semantic-UI, which integrates well with react. You can install it by calling&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm i semantic-ui-react&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I've not touched frontend coding for quite awhile, almost a year and a half …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've always been drawn toward software development, and the UI/UX part of it. Recently, I stumbled upon this package called Semantic-UI, which integrates well with react. You can install it by calling&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm i semantic-ui-react&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I've not touched frontend coding for quite awhile, almost a year and a half, so I decided to jump back in because it seemed really fun to build stuff that you can see and interact with. My day job consists of writing endless python scripts, and while that's fun because it challenges you logically, there's no end product to look at and marvel at it.&lt;/p&gt;
&lt;p&gt;Granted, when using Semantic-UI, I'm not the one doing the component designs, but just piecing them together. And that's the beauty of React! It's meant to be a plug and play of different components, and data is floated between them through what they call &lt;code&gt;props&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can see the project I'm working on here: https://pure-woodland-41150.herokuapp.com/&lt;/p&gt;
&lt;p&gt;It takes awhile to load because I'm using a free Dyno from Heroku.&lt;/p&gt;
&lt;h2&gt;Project Bookie&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;The idea that I'm working on really stems from a need for me to keep my book reviews in one place. Right now, I'm reading a ton of books, but there's no where for me to document them down digitally, where I can perform some analysis to it.&lt;/p&gt;
&lt;p&gt;Sure, there's Evernote, but I find it too bloated and clunky. Plus, I could try to build it.&lt;/p&gt;
&lt;p&gt;I envision the main functionality to be reading summaries of books, and user reviews pulled from different APIs. Also, you can see similar books, and where to purchase them. (Of course you can always go to Book Depository)&lt;/p&gt;
&lt;p&gt;I don't foresee this to be a monetized project, but a personal exploration of learning, or relearning front end coding.&lt;/p&gt;
&lt;p&gt;At the side, I'm thinking of adding Machine Learning stuff like text analytics, to automatically find similar books based on tags.&lt;/p&gt;
&lt;p&gt;Who knows, I might enjoy this process so much, that I might go back to software development (Which I think i got off the wrong foot with in my first job.)&lt;/p&gt;</content><category term="Software Engineering"></category><category term="React"></category></entry><entry><title>inotify on Shared Servers</title><link href="/inotify-shared-server.html" rel="alternate"></link><published>2019-10-04T16:51:00+08:00</published><updated>2019-10-04T16:51:00+08:00</updated><author><name>Chan Jin Hao</name></author><id>tag:None,2019-10-04:/inotify-shared-server.html</id><summary type="html">&lt;p&gt;We all have faced an issue at one point in our engineering adventures that we need to create a form of watchdog. We have to watch for a certain activity on a certain file or folder, before we perform a set of actions.&lt;/p&gt;
&lt;p&gt;Thankfully in Linux, there is a function …&lt;/p&gt;</summary><content type="html">&lt;p&gt;We all have faced an issue at one point in our engineering adventures that we need to create a form of watchdog. We have to watch for a certain activity on a certain file or folder, before we perform a set of actions.&lt;/p&gt;
&lt;p&gt;Thankfully in Linux, there is a function called &lt;code&gt;inotify&lt;/code&gt;, which allows you to monitor the Linux filesystem for any specific events.&lt;/p&gt;
&lt;p&gt;There's also a python package for it, but please DON'T USE &lt;code&gt;PYINOTIFY&lt;/code&gt;. USE THE VANILLA &lt;code&gt;INOTIFY&lt;/code&gt;. &lt;code&gt;PYINOTIFY&lt;/code&gt; is defunct, inefficient, and is no longer supported.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pip install inotify&lt;/code&gt; will do.&lt;/p&gt;
&lt;h3&gt;inotify&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;&lt;code&gt;inotify&lt;/code&gt; is an system call in the Linux kernel that allows processes to register themselves to be notified when events have occured to a specified filesystem.&lt;/p&gt;
&lt;p&gt;This is opposed to a user land implementation, which typically, and very inefficiently does a &lt;code&gt;while True&lt;/code&gt; to check for any changes. A typical setup would be to run a process that writes a flag file to the folder when it has completed, and start a &lt;code&gt;while&lt;/code&gt; loop to see if a flag file is present in that folder.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;inotify&lt;/code&gt; can watch for several events such as: &lt;code&gt;open&lt;/code&gt;, &lt;code&gt;close&lt;/code&gt;, &lt;code&gt;read&lt;/code&gt;, &lt;code&gt;write&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt;, &lt;code&gt;move&lt;/code&gt;, or any other action that can be taken on a filesystem.&lt;/p&gt;
&lt;p&gt;More importantly, it can know when a file finishes writing by looking out for the event &lt;code&gt;IN_CLOSE_WRITE&lt;/code&gt;. I would think this scenario is pretty common, as we would need to wait until a file is fully written before performing any action. If we do the naive approach of just looking if the file exists, we could process the file before it has finished writing, causing major errors.&lt;/p&gt;
&lt;p&gt;I won't go through the entire details of how &lt;code&gt;inotify&lt;/code&gt; is implemented, you can read it here: &lt;a href="https://www.linuxjournal.com/article/8478"&gt;inotify implementation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But basically, instead of constantly polling for changes which induces huge CPU cycles, inotify does a block and waits for notification events. Cool!&lt;/p&gt;
&lt;h3&gt;Implementing inotify on shared servers&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;Say now you have 2 virtual machines, Machine A does the file processing, and Machine B queries the internet for enrichment information. What we want is for Machine A to pass the file over to Machine B, Machine B to do the enrichment, and pass the enriched file back to Machine A.&lt;/p&gt;
&lt;p&gt;Because inotify is a kernel function, it needs the file pointer of the folder it's watching.&lt;/p&gt;
&lt;p&gt;The image below shows the setup that can make it work.&lt;/p&gt;
&lt;p&gt;&lt;img alt="placeholder" src="/media/images/inotify.png"&gt;&lt;/p&gt;
&lt;p&gt;Machine A mounts the folder called Unenriched, that is physically on Machine B.&lt;/p&gt;
&lt;p&gt;Machine B mounts the folder called Enriched, that is physically on Machine A.&lt;/p&gt;
&lt;p&gt;Machine B runs &lt;code&gt;inotify&lt;/code&gt; to monitor the Unenriched folder, and takes in any unenriched files that is passed over from Machine A.&lt;/p&gt;
&lt;p&gt;Machine A runs &lt;code&gt;inotify&lt;/code&gt; to monitor the Enriched folder, and takes in any enriched files that is passed from Machine B.&lt;/p&gt;
&lt;p&gt;And because &lt;code&gt;inotify&lt;/code&gt; is done in a block-wait manner, the program flow on Machine A simply pauses and waits for the &lt;code&gt;IN_CLOSE_WRITE&lt;/code&gt; event on the Enriched folder.&lt;/p&gt;
&lt;p&gt;This is a simple post to show you how you can implement a watchdog with &lt;code&gt;inotify&lt;/code&gt;, and how to set it up on shared folders. Hope it helps!&lt;/p&gt;</content><category term="Software Engineering"></category></entry><entry><title>Migrating from Wordpress to Pelican + Heroku</title><link href="/migrating-from-word-press.html" rel="alternate"></link><published>2019-09-28T17:54:00+08:00</published><updated>2019-09-28T17:54:00+08:00</updated><author><name>Chan Jin Hao</name></author><id>tag:None,2019-09-28:/migrating-from-word-press.html</id><summary type="html">&lt;p&gt;I used to write my blog posts on Wordpress, and it was doing a good job. I had a few blogs on WP, one was my technical blog, and another was just me rambling about life. But I realized that Wordpress was not very friendly to &lt;code&gt;coding blog posts&lt;/code&gt;. Sure …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I used to write my blog posts on Wordpress, and it was doing a good job. I had a few blogs on WP, one was my technical blog, and another was just me rambling about life. But I realized that Wordpress was not very friendly to &lt;code&gt;coding blog posts&lt;/code&gt;. Sure, they had a code block segment, but the horrible switching from blockmode to classic mode was a pain&lt;/p&gt;
&lt;p&gt;Also, I found out that I really wanted control of the things that I am building. Building my own site (Well... with the help of Pelican) gave me the granularity of control I want. While I'm not building everything from ground up, at least I have the power to control the things around my blog. &lt;/p&gt;
&lt;p&gt;And writing in markdown is fun!&lt;/p&gt;
&lt;p&gt;In this post, I'm going to run through the thing I did to make this happen. It took literally one day for me to migrate all my posts over to Pelican.&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Exporting Your Wordpress Posts&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;This part is fairly simple. Thankfully, the things you create on Wordpress are yours to keep. That was one of my biggest initial fear at first, where my content was not kept by me. And if the unlikely case of Wordpress going under, all my posts are lost.&lt;/p&gt;
&lt;p&gt;In this step, you simply go to your Wordpress site, hit on Tools, and export both your posts and your media (images, videos etc)&lt;/p&gt;
&lt;p&gt;&lt;img alt="export your image" src="/media/images/export.png"&gt;&lt;/p&gt;
&lt;h3&gt;Setting up Pelican&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;Once you got your back up ready, we're now going to setup Pelican on your local machine, before pushing it up to Heroku&lt;/p&gt;
&lt;p&gt;Its pretty straight forward, and you can follow the guide here: &lt;a href="http://doc.getpelican.com/en/latest/quickstart.html"&gt;Pelican Quickstart&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Basically you&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install Pelican&lt;/li&gt;
&lt;li&gt;Start a placeholder project&lt;/li&gt;
&lt;li&gt;Move on to the next step&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Setting up Heroku&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;Of course, if everything was so simple, why the hell would I want to write this post? It's always the system integration where the troubles pop up.&lt;/p&gt;
&lt;p&gt;Assuming that you already have a Heroku account and downloaded Heroku toolbelt on your local machine, then getting the contents of &lt;code&gt;requirements.txt&lt;/code&gt; and &lt;code&gt;Procfile&lt;/code&gt; are the trickiest&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;requirements.txt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;pelican&lt;/span&gt;
&lt;span class="err"&gt;Markdown&lt;/span&gt;
&lt;span class="err"&gt;typogrify&lt;/span&gt;
&lt;span class="err"&gt;gunicorn&lt;/span&gt;
&lt;span class="err"&gt;static&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Procfile&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;web: pelican content --listen --port $PORT&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The reason for doing &lt;code&gt;$PORT&lt;/code&gt; is that you can't choose which port Heroku listens on, so you set it to pull from the Heroku environment with &lt;code&gt;$PORT&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Importing your Wordpress contents over&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;With that done, you can start to import your Wordpress content over.&lt;/p&gt;
&lt;p&gt;Your Wordpress files downloaded earlier would be in XML format, and thankfully, Pelican has a module that does all the heavy lifting for you.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pelican-import --wpfile &amp;lt;filename&amp;gt; -m markdown&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If you don't specify &lt;code&gt;-m markdown&lt;/code&gt;, it will default to &lt;code&gt;.rst&lt;/code&gt;, which causes a whole lot of rendering problems&lt;/p&gt;
&lt;p&gt;But wait! You're not done yet.&lt;/p&gt;
&lt;p&gt;All the pictures and media within your posts are linked to the Wordpress format, which would look something like this&lt;/p&gt;
&lt;p&gt;&lt;code&gt;![](chanjinhao.files.wordpress.com/2019/01/img.png)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This would not work, as proper rendering would look something like this&lt;/p&gt;
&lt;p&gt;&lt;code&gt;![placeholder]({attach}media/img.png)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To make your life easier, here's a command to replace all strings, in all files&lt;/p&gt;
&lt;p&gt;&lt;code&gt;find . -name '*.md' -exec sed -i -e 's/&amp;lt;old&amp;gt;/&amp;lt;new&amp;gt;/g' {} \;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;What this does is to find all files ending with &lt;code&gt;.md&lt;/code&gt;, and execute a &lt;code&gt;sed&lt;/code&gt; replacement call. In this case, our command would look like this:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;find . -name '*.md' -exec sed -i -e 's/chanjinhao.files.wordpress.com\{attach\}media//g' {} \;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;We also need to remove all the wordpress, and html stuff. I'll leave you to figure out how to do it given the command above.&lt;/p&gt;
&lt;h3&gt;GOGOGO&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;Once you're done with that, run the command &lt;/p&gt;
&lt;p&gt;&lt;code&gt;pelican&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;to see if there's any issues with your build. Once you fixed all the errors, you can proceed to &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;git add .&lt;/span&gt;
&lt;span class="err"&gt;git commit -m &amp;quot;first push to heroku&amp;quot;&lt;/span&gt;
&lt;span class="err"&gt;git push heroku master&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And your new website should be live!&lt;/p&gt;
&lt;p&gt;I've aliased those 3 commands to &lt;code&gt;GOGOGO&lt;/code&gt; (since they all start with G, and it saves a lot of keystrokes)&lt;/p&gt;
&lt;h3&gt;Others&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;If you wanna play around with the whole setup, you can look at things like Pelican themes, and Pelican plugins&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/getpelican/pelican-themes"&gt;Themes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/getpelican/pelican-plugins"&gt;Plugins&lt;/a&gt;&lt;/p&gt;</content><category term="Software Engineering"></category><category term="Heroku"></category></entry><entry><title>Async and Await in C#</title><link href="/async-and-await-in-c.html" rel="alternate"></link><published>2018-12-09T22:40:00+08:00</published><updated>2018-12-09T22:40:00+08:00</updated><author><name>Chan Jin Hao</name></author><id>tag:None,2018-12-09:/async-and-await-in-c.html</id><summary type="html">&lt;h2&gt;Async and Await in C&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; are used when we are doing asynchronous programming. Why we would want to do asynchronous programming, is due to performance issues. When we have two unrelated tasks that are in the program, and one task takes a long time to process, it …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Async and Await in C&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; are used when we are doing asynchronous programming. Why we would want to do asynchronous programming, is due to performance issues. When we have two unrelated tasks that are in the program, and one task takes a long time to process, it should not be holding up the other task.&lt;/p&gt;
&lt;p&gt;We use Asynchronous programming to hand over program controls to ensure that no one process is holding up the entire program.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; are used together to make a program asynchronous.&lt;/p&gt;
&lt;p&gt;Below is a simple example to make a program asynchronous&lt;/p&gt;
&lt;p&gt;[code lang=text]&lt;br&gt;
static void Main(string[] args)&lt;br&gt;
{&lt;br&gt;
DoSomething();&lt;br&gt;
Console.WriteLine("Control to Main!");&lt;br&gt;
Console.ReadLine();&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;public static async void DoSomething()&lt;br&gt;
{&lt;br&gt;
await Delay();&lt;br&gt;
Console.WriteLine("Control back to Method!");&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;async static Task Delay()&lt;br&gt;
{&lt;br&gt;
await Task.Delay(5000);&lt;br&gt;
}&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;The output on the console:&lt;/p&gt;
&lt;p&gt;[code lang=text]&lt;br&gt;
Control to Main!&lt;br&gt;
&amp;lt;after a 5 second delay&amp;gt;&lt;br&gt;
Control back to Method!&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;You first have to declare the method asynchronous with &lt;code&gt;async&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;async static Task Delay()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Next, we put the keyword &lt;code&gt;await&lt;/code&gt; beside the command that will take a long time.&lt;/p&gt;
&lt;p&gt;What &lt;code&gt;await&lt;/code&gt; does is this&lt;br&gt;
- It awaits for the command to be completed&lt;br&gt;
- While it is awaiting, it passes control back up to the caller&lt;br&gt;
- After the command is completed, the control is passed back to the callee&lt;/p&gt;
&lt;p&gt;If we look at the code, the program first calls &lt;code&gt;DoSomething()&lt;/code&gt;, which calls &lt;code&gt;await Delay()&lt;/code&gt;, which then executes &lt;code&gt;await Task.Delay(5000);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;When &lt;code&gt;await Task.Delay(5000);&lt;/code&gt; is executed, &lt;code&gt;Delay()&lt;/code&gt; passes control back up to the caller, which is &lt;code&gt;DoSomething()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Because &lt;code&gt;DoSomething()&lt;/code&gt; is awaiting &lt;code&gt;Delay()&lt;/code&gt;, it passes control back up again to &lt;code&gt;Main()&lt;/code&gt;, which then executes &lt;code&gt;Console.WriteLine("Control to Main!");&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;After &lt;code&gt;await Task.Delay(5000);&lt;/code&gt; is completed, it returns to &lt;code&gt;DoSomething()&lt;/code&gt;, which executes &lt;code&gt;Console.WriteLine("Control back to Method!");&lt;/code&gt;, and finally returns to &lt;code&gt;Main()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Another example is given below&lt;/p&gt;
&lt;p&gt;[code lang=text]&lt;br&gt;
async Task&amp;lt;int&amp;gt; AccessTheWebAsync()&lt;br&gt;
{&lt;br&gt;
HttpClient client = new HttpClient();&lt;/p&gt;
&lt;p&gt;Task&amp;lt;string&amp;gt; getStringTask = client.GetStringAsync("http://msdn.microsoft.com");&lt;/p&gt;
&lt;p&gt;// You can do work here that doesn't rely on the string from GetStringAsync.&lt;br&gt;
DoIndependentWork();&lt;/p&gt;
&lt;p&gt;string urlContents = await getStringTask;&lt;br&gt;
//The thing is that this returns an int to a method that has a return type of Task&amp;lt;int&amp;gt;&lt;br&gt;
return urlContents.Length;&lt;br&gt;
}&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;Here, &lt;code&gt;Task getStringTask = client.GetStringAsync("http://msdn.microsoft.com");&lt;/code&gt; is called, followed by &lt;code&gt;DoIndependentWork();&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We next call &lt;code&gt;string urlContents = await getStringTask;&lt;/code&gt;, which awaits on &lt;code&gt;getStringTask&lt;/code&gt;. There are two possible scenerios here&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;After &lt;code&gt;DoIndependentWork()&lt;/code&gt; is completed, &lt;code&gt;Task getStringTask = client.GetStringAsync("http://msdn.microsoft.com");&lt;/code&gt; is completed as well, and &lt;code&gt;getStringTask&lt;/code&gt; is fully initialized. In this case, there is no control being passed back to the caller of &lt;code&gt;AccessTheWebAsync()&lt;/code&gt;, and the program just runs through.&lt;/li&gt;
&lt;li&gt;After &lt;code&gt;DoIndependentWork()&lt;/code&gt; is completed, &lt;code&gt;Task getStringTask = client.GetStringAsync("http://msdn.microsoft.com");&lt;/code&gt; NOT completed, and &lt;code&gt;getStringTask&lt;/code&gt; is NOT initialized. In this case, there control is passed back to the caller of &lt;code&gt;AccessTheWebAsync()&lt;/code&gt; for execution. Only after &lt;code&gt;getStringTask&lt;/code&gt; has been initialized, will the program pass back control to &lt;code&gt;AccessTheWebAsync()&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And for obvious reasons, &lt;code&gt;async&lt;/code&gt; cannot be a modifier on the &lt;code&gt;Main&lt;/code&gt; method, because it is the root caller.&lt;/p&gt;</content><category term="Software Engineering"></category><category term="Async"></category><category term="Await"></category></entry><entry><title>C# Pass By Value</title><link href="/c-pass-by-value.html" rel="alternate"></link><published>2018-11-25T22:37:00+08:00</published><updated>2018-11-25T22:37:00+08:00</updated><author><name>Chan Jin Hao</name></author><id>tag:None,2018-11-25:/c-pass-by-value.html</id><summary type="html">&lt;h2&gt;Pass by Value vs Reference&lt;/h2&gt;
&lt;h3&gt;Pass by value&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;When we pass call a function, we sometimes pass in some values for the function to use. Typically, it would look like this&lt;/p&gt;
&lt;p&gt;&lt;code&gt;(parameters)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;p&gt;&lt;code&gt;void swapValues(int x, int y)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;When we pass a value to the function &lt;code&gt;swapValue()&lt;/code&gt;, we are …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Pass by Value vs Reference&lt;/h2&gt;
&lt;h3&gt;Pass by value&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;When we pass call a function, we sometimes pass in some values for the function to use. Typically, it would look like this&lt;/p&gt;
&lt;p&gt;&lt;code&gt;(parameters)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;p&gt;&lt;code&gt;void swapValues(int x, int y)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;When we pass a value to the function &lt;code&gt;swapValue()&lt;/code&gt;, we are passing it by value.&lt;/p&gt;
&lt;p&gt;What this means is that, a new memory region is allocated from the stack for the new parameters &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, and the value of that memory region is set to the value that was passed to it.&lt;/p&gt;
&lt;p&gt;I'll write a post on what happens in the memory region when a function is called in the future (dealing with functions stack frame allocation etc). But for now, when we call a function, it is allocated a function stack frame, with all its variables and paramters contained within the frame.&lt;/p&gt;
&lt;p&gt;Let's look at the following code block&lt;/p&gt;
&lt;p&gt;[code lang=text]&lt;br&gt;
public static void Main()&lt;br&gt;
{&lt;br&gt;
int x = 10;&lt;br&gt;
int y = 20;&lt;/p&gt;
&lt;p&gt;swapValues(10, 20);&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;void swapValues(int x, int y)&lt;br&gt;
{&lt;br&gt;
int temp;&lt;/p&gt;
&lt;p&gt;temp = x;&lt;br&gt;
x = y;&lt;br&gt;
y = temp;&lt;br&gt;
}&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;When &lt;code&gt;Main()&lt;/code&gt; calls &lt;code&gt;swapValues()&lt;/code&gt;, a new stack frame is allocated just for &lt;code&gt;swapValues()&lt;/code&gt; to store all its local variables, and parameters passed into it. The stack frame will be the new memory region for the two paramters &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, and assigns them to the values that was passed to them, which are &lt;code&gt;10&lt;/code&gt; and &lt;code&gt;20&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Because it's a new memory region, whatever changes that are done in the function &lt;code&gt;swapValues()&lt;/code&gt; will only affect the newly allocated memory regions of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; in the stack frame of &lt;code&gt;swapValues()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;That is to say, the values of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; in the &lt;code&gt;Main&lt;/code&gt; function stack frame will be left untouched!&lt;/p&gt;
&lt;p&gt;This kind of defeats the purpose of the function...&lt;/p&gt;
&lt;p&gt;So how do we fix it?&lt;/p&gt;
&lt;h3&gt;Pass by Reference&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;Let's tweak the code above slightly to make it pass by reference&lt;/p&gt;
&lt;p&gt;[code lang=text]&lt;br&gt;
public static void Main()&lt;br&gt;
{&lt;br&gt;
int x = 10;&lt;br&gt;
int y = 20;&lt;/p&gt;
&lt;p&gt;swapValues(10, 20);&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;void swapValues(ref int x, ref int y)&lt;br&gt;
{&lt;br&gt;
int temp;&lt;/p&gt;
&lt;p&gt;temp = x;&lt;br&gt;
x = y;&lt;br&gt;
y = temp;&lt;br&gt;
}&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;The only difference is adding the keyword &lt;code&gt;ref&lt;/code&gt; in front of the function parameters, which tell the function to reference to the objects passed in. This means that whatever work that is done in &lt;code&gt;swapValues()&lt;/code&gt; will work directly on the values in &lt;code&gt;Main()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The difference between passing by value and passing by reference is shown below&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Passing by value: Allocates memory space on the stack frame and assigns it the value of the object that were passed into the function&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Passing by reference: Does not allocate memory space on the stack frame, uses the object that was passed in directly&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this case, whatever changes done to &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; in the function &lt;code&gt;swapValues()&lt;/code&gt; will directly modify the values inside the stack frame of &lt;code&gt;Main()&lt;/code&gt;!&lt;/p&gt;
&lt;h3&gt;Reference Objects&lt;/h3&gt;
&lt;hr&gt;
&lt;h3&gt;Modifying the reference object part 1&lt;/h3&gt;
&lt;p&gt;Now heres the tricky part. Some objects are reference objects, which is to say they are pointers to begin with. An example would be a string in C, or an array object.&lt;/p&gt;
&lt;p&gt;[code lang=text]&lt;br&gt;
public static void Main()&lt;br&gt;
{&lt;br&gt;
int[] myArrayMain = new int[] {1, 2, 3, 4, 5};&lt;/p&gt;
&lt;p&gt;editArray(myArrayMain);&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;void editArray(int[] myArrayParam)&lt;br&gt;
{&lt;br&gt;
myArrayParam[0] = 7;&lt;br&gt;
}&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;The above code will changes &lt;code&gt;myArrayMain&lt;/code&gt; to &lt;code&gt;{0, 2, 3, 4, 5}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;When we call the function &lt;code&gt;editArray()&lt;/code&gt;, we create a new stack frame for &lt;code&gt;editArray()&lt;/code&gt; to hold its local variables and paramters. Because &lt;code&gt;myArrayParam&lt;/code&gt; is a reference object, we create a pointer on the stack frame to hold any value that is passed into &lt;code&gt;myArrayParam&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We are passing in &lt;code&gt;myArrayMain&lt;/code&gt;, which is a reference object. That means, the value of &lt;code&gt;myArrayMain&lt;/code&gt; is an address, which points to the first element in the array.&lt;/p&gt;
&lt;p&gt;When we pass &lt;code&gt;myArrayMain&lt;/code&gt; to &lt;code&gt;myArrayParam&lt;/code&gt;, we are assigning &lt;code&gt;myArrayParam&lt;/code&gt; to the value of the &lt;code&gt;myArrayMain&lt;/code&gt;, which is an address that points to the first element of &lt;code&gt;myArrayMain&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;Memory pointer layout:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;myArrayParam&lt;/code&gt; --&amp;gt; &lt;code&gt;myArrayMain&lt;/code&gt; --&amp;gt; &lt;code&gt;memory of first element in myArrayMain (1)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;So any changes made to &lt;code&gt;myArrayParam&lt;/code&gt; in &lt;code&gt;editArray()&lt;/code&gt; will be propagated to the &lt;code&gt;myArrayMain&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Modifying the reference object part 2&lt;/h3&gt;
&lt;p&gt;Now what happens when we change &lt;code&gt;editArray()&lt;/code&gt; to create a new array? Will &lt;code&gt;myArrayMain&lt;/code&gt; be overwritten?&lt;/p&gt;
&lt;p&gt;[code lang=text]&lt;br&gt;
public static void Main()&lt;br&gt;
{&lt;br&gt;
int[] myArrayMain = new int[] {1, 2, 3, 4, 5};&lt;/p&gt;
&lt;p&gt;editArray(myArrayMain);&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;void editArray(int[] myArrayParam)&lt;br&gt;
{&lt;br&gt;
myArrayParam[0] = new int[] {6, 7, 8, 9, 10};&lt;br&gt;
}&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;Nope. &lt;code&gt;myArrayMain&lt;/code&gt; will still remain as &lt;code&gt;{1, 2, 3, 4, 5}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;When we call &lt;code&gt;myArrayParam[0] = new int[] {6, 7, 8, 9, 10};&lt;/code&gt;, we are repointing &lt;code&gt;myArrayParam&lt;/code&gt; to something else. This breaks the memory pointer layout above&lt;/p&gt;
&lt;p&gt;[code lang=text]&lt;br&gt;
myArrayParam --&amp;gt; myArrayMain --&amp;gt; memory of first element in myArrayMain (1)&lt;/p&gt;
&lt;p&gt;becomes&lt;/p&gt;
&lt;p&gt;myArrayParam --&amp;gt; memory of first element in myArrayParam (6)&lt;/p&gt;
&lt;p&gt;myArrayMain --&amp;gt; memory of first element in myArrayMain (1)&lt;br&gt;
[/code]&lt;/p&gt;
&lt;h3&gt;Modifying the reference object part 3&lt;/h3&gt;
&lt;p&gt;Lets look at the final attempt. This time, we call &lt;code&gt;ref&lt;/code&gt; on the array that is passed in&lt;/p&gt;
&lt;p&gt;[code lang=text]&lt;br&gt;
public static void Main()&lt;br&gt;
{&lt;br&gt;
int[] myArrayMain = new int[] {1, 2, 3, 4, 5};&lt;/p&gt;
&lt;p&gt;editArray(myArrayMain);&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;void editArray(ref int[] myArrayParam)&lt;br&gt;
{&lt;br&gt;
myArrayParam[0] = new int[] {6, 7, 8, 9, 10};&lt;br&gt;
}&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;Remember that when we call &lt;code&gt;ref&lt;/code&gt;, in the stack frame of &lt;code&gt;editArray()&lt;/code&gt;, no new memory is allocted, and the original &lt;code&gt;myArrayMain&lt;/code&gt; is used.&lt;/p&gt;
&lt;p&gt;The memory pointer layout is now&lt;/p&gt;
&lt;p&gt;[code lang=text]&lt;br&gt;
myArrayParam --&amp;gt; memory of first element in myArrayMain (1)&lt;/p&gt;
&lt;p&gt;myArrayMain --&amp;gt; memory of first element in myArrayMain (1)&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;Both &lt;code&gt;myArrayParam&lt;/code&gt; and &lt;code&gt;myArrayMain&lt;/code&gt; now point to the first element in &lt;code&gt;myArrayMain&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;So when the code block is ran, &lt;code&gt;myArrayMain&lt;/code&gt; will change to &lt;code&gt;{6, 7, 8, 9, 10}&lt;/code&gt;!&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;Phew! That was a long and confusing read, so here's a TLDR:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C# passes by value&lt;/li&gt;
&lt;li&gt;When a function is called, a stack frame is allocated for local and parameter variables&lt;/li&gt;
&lt;li&gt;The parameter variables are assigned to the value that was passed in&lt;/li&gt;
&lt;li&gt;No memory in the stack frame is allocated for parameters that are prefixed with &lt;code&gt;ref&lt;/code&gt;, but are accessed directly from the caller function&lt;/li&gt;
&lt;li&gt;Arrays are reference objects&lt;/li&gt;
&lt;li&gt;The values they hold are the memory space of the first element in the array&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks for reading!!&lt;/p&gt;
&lt;p&gt;Further reading: http://www.yoda.arachsys.com/csharp/parameters.html Excellent page!!!&lt;/p&gt;</content><category term="Software Engineering"></category></entry><entry><title>Python Tips and Tricks</title><link href="/python-tips-and-tricks.html" rel="alternate"></link><published>2018-11-04T22:32:00+08:00</published><updated>2018-11-04T22:32:00+08:00</updated><author><name>Chan Jin Hao</name></author><id>tag:None,2018-11-04:/python-tips-and-tricks.html</id><summary type="html">&lt;h2&gt;Summary of Python tips, tricks, and to-dos&lt;/h2&gt;
&lt;p&gt;These pointers are what I picked up from the book &lt;code&gt;Python Tricks: The Book&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The book itself is a summary, and here i'll be doing a summary of a summary.&lt;/p&gt;
&lt;p&gt;Python is great because of its flexibility, but that itself could potentially be …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Summary of Python tips, tricks, and to-dos&lt;/h2&gt;
&lt;p&gt;These pointers are what I picked up from the book &lt;code&gt;Python Tricks: The Book&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The book itself is a summary, and here i'll be doing a summary of a summary.&lt;/p&gt;
&lt;p&gt;Python is great because of its flexibility, but that itself could potentially be a double edged sword. It can be so easy to abuse and write really messy code, yet the program still runs fine.&lt;/p&gt;
&lt;p&gt;Lets talk about the points made in the book. I only picked out points that I feel that are useful and that I have very little exposure to. Don't get me wrong, all the points in the book are great, just some greater than others.&lt;/p&gt;
&lt;h2&gt;Assertions&lt;/h2&gt;
&lt;p&gt;If the asserted condition returns true, nothing happens.&lt;br&gt;
If the asserted condition returns false, &lt;code&gt;AssertionError&lt;/code&gt; exception is raised.&lt;/p&gt;
&lt;p&gt;[code lang=text]&lt;br&gt;
def price_after_discount(0ld_price, discount):&lt;br&gt;
new_price = 0ld_price * discount&lt;br&gt;
assert 0 &amp;lt;= new_price &amp;lt;= old_price&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;This block of code applies a discount the an item. We assert that the new price is greater than zero, and not more than the old price.&lt;/p&gt;
&lt;p&gt;Assert is different from a regular exception in that it's meant for unrecoverable errors. Recoverable errors are things like &lt;code&gt;File not found&lt;/code&gt;, where you can fix it (by putting the file where it should be) and try to run the program again. Asserts are meant for internal sanity checking.&lt;/p&gt;
&lt;p&gt;Don't use Assert for data validation, because it can be optimized away.&lt;/p&gt;
&lt;p&gt;[code lang=text]&lt;br&gt;
def delete_product(prod_id, user):&lt;br&gt;
assert user.is_admin()&lt;br&gt;
assert store.has_product(prod_id) 'Unknown product'&lt;br&gt;
store.get_product(prod_id).delete()&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;When you optimize away asserts, we remove checking if the user is admin, or if the store has the product.&lt;/p&gt;
&lt;h2&gt;Context Managers&lt;/h2&gt;
&lt;p&gt;When you do OO in python and you create classes to use, you can set context managers that dictate what happens when you enter and exit the code.&lt;/p&gt;
&lt;p&gt;This is done by defining &lt;code&gt;__enter__&lt;/code&gt; and &lt;code&gt;__exit__&lt;/code&gt; functions&lt;/p&gt;
&lt;p&gt;[code lang=text]&lt;br&gt;
class ManagedFile:&lt;br&gt;
def __init__(self, name):&lt;br&gt;
self.name = name&lt;/p&gt;
&lt;p&gt;def __enter__(self):&lt;br&gt;
self.file = open(self.name, 'w')&lt;br&gt;
return self.file&lt;/p&gt;
&lt;p&gt;def __exit__(self, exc_type, exc_val, exc_tb):&lt;br&gt;
if self.file:&lt;br&gt;
self.file.close()&lt;/p&gt;
&lt;p&gt;[/code]&lt;/p&gt;
&lt;p&gt;&lt;code&gt;__enter__&lt;/code&gt; is called when the execution enters the context of the statement, and &lt;code&gt;__exit__&lt;/code&gt; is called when it leaves the context.&lt;/p&gt;
&lt;h2&gt;Underscores and Dunders&lt;/h2&gt;
&lt;p&gt;On naming the variables in python, each name has a different meaning:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;SingleLeadingUnderscore: &lt;code&gt;_var&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Purely conventional, this tells the reader that the variable is only meant for use internal to the function.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SingleTrailingUnderscore: &lt;code&gt;var_&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Purely conventional, putting an underscore at the back prevents naming conflicts with Python's keywords&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DoubleLeadingUnderscore: &lt;code&gt;__var&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;When double underscores are infront, Python name-mangles the variable, and puts the class name in front of it.&lt;/p&gt;
&lt;p&gt;[code lang=text]&lt;br&gt;
   class Test: def __init__(self):&lt;br&gt;
   self.foo = 11&lt;br&gt;
   self._bar = 23&lt;br&gt;
   self.__baz = 42&lt;br&gt;
   [/code]&lt;/p&gt;
&lt;p&gt;When you look at the attributes of object &lt;code&gt;Test&lt;/code&gt;, we see that &lt;code&gt;__baz&lt;/code&gt; has become &lt;code&gt;_Test__baz&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;[code lang=text]&lt;br&gt;
   &amp;gt;&amp;gt;&amp;gt; t = Test()&lt;br&gt;
   &amp;gt;&amp;gt;&amp;gt; dir(t)&lt;br&gt;
   ['_Test__baz', '__class__', '__delattr__' ... ]&lt;br&gt;
   [/code]&lt;/p&gt;
&lt;p&gt;This is done to protect the variable from being overridden in subclasses that extends from the parent class&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DoubleLeadingandTrailingUnderscore: &lt;code&gt;__var__&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Leading and trailing underscores are left untouched by Python. They are reserved for special usage in Python, such as &lt;code&gt;__init__&lt;/code&gt; and &lt;code&gt;__call__&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SingleUnderscore: &lt;code&gt;_&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Meant to represent a variable that is temporary and insignificant&lt;/p&gt;
&lt;p&gt;[code lang=text]&lt;br&gt;
   for _ in range(5):&lt;br&gt;
   print("Hello World)&lt;br&gt;
   [/code]&lt;/p&gt;
&lt;p&gt;&lt;code&gt;_&lt;/code&gt; also represents the last value of the Python interpreter session&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;String Formatting&lt;/h2&gt;
&lt;p&gt;Old method: &lt;code&gt;"Hello, %s" % name&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;New method: &lt;code&gt;"Hello, {}".format(name)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The new method is more powerful, because the order in &lt;code&gt;format&lt;/code&gt; doesn't matter&lt;/p&gt;
&lt;p&gt;&lt;code&gt;'Hey {name}, there is a 0x{errno:x} error!'.format(errno=errno, name=name)&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Python Functions&lt;/h2&gt;
&lt;p&gt;Python's functions are first class objects.&lt;/p&gt;
&lt;p&gt;What this means is that they can be assigned to variables, stored in data structures, and passed as arguements&lt;/p&gt;
&lt;p&gt;[code lang=text]&lt;br&gt;
&amp;gt;&amp;gt;&amp;gt; funcs = [bark, str.lower, str.capitalize]&lt;br&gt;
&amp;gt;&amp;gt;&amp;gt; funcs&lt;br&gt;
[&amp;lt;function yell at 0x10ff96510&amp;gt;, &amp;lt;method 'lower' of 'str' objects&amp;gt;, &amp;lt;method 'capitalize' of 'str' objects&amp;gt;]&lt;br&gt;
[/code]&lt;/p&gt;
&lt;h2&gt;Lambdas&lt;/h2&gt;
&lt;p&gt;Lambdas declare small anonymous functions. It's a declarative way of programming&lt;/p&gt;
&lt;p&gt;[code lang=text]&lt;br&gt;
&amp;gt;&amp;gt;&amp;gt; add = lambda x, y: x + y&lt;br&gt;
&amp;gt;&amp;gt;&amp;gt; add(5, 3)&lt;br&gt;
8&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;The syntax: &lt;code&gt;lambda x, y&lt;/code&gt; are the inputs. &lt;code&gt;x + y&lt;/code&gt; is the action to carry out and return.&lt;/p&gt;
&lt;p&gt;A more complete example:&lt;/p&gt;
&lt;p&gt;[code lang=text]&lt;br&gt;
&amp;gt;&amp;gt;&amp;gt; tuples = [(1, 'd'), (2, 'b'), (4, 'a'), (3, 'c')]&lt;br&gt;
&amp;gt;&amp;gt;&amp;gt; sorted(tuples, key=lambda x: x[1])&lt;br&gt;
[(4, 'a'), (2, 'b'), (3, 'c'), (1, 'd')]&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;The tuple is passed into the lambda function, and it returns the second element, which is assigned to key. The output is then sorted according to the second value.&lt;/p&gt;
&lt;h2&gt;Decorators&lt;/h2&gt;
&lt;p&gt;Decorators let you modify the behavior of the callee, without modifying the callee's code itself.&lt;/p&gt;
&lt;p&gt;Some common use case for decorators are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Logging&lt;/li&gt;
&lt;li&gt;User authentication&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;[code lang=text]&lt;br&gt;
def uppercase(func):&lt;br&gt;
def wrapper():&lt;br&gt;
original_result = func()&lt;br&gt;
modified_result = original_result.upper()&lt;br&gt;
return modified_result&lt;br&gt;
return wrapper&lt;/p&gt;
&lt;p&gt;@uppercase&lt;br&gt;
def greet():&lt;br&gt;
return 'Hello!'&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; greet()&lt;br&gt;
'HELLO!'&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;When we put the decorator on &lt;code&gt;greet()&lt;/code&gt;, we are passing the function to our decorator function.&lt;/p&gt;
&lt;p&gt;The output is then gotten from the decorator&lt;/p&gt;
&lt;p&gt;Decorators are done bottom to top&lt;/p&gt;
&lt;p&gt;[code lang=text]&lt;br&gt;
@strong&lt;br&gt;
@emphasis&lt;br&gt;
def greet():&lt;br&gt;
return 'Hello!&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;&lt;code&gt;emphasis&lt;/code&gt; is executed first, before &lt;code&gt;strong&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Decorators can also accept arguments by using &lt;code&gt;args&lt;/code&gt; and &lt;code&gt;kwargs&lt;/code&gt;. The arguments are gotten from the original function, and passed to the decorators.&lt;/p&gt;
&lt;p&gt;[code lang=text]&lt;br&gt;
def proxy(func):&lt;br&gt;
def wrapper(*args, **kwargs):&lt;br&gt;
return func(*args, **kwargs)&lt;br&gt;
return wrapper&lt;br&gt;
[/code]&lt;/p&gt;
&lt;h2&gt;*args and **kwargs&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;*args&lt;/code&gt; and &lt;code&gt;**kwargs&lt;/code&gt; are optional arguments to a function.&lt;/p&gt;
&lt;p&gt;[code lang=text]&lt;br&gt;
def foo(required, *args, **kwargs):&lt;br&gt;
print(required)&lt;br&gt;
if args:&lt;br&gt;
print(args)&lt;br&gt;
if kwargs:&lt;br&gt;
print(kwargs)&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; foo() TypeError:&lt;br&gt;
"foo() missing 1 required positional arg: 'required'"&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; foo('hello')&lt;br&gt;
hello&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; foo('hello', 1, 2, 3)&lt;br&gt;
hello (1, 2, 3)&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; foo('hello', 1, 2, 3, key1='value', key2=999)&lt;br&gt;
hello (1, 2, 3) {'key1': 'value', 'key2': 999}&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;&lt;code&gt;*args&lt;/code&gt; collects extra positional arguments&lt;br&gt;
&lt;code&gt;**kwargs&lt;/code&gt; collects extra keywords as a dictionary&lt;/p&gt;
&lt;h2&gt;Writing your own exception class&lt;/h2&gt;
&lt;p&gt;[code lang=text]&lt;br&gt;
class NameTooShortError(ValueError):&lt;br&gt;
pass&lt;/p&gt;
&lt;p&gt;def validate(name):&lt;br&gt;
if len(name) &amp;lt; 10::&lt;br&gt;
raise NameTooShortError(name)&lt;br&gt;
[/code]&lt;/p&gt;
&lt;h2&gt;References, Shallow Copying and Deep Copying&lt;/h2&gt;
&lt;h4&gt;References&lt;/h4&gt;
&lt;p&gt;[code lang=text]&lt;br&gt;
new_list = original_list&lt;br&gt;
new_dict = original_dict&lt;br&gt;
new_set = original_set&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;This just creates references, and any modifications done to &lt;code&gt;original_&lt;/code&gt; will also modify &lt;code&gt;new_&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;[code lang=text]&lt;br&gt;
&amp;gt;&amp;gt;&amp;gt; xs&lt;br&gt;
[[1, 2, 3], [4, 5, 6], [7, 8, 9]]&lt;br&gt;
&amp;gt;&amp;gt;&amp;gt; ys&lt;br&gt;
[[1, 2, 3], [4, 5, 6], [7, 8, 9]]&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; xs.append("Hello")&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; xs&lt;br&gt;
[[1, 2, 3], [4, 5, 6], [7, 8, 9], "Hello"]&lt;br&gt;
&amp;gt;&amp;gt;&amp;gt; ys&lt;br&gt;
[[1, 2, 3], [4, 5, 6], [7, 8, 9], "Hello"]&lt;br&gt;
[/code]&lt;/p&gt;
&lt;h4&gt;Shallow Copying&lt;/h4&gt;
&lt;p&gt;[code lang=text]&lt;br&gt;
new_list = list(original_list)&lt;br&gt;
new_dict = dict(original_dict)&lt;br&gt;
new_set = set(original_set)&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;This makes a new list, but the children objects in the list are not copied.&lt;/p&gt;
&lt;p&gt;[code lang=text]&lt;br&gt;
&amp;gt;&amp;gt;&amp;gt; xs&lt;br&gt;
[[1, 2, 3], [4, 5, 6], [7, 8, 9]]&lt;br&gt;
&amp;gt;&amp;gt;&amp;gt; ys&lt;br&gt;
[[1, 2, 3], [4, 5, 6], [7, 8, 9]]&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; xs.append("Hello")&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; xs&lt;br&gt;
[[1, 2, 3], [4, 5, 6], [7, 8, 9], "Hello"]&lt;br&gt;
&amp;gt;&amp;gt;&amp;gt; ys&lt;br&gt;
[[1, 2, 3], [4, 5, 6], [7, 8, 9]]&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; xs[1][0] = "X"&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; xs&lt;br&gt;
[[1, 2, 3], ['X', 5, 6], [7, 8, 9], "Hello"]&lt;br&gt;
&amp;gt;&amp;gt;&amp;gt; ys&lt;br&gt;
[[1, 2, 3], ['X', 5, 6], [7, 8, 9]]&lt;/p&gt;
&lt;p&gt;[/code]&lt;/p&gt;
&lt;h4&gt;Deep Copying&lt;/h4&gt;
&lt;p&gt;[code lang=text]&lt;br&gt;
new_list = copy.deepcopy(original_list)&lt;br&gt;
new_dict = copy.deepcopy(original_dict)&lt;br&gt;
new_set = copy.deepcopy(original_set)&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;This creates an entirely new instance, and copies all the children too.&lt;/p&gt;
&lt;p&gt;[code lang=text]&lt;br&gt;
&amp;gt;&amp;gt;&amp;gt; xs&lt;br&gt;
[[1, 2, 3], [4, 5, 6], [7, 8, 9]]&lt;br&gt;
&amp;gt;&amp;gt;&amp;gt; ys&lt;br&gt;
[[1, 2, 3], [4, 5, 6], [7, 8, 9]]&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; xs.append("Hello")&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; xs&lt;br&gt;
[[1, 2, 3], [4, 5, 6], [7, 8, 9], "Hello"]&lt;br&gt;
&amp;gt;&amp;gt;&amp;gt; ys&lt;br&gt;
[[1, 2, 3], [4, 5, 6], [7, 8, 9]]&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; xs[1][0] = "X"&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; xs&lt;br&gt;
[[1, 2, 3], ['X', 5, 6], [7, 8, 9], "Hello"]&lt;br&gt;
&amp;gt;&amp;gt;&amp;gt; ys&lt;br&gt;
[[1, 2, 3], [4, 5, 6], [7, 8, 9]]&lt;/p&gt;
&lt;p&gt;[/code]&lt;/p&gt;
&lt;h2&gt;Generators&lt;/h2&gt;
&lt;p&gt;Generators generate values JIT (Just In Time). This is opposed to making a list, and iterating through it.&lt;/p&gt;
&lt;p&gt;[code lang=text]&lt;br&gt;
genexpr = ('Hello' for i in range(3))&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; next(genexpr)&lt;br&gt;
'Hello'&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; next(genexpr)&lt;br&gt;
'Hello'&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; next(genexpr)&lt;br&gt;
'Hello'&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; next(genexpr)&lt;br&gt;
StopIteration&lt;br&gt;
[/code]&lt;/p&gt;</content><category term="Software Engineering"></category></entry><entry><title>How Netflix Thinks of DevOps</title><link href="/how-netflix-thinks-of-devops.html" rel="alternate"></link><published>2018-07-13T07:02:00+08:00</published><updated>2018-07-13T07:02:00+08:00</updated><author><name>Chan Jin Hao</name></author><id>tag:None,2018-07-13:/how-netflix-thinks-of-devops.html</id><summary type="html">&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=UTKIT6STSVM"&gt;Link to the video of how Netflix thinks about DevOps(Hint: They don't)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://netflix.github.io/"&gt;Netflix Github Page&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Instead, what they do focus on is a lot about culture, which is really be what every company should be focusing on. In this era, for better or for worse, we as humans have …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=UTKIT6STSVM"&gt;Link to the video of how Netflix thinks about DevOps(Hint: They don't)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://netflix.github.io/"&gt;Netflix Github Page&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Instead, what they do focus on is a lot about culture, which is really be what every company should be focusing on. In this era, for better or for worse, we as humans have become more "Me"-centric. How we actualize the vision of ourselves, and how much the company supports that actualization is an important factor influencing the decision of choosing where to work.&lt;/p&gt;
&lt;p&gt;I digress. Below are the summary points of the video of what Netflix does. It's entirely non-DevOps related, and entirely cultural.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Don't build systems that say NO to developers and engineers.&lt;ul&gt;
&lt;li&gt;In some companies, there's the concept of a "Need-To-Know-Basis", both on data access, and system access. There is absolutely no reason to do so, after all, we all have the same vision the company has (If not, why are you even there?). By denying access to both data and systems, you're essentially telling your engineers: "This is not your problem. You have no business to be looking at this. Focus only on what you're hired to do".&lt;/li&gt;
&lt;li&gt;In addition to breaking engineering serendipity and spontaneity, you're inducing a lot of overhead for policy crafting, determining who has access to what, and enforcing those rules.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Freedom and Responsibility&lt;ul&gt;
&lt;li&gt;Hire smart people, and get out of their way. Let them do what they were hired to do, and trust that they would do it. The engineers should have the freedom to choose and architect solutions they see best. The company should not restrain the engineer in the worst way possible; restrain their engineering choices.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Trading [X] for Innovation&lt;ul&gt;
&lt;li&gt;Where [X] is your core business concern. For Netflix, it was uptime of their services, and trading off some concerns for uptime to invest in innovation was one of their strategies. Think about what [X] is in your company, and instead of obsessing over the optimization of [X], ensure that an equal (if not more) effort is spent in innovation.&lt;/li&gt;
&lt;li&gt;The by-product of innovation also optimizes [X], and should not be seen as an activity to do "only if you have free time". That should be the main job you're doing: Innovation.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cut down on Processes and Procedures (P&amp;amp;P)&lt;ul&gt;
&lt;li&gt;These "safety guardrails" do nothing but induce more administrative overhead. The opposite of introducing P&amp;amp;Ps is to cultivate more trust. Trust that your employees are doing the correct and right thing, instead of making them document everything and request permission.&lt;/li&gt;
&lt;li&gt;Having trust implicitly means delegating authority to them, and that means no P&amp;amp;Ps to request unnecessary permission.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Context&lt;ul&gt;
&lt;li&gt;Make sure the people you are working with have a quality and constant flow of context of the business, and business decisions. Being too caught up in your technical mumbo-jumbo and into the rabbit hole can lead you to lose sight of the bigger picture. Context of the business, and exactly why you are doing what you're doing should be constantly reinforced.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Required Standard&lt;ul&gt;
&lt;li&gt;Not "No required coding standards.", but rather no required tech stack requirements. Don't enforce tools to use, don't enforce tech stack to use. Instead, enable your engineers to choose what they want.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Silos/Walls/Fences Should be torn down&lt;ul&gt;
&lt;li&gt;As if this isn't obvious enough. Know your internal dependencies and consumers. Know exactly what is it they do and want, and know exactly what is expected of you. Knowing what each team does reduces the need for guessing, and cuts the cost of wrong anticipation.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Guesses/Instinct/Tradition&lt;ul&gt;
&lt;li&gt;Don't rely on instinct. Back it up with quantitative data. Don't fall victim to tradition. Always challenge for a better alternative.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Finally, Culture&lt;ul&gt;
&lt;li&gt;Know what culture you have. The 8 points above are an example of what culture is. To give an example of a counter-culture:&lt;ul&gt;
&lt;li&gt;I build tightly controlled systems, and only allow relevant engineers to access the system.&lt;/li&gt;
&lt;li&gt;I tell the engineers exactly what to do, and rob them from their freedom.&lt;/li&gt;
&lt;li&gt;I forsake innovation, and focus only on KPIs.&lt;/li&gt;
&lt;li&gt;I introduce numerous P&amp;amp;Ps, because I don't trust my engineers to do the right thing.&lt;/li&gt;
&lt;li&gt;I don't focus on the Why enough, and only how the How and What&lt;/li&gt;
&lt;li&gt;I restrict my engineers to use a predefined tech stack, because change is bad, and we only support such technology.&lt;/li&gt;
&lt;li&gt;I silo my teams, and everything internal to one team is a "Need-To-Know" basis to another team&lt;/li&gt;
&lt;li&gt;It has always been done this why, so don't ask why. If it ain't broke, don't fix it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Make your comapny culture well-known, and when you ask every engineer what the culture is, they should be able to tell it to you right away. If you have differing cultures, and groups of people optimizing for different things, you'll end up with a lot of problems. Internal cohesion falls apart, and different groups will work towards different goals. This will tear the company from inside out. Pass on brilliant people if they do not fit into your culture.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="Software Engineering"></category></entry><entry><title>Core Design Principles</title><link href="/core-design-principles.html" rel="alternate"></link><published>2018-07-12T09:08:00+08:00</published><updated>2018-07-12T09:08:00+08:00</updated><author><name>Chan Jin Hao</name></author><id>tag:None,2018-07-12:/core-design-principles.html</id><summary type="html">&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=llGgO74uXMI"&gt;Core Design Principles for Software Developers by Venkat Subramaniam&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Devoxx is a conference directed towards the Java, Android and HTML5 community.&lt;/p&gt;
&lt;p&gt;Some points that are language agnostic, and can be applied universally are summarized below:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Good code can be changed without much hassle.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;It is always impossible to get it …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=llGgO74uXMI"&gt;Core Design Principles for Software Developers by Venkat Subramaniam&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Devoxx is a conference directed towards the Java, Android and HTML5 community.&lt;/p&gt;
&lt;p&gt;Some points that are language agnostic, and can be applied universally are summarized below:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Good code can be changed without much hassle.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;It is always impossible to get it right the first time.&lt;/li&gt;
&lt;li&gt;Be unemotional in coding.&lt;/li&gt;
&lt;li&gt;People who are dangerous to work with (So you shouldn't become them): People who can't follow instructions, and people who only follow instructions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Take time to review code. (You can learn, and you can improve the design)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Simplicity is hard. Strive to achieve that.&lt;/li&gt;
&lt;li&gt;Simple keeps you focused (Imperative vs Declarative)&lt;/li&gt;
&lt;li&gt;Write code to solve real problems. (Don't code without knowing what it should do)&lt;/li&gt;
&lt;li&gt;Complexity (Inherent vs Accidental). Inherent Complexity comes from the problem. Accidental Complexity comes from the solution.&lt;/li&gt;
&lt;li&gt;Simple != Familiar (just because you know what it does, doesn't mean its simple)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Good Design is one that hides Inherent complexity, and eliminates Accidental Complexity&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;YAGNIy (You Aren't Going To Need It (yet)) Don't implement things that you don't need yet. Do the important things first.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Cost of implementing now &amp;gt; Cost of implementing later = Postpone&lt;/li&gt;
&lt;li&gt;Cost of implementing now = Cost of implementing later = Postpone&lt;/li&gt;
&lt;li&gt;Cost of implementing now &amp;lt; Cost of implementing later = Do it now&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Have a Good Automated Testing. This prevents fear of postponing&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Cohesion is a code that does one thing and one thing only. This makes it easier for change.&lt;/li&gt;
&lt;li&gt;Similar code stays together. Dissimilar code stays away&lt;/li&gt;
&lt;li&gt;Coupling is what you depend on. Try to see if you can remove coupling. (You can't remove all dependencies, so make them loose)&lt;/li&gt;
&lt;li&gt;Knock out before you Mock out&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Good Design has High Cohesion and Low Coupling&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;DRY (Don't repeat yourself) (Don't duplicate code, and effort)&lt;/li&gt;
&lt;li&gt;Every piece of knowledge in a system should have a single unambiguous authoritative representation&lt;/li&gt;
&lt;li&gt;CPD (Copy Paste Detector to find duplicated code)&lt;/li&gt;
&lt;li&gt;Don't write overly long functions and methods&lt;/li&gt;
&lt;li&gt;How long is a long method? SLAP (Single Level of Abstraction Principle)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SLAP: What was the level of abstraction of your function&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Don't comment what, comment why&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Open Closed Principle: A software module should be open for extension, but close for modification&lt;/li&gt;
&lt;li&gt;Use DRY and YAGNI often&lt;/li&gt;
&lt;/ol&gt;</content><category term="Software Engineering"></category></entry><entry><title>Printing Subsets in a List</title><link href="/the-journey-begins.html" rel="alternate"></link><published>2018-07-10T09:52:00+08:00</published><updated>2018-07-10T09:52:00+08:00</updated><author><name>Chan Jin Hao</name></author><id>tag:None,2018-07-10:/the-journey-begins.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;&lt;u&gt; Problem Statement &lt;/u&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Given a list of distinct items (or a set), print out all of its subset lists.&lt;/p&gt;
&lt;p&gt;Input:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[1, 2, 3, 4]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;:empty set: 1 1,2 1,3 1,4 1,2,3 1,2,4 1,3,4 1,2,3,4 2 2,3 2 …&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;&lt;u&gt; Problem Statement &lt;/u&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Given a list of distinct items (or a set), print out all of its subset lists.&lt;/p&gt;
&lt;p&gt;Input:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[1, 2, 3, 4]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;:empty set: 1 1,2 1,3 1,4 1,2,3 1,2,4 1,3,4 1,2,3,4 2 2,3 2,4 2,3,4 3 3,4 4&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;u&gt; Proposed Solution &lt;/u&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For each given list, I would need to figure out how many set of subsets there are. In this case, the total number of subsets for a given list is &lt;code&gt;2^n&lt;/code&gt;, where &lt;code&gt;n&lt;/code&gt; is the total number of items in the list.&lt;/p&gt;
&lt;p&gt;The reason it is &lt;code&gt;2^n&lt;/code&gt; is because: For each item in the list, you have 2 possible choices to take; Append an item to it, or don't. And since you have &lt;code&gt;n&lt;/code&gt; items, you have a total of &lt;code&gt;2^n&lt;/code&gt; choices.&lt;/p&gt;
&lt;p&gt;After figuring out how many total subsets there are, that can be the terminating condition in a recursive solution, something like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;if len(answer) == int(math.pow(2,len(myList))):&lt;/span&gt;
&lt;span class="err"&gt;        return answer&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In each step of the code, we need to clone the list into two to model them as the two potential choices; adding an item, or not adding an item. We add an item to each element in one list (adding an item), and preserve the original list (not adding an item), and join the two results together&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Given List = [1, 2]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Step 1: Add 1&lt;/p&gt;
&lt;p&gt;Initial set = {} (models choice of adding)&lt;br&gt;
Cloned set = {} (models choice of not adding)&lt;/p&gt;
&lt;p&gt;Resulting set that adds: {1}&lt;br&gt;
Resulting set that does not add: {}&lt;/p&gt;
&lt;p&gt;Result = {},{1}&lt;/p&gt;
&lt;p&gt;Step 2: Add 2&lt;/p&gt;
&lt;p&gt;Initial set = {},{1} (models choice of adding)&lt;br&gt;
Cloned set = {},{1} (models choice of not adding)&lt;/p&gt;
&lt;p&gt;Resulting set that adds: {2}, {1,2}&lt;br&gt;
Resulting set that does not add: {}, {1}&lt;/p&gt;
&lt;p&gt;Result = {}, {1}, {2}, {1,2}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;We can see that taking the union of sets that add, and sets that do not add will give us the total subsets. The above is the pseudocode for the main body of code for our solution. Given that we have an idea of what the terminating condition will be like, we can model this as a recursive solution.&lt;/p&gt;
&lt;p&gt;In each recursion, we should&lt;/p&gt;
&lt;p&gt;1. Check if total number of items in the set is = &lt;code&gt;2^(length of list)&lt;/code&gt;&lt;br&gt;
2. Clone the given set&lt;br&gt;
3. Add the item to one of the set&lt;br&gt;
4. Take the union of the original set and the modified set&lt;br&gt;
5. Go back to step 1&lt;/p&gt;
&lt;p&gt;Translated to python3,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;printPattern&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;givenList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;totalSubsets&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;totalSubsets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;result&lt;/span&gt;

        &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="n"&gt;adding&lt;/span&gt;
        &lt;span class="n"&gt;clonedResult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deepcopy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;itemToAdd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;givenList&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;omititng&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt; &lt;span class="n"&gt;just&lt;/span&gt; &lt;span class="n"&gt;added&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="k"&gt;next&lt;/span&gt; &lt;span class="n"&gt;recursion&lt;/span&gt;
        &lt;span class="n"&gt;newList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;givenList&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;

        &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;adding&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="k"&gt;each&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="k"&gt;result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;itemToAdd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;taking&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="k"&gt;union&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="k"&gt;both&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;
        &lt;span class="k"&gt;result&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;clonedResult&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;printPattern&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;totalSubsets&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Read here to understand why I used deepcopy: &lt;a href="https://stackoverflow.com/questions/2612802/how-to-clone-or-copy-a-list"&gt;How to clone or copy a list?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;That's it!&lt;/p&gt;</content><category term="Software Engineering"></category><category term="codexercise"></category></entry></feed>