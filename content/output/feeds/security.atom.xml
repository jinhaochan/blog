<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>A Pelican Blog - Security</title><link href="/" rel="alternate"></link><link href="/feeds/security.atom.xml" rel="self"></link><id>/</id><updated>2019-09-23T14:16:00+00:00</updated><entry><title>DNSSEC</title><link href="/dnssec.html" rel="alternate"></link><published>2019-09-23T14:16:00+00:00</published><updated>2019-09-23T14:16:00+00:00</updated><author><name>jinhaochan</name></author><id>tag:None,2019-09-23:/dnssec.html</id><summary type="html">&lt;!-- wp:paragraph --&gt;

&lt;p&gt;In the previous post, we talked about some of the attack vectors on the DNS. In this post, we're going to be talking about DNSSEC, which is an attempt to make the DNS more secure.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;A point to note, DNSSEC does not provide Confidentiality, but only Integrity. Integrity in this …&lt;/p&gt;</summary><content type="html">&lt;!-- wp:paragraph --&gt;

&lt;p&gt;In the previous post, we talked about some of the attack vectors on the DNS. In this post, we're going to be talking about DNSSEC, which is an attempt to make the DNS more secure.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;A point to note, DNSSEC does not provide Confidentiality, but only Integrity. Integrity in this case is ensuring that the reply that you received from the DNS is truly the reply, and not altered by any MITM means. The lack of Confidentiality is due to the fact that it does not encrypt your DNS traffic data, and all your queries are still exposed in plain text. These are several technologies out there now that are branching out into encryption of DNS data, named DNS over HTTPS (DoH). But for DNSSEC, there is no encryption.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;This post assumes you have knowledge of recursive DNS resolving of hostnames.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;DNSSEC introduces several new resources that are used by the DNSSEC verification process.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:list --&gt;

&lt;ul&gt;
&lt;li&gt;RRSIG (Resource Record Signature)&lt;/li&gt;
&lt;li&gt;DNSKEY (Public Key for Verification)&lt;/li&gt;
&lt;li&gt;DS (Delegation Signer)&lt;/li&gt;
&lt;li&gt;NSEC (Proof of Nonexistence - No encryption)&lt;/li&gt;
&lt;li&gt;NSEC3 ( Proof of Nonexistence - Encryption)&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /wp:list --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;We'll go through each one of them, and explain how they are being used in the verification process.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":4} --&gt;

&lt;h4&gt;RRSIG&lt;/h4&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;With DNSSEC, every reply comes with at least one RRSIG reply. RRSIG acts like a digital certification, to verify that this reply is indeed authentic.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":4} --&gt;

&lt;h4&gt;DNSKEY&lt;/h4&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;DNSSEC operates on asymmetric encryption, and DNSKEY is the public key. The RRSIG is encrypted with the private key, and verification of the response is done by decrypting it with DNSKEY.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":4} --&gt;

&lt;h4&gt;DS&lt;/h4&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;During the recursive DNS resolution process, the parent has to verify the authenticity of the child server. This is done by signing the hash of the child. The parent becomes the Delegation Signing (DS) of the child&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":4} --&gt;

&lt;h4&gt;NSEC/NSEC3&lt;/h4&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Without DNSSEC, non-existent domains are return with NXDOMAIN. With DNSSEC, non-existent domains are handled by NSEC and NSEC3 records to prove that they really don't exist. NSEC3 is the encrypted version of NSEC. We'll talk about this in a section later below.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;Difference in DNS lookup with DNSSEC&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;p&gt;[&lt;img alt="DNS resolution with DNSSEC" src="2019/09/untitled-1.png"&gt;]&lt;/p&gt;
&lt;p&gt;Up front, you can see that there is an additional layer called the Validating Resolver, which handles the DNSSEC process.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;The recursive DNS resolution to obtain the IP address of isc.org still remains the same (asking &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;.org&lt;/code&gt; and &lt;code&gt;isc.org&lt;/code&gt;). We start the phase above when we finally get the address of the authoritative server for the address of &lt;code&gt;isc.org&lt;/code&gt;&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:list {"ordered":true} --&gt;

&lt;ol&gt;
&lt;li&gt;Ask the authoritative server for the IP address of &lt;code&gt;isc.org&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Reply the IP address of &lt;code&gt;isc.org&lt;/code&gt;. Also, send the encrypted RRSIG&lt;/li&gt;
&lt;li&gt;Ask for the public DNSKEY of &lt;code&gt;isc.org&lt;/code&gt; to verify the RRSIG obtained in step 2&lt;/li&gt;
&lt;li&gt;Reply with the DNSKEY to decrypt the RRSIG, and verify the reply from &lt;code&gt;isc.org&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.org&lt;/code&gt; is the parent of &lt;code&gt;isc.org&lt;/code&gt;, and thus is the DS of &lt;code&gt;isc.org&lt;/code&gt;. As part of the DNSSEC process, &lt;code&gt;isc.org&lt;/code&gt; has to the hash of it's DNSKEY to &lt;code&gt;.org&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The hash of the child's DNSKEY is signed by the parent's DNSKEY&lt;/li&gt;
&lt;li&gt;i.e. the hash of &lt;code&gt;isc.org&lt;/code&gt; DNSKEY is signed by &lt;code&gt;.org&lt;/code&gt; DNSKEY&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ask for the hash of &lt;code&gt;isc.org&lt;/code&gt; DNSKEY, and ensure that the DNSKEY obtained in step 4 is correct&lt;/li&gt;
&lt;li&gt;Reply with the hash of &lt;code&gt;isc.org&lt;/code&gt; DNSKEY, along with the RRSIG of &lt;code&gt;.org&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Ask for the public DNSKEY of &lt;code&gt;.org&lt;/code&gt; to verify the RRSIG obtained in step 6&lt;/li&gt;
&lt;li&gt;Reply with the DNSKEY to decrypt the RRSIG, and verify the reply from &lt;code&gt;.org&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ask for the hash of &lt;code&gt;.org&lt;/code&gt; DNSKEY, and ensure that the DNSKEY obtained in step 8 is correct&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reply with the hash of &lt;code&gt;.org&lt;/code&gt; DNSKEY, along with the RRSIG of the root server&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ask for the public DNSKEY of the root server to verify the RRSIG obtained in step 10&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reply with the DNSKEY to decrypt the RRSIG, and verify the reply from the root server&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- /wp:list --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;You can see the pattern of these 4 sets of communication repeating. I've bolded steps 9, 10, 11, 12, as they are the same steps being repeated for each recursive step of DNS resolution.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;These Are Not The Records You're Looking For&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;The typical response from a DNS server when a non-existent domain is requested is returning an &lt;code&gt;NXDOMAIN&lt;/code&gt; response. However, a simple &lt;code&gt;NXDOMAIN&lt;/code&gt; will not suffice, as an attacker can simply spoof this reply to deny services to customers.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;With DNSSEC implemented, instead of using an &lt;code&gt;NXDOMAIN&lt;/code&gt; to indicate a non-existent record, we use NSEC as a proof of non-existence. NSEC stands for Next-Secure-Record, and a gist of how it works is by providing information above records before and after the requested domain.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;For NSEC to work, the records need to be sorted alphabetically so that by showing the previous and next record, we can determine if the request domain does not exist.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;An example of this in action: We have 3 employees working at a company: Alice, Edward and Susan (already sorted alphabetically). When some one calls and asks for an employee called Bob (which doesn't exist), NSEC will reply the previous and next records (alphabetically), Alice and Edward.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;We can see an obvious problem over here. Probe for many non-existent domains, and NSEC will return to you all of the records in the DNS, something which we don't want. This act is called zone-walking, or zone enumeration.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;The solution to zone walking is simply to encrypt the information being sent over, which is what is implemented in NSEC3. NSEC3 hashes the entries before sending the data over to the requesting machine&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;Credits&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;This post was a summary of this guide by ISC: &lt;a href="https://downloads.isc.org/isc/dnssec-guide/dnssec-guide.pdf"&gt;https://downloads.isc.org/isc/dnssec-guide/dnssec-guide.pdf&lt;/a&gt;&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;The above documentation is a lot more comprehensive, and this post is meant to highlight content that is important.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;</content><category term="DNSSEC"></category></entry><entry><title>DNS Attack Vectors</title><link href="/dns-attack-vectors.html" rel="alternate"></link><published>2019-07-07T14:50:00+00:00</published><updated>2019-07-07T14:50:00+00:00</updated><author><name>jinhaochan</name></author><id>tag:None,2019-07-07:/dns-attack-vectors.html</id><summary type="html">&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Before looking at DNS Attack Vectors, let's do a quick recap of what a DNS is, and what are it's functions.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;What is a DNS?&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;DNS, or Domain Name System, is a server that provides Name to IP Address resolution. When people visit websites, it's much easier for them to …&lt;/p&gt;</summary><content type="html">&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Before looking at DNS Attack Vectors, let's do a quick recap of what a DNS is, and what are it's functions.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;What is a DNS?&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;DNS, or Domain Name System, is a server that provides Name to IP Address resolution. When people visit websites, it's much easier for them to remember words, such as Facebook or Hotmail, and the DNS server translates these URLs to IP address such as 73.22.512.31.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Machines in a network, and groups of networks references a DNS server which manages a huge database of domain names to IP addresses. The act of mapping a domain name to an IP is called &lt;code&gt;DNS Name Resolution&lt;/code&gt;.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;When you connect to a home or business network, the service providers that assign your IP address also sends network configurations that includes 1 or more DNS servers that the device should use to perform DNS Name Resolution.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;DNS traffic takes place on port 53, and has both TCP and UDP protocols&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;DNS Attacks&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Now that we have a rough idea of what a DNS does, lets look at the attack vectors that can target DNS servers&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":4} --&gt;

&lt;h4&gt;1. DNS Tunneling&lt;/h4&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;DNS tunneling is a method of attack that encodes data of programs into DNS queries and responses&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;The malicious actor must first own a domain name, and his own local DNS server. In this example, we have the domain &lt;code&gt;server1.test.com&lt;/code&gt;&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;The typical steps of a DNS tunneling attack is as follows:&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:list {"ordered":true} --&gt;

&lt;ol&gt;
&lt;li&gt;Client sends out a DNS Name Resolution request to the DNS server, but the domain is modified to contain pieces of data: &lt;code&gt;MYDATA.server1.test.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The DNS server does the IP address resolution of &lt;code&gt;server1.test.com&lt;/code&gt;, and sends the modified request to that server&lt;/li&gt;
&lt;li&gt;The information of &lt;code&gt;MYDATA.server1.test.com&lt;/code&gt; is forwarded to the malicious server&lt;/li&gt;
&lt;li&gt;The bad actor can inspect the packets to view information from the DNS queries, thus achieving data exfiltration&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- /wp:list --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;DNS tunneling takes advantage of the fact that domain names are allowed up to 255 characters, but most domain names typically do not go that long. The additional data can thus be appended into the unused character space&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":4} --&gt;

&lt;h4&gt;2. DNS Cache Poisoning&lt;/h4&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;DNS cache poisoning is an attack that corrupts the DNS cache so that when DNS Name Resolution is done, it points to a malicious IP address instead of the legitimate one.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;The internet has more than one DNS servers for name resolution, and DNS servers would cache information from other DNS servers for efficiency in querying. Your machine also has a local DNS cache which performs a quick lookup, instead of performing DNS Name Resolution again.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":4} --&gt;

&lt;h4&gt;3. DNS Zone Transfer Attack&lt;/h4&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;A legitimate DNS Zone Transfer occurs when a slave DNS server requests for information from the master DNS server to update it's DNS records&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;DNS Zone Transfers are performed by TCP protocols to ensure lossless data transfer.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Bad actors can leverage on this to pose as a slave DNS server, and download all information from the master DNS server, thus revealing information about the network.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":4} --&gt;

&lt;h4&gt;4. DNS Domain Lock-Up&lt;/h4&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Domains are setup by attackers. When the target DNS server sends a request to one of the malicious Domains, the domains don't send the proper reply to end the connection, but instead send random junk to keep the TCP connection to the DNS alive.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;When enough connections are kept alive, this exhausts the DNS resources to perform further Name Resolutions.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":4} --&gt;

&lt;h4&gt;5. DNS Water Torture Attack and NXDomain (Non-Existent Domain)&lt;/h4&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;When requests with invalid domain names are sent to the DNS server, the DNS server replies with NXDomain, which indicates that the domain names are not valid.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;The DNS stores all these queries and NXDomain responses in the cache, and if these requests happens on a large scale, it can flood the cache, thus preventing further Name Resolutions from happening. This essentially is a DDoS on DNS servers.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;This attack is analogous to a MAC flooding attack, which fills up the cache with bogus MAC addresses.  &lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;</content></entry><entry><title>What are Proxies?</title><link href="/what-are-proxies.html" rel="alternate"></link><published>2019-06-21T09:57:00+00:00</published><updated>2019-06-21T09:57:00+00:00</updated><author><name>jinhaochan</name></author><id>tag:None,2019-06-21:/what-are-proxies.html</id><summary type="html">&lt;!-- wp:paragraph --&gt;

&lt;p&gt;A Proxy, or a Proxy Server / Web Proxy, is something that sits between the source of the network traffic, and the desired destination of the traffic. What the proxy will do is relay the network traffic across to the other side.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Typically, it would sit between a client and a …&lt;/p&gt;</summary><content type="html">&lt;!-- wp:paragraph --&gt;

&lt;p&gt;A Proxy, or a Proxy Server / Web Proxy, is something that sits between the source of the network traffic, and the desired destination of the traffic. What the proxy will do is relay the network traffic across to the other side.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Typically, it would sit between a client and a server, where the client is usually a web browser, and the server being the web server that hosts its resources.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;Forward Proxies&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:image {"id":457} --&gt;&lt;/p&gt;
&lt;figure class="wp-block-image"&gt;
![](https://chanjinhao.files.wordpress.com/2019/06/1-1.png){.wp-image-457}

&lt;/figure&gt;

&lt;!-- /wp:image --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Forward proxies are setup such that the clients are behind a proxy server that passes all the network traffic from the clients to the server.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Such a setup is viable for several security reasons, such as centralized scanning of traffic, identify protection and blocking of content.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;The downsides of this is that all the clients share the same bandwidth on the proxy server, thus potentially slowing the network speed for everyone.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;Reverse Proxy&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:image {"id":458} --&gt;&lt;/p&gt;
&lt;figure class="wp-block-image"&gt;
![](https://chanjinhao.files.wordpress.com/2019/06/2-1.png){.wp-image-458}

&lt;/figure&gt;

&lt;!-- /wp:image --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;A reverse proxy is the same as the forward proxy, but it's implemented on the server side instead. Multiple servers sit behind the reverse proxy, and the proxy routes the network traffic to the correct servers based on packet information.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;The reasons for a reverse proxy also pertain to security such as DDoS protection, but also includes load balancing, where the reverse proxy can detect which server is being overloaded, and redirect the traffic to other servers.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;Types of Proxies&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:heading {"level":4} --&gt;&lt;/p&gt;
&lt;h4&gt;HTTP Proxies&lt;/h4&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;HTTP proxies are designed specifically for proxying HTTP information. HTTP proxies cannot proxy for other types of protocols.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;There is also an encrypted version of a HTTPS proxy to prevent the proxy (or anyone along the pipeline) from seeing any data being transferred.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Because HTTP or HTTPS runs on TCP, this means that the HTTP proxy only supports TCP protocols&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":4} --&gt;

&lt;h4&gt;SOCKS Proxies&lt;/h4&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;While HTTP proxies are only meant for HTTP traffic, SOCKS operate on a lower level, and thus can support almost all protocols including both TCP and UDP types, as well as HTTP traffic.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;The SOCKS proxy server establishes the TCP connection on behalf of the client with an external server, and then uses that connection to route traffic between the client and server.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;SOCKS does not touch the data stream at all, only setting up the connection and routing the traffic.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;Comparison between the Proxies&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:heading {"level":4} --&gt;&lt;/p&gt;
&lt;h4&gt;Security&lt;/h4&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;In both proxies (HTTPS and SOCKS, not HTTP), encryption is present, thus your data flowing through is secure.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":4} --&gt;

&lt;h4&gt;Speed&lt;/h4&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;As SOCKS proxies only route data traffic and never touches the data inside, they can route the data much faster. However, most of the time the speed differences are negligible.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":4} --&gt;

&lt;h4&gt;Features&lt;/h4&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Since SOCKS proxies supports multiple protocols including HTTP, why still do we need a HTTP proxy?&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Because HTTP proxies understand the HTTP traffic that is flowing through, the client and the external server can both talk to the proxy server over HTTP. This can allow the HTTP proxy to do things like caching to improve performance.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;The SOCKS proxy on the other hand, does not understand HTTP traffic, and only routes the data that is flowing through. You cannot talk directly to the SOCKS server in HTTP.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Also, SOCKS proxies support both TCP and UDP connections, which can be used by more programs.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;</content><category term="Proxy"></category></entry><entry><title>Domain Fronting and SNI</title><link href="/domain-fronting-and-sni.html" rel="alternate"></link><published>2019-06-13T10:54:00+00:00</published><updated>2019-06-13T10:54:00+00:00</updated><author><name>jinhaochan</name></author><id>tag:None,2019-06-13:/domain-fronting-and-sni.html</id><summary type="html">&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Domain fronting is a malicious act of appearing to request to visit a legitimate site (the front), while in actual fact, the request is going to another website.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Domain fronting relies on the SSL technology to work, where the service provider is unable to see the actual malicious hostname the …&lt;/p&gt;</summary><content type="html">&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Domain fronting is a malicious act of appearing to request to visit a legitimate site (the front), while in actual fact, the request is going to another website.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Domain fronting relies on the SSL technology to work, where the service provider is unable to see the actual malicious hostname the request is going to, but can only see fronted domain the SNI data.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;SNI&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;SNI, which stands for Server Name Indication, helps solves the issue introduced with TLS on HTTP connections.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;A server can be shared by many users to host their own websites. For example: AWS, Google Cloud or Azure all host multiple websites that clients can visit.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;In a non-TLS connection, when the request is made from the client to the server, the hostname is visible in clear text. The server then simply serves the requested hostname to the client.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;In a TLS connection, it gets slightly complicated. A TLS connection requires the certificate of the website to complete the handshake. Each website hosted on the server has their own certificate. However, the hostname is encrypted in the incoming request from the client. Without the hostname, how will the server know which website the client wants to visit, and which certificate to present to the client?&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;A simple solution is presented by SNI, which indicates the hostname in the initial TLS connection (TLS Hello). This way, the server knows which website to get the certificate from to complete the TLS handshake.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;SNI-Hostname Mismatch&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Domain fronting takes advantage of SNI presented to the server. The hostname is the actual destination the packet is going to, and it's encrypted. The only information the servers have is from the SNI, and attackers can simply spoof the SNI value to something legitimate.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;An example scenario:&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:list {"ordered":true} --&gt;

&lt;ol&gt;
&lt;li&gt;Hostname : &lt;code&gt;www.badsite.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;SNI spoofed to show: &lt;code&gt;www.goodsite.com&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- /wp:list --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Since the hostname is encrypted, no one knows im going to &lt;code&gt;www.badsite.com&lt;/code&gt;, and they can only access the SNI data to assume that i'm visiting &lt;code&gt;www.goodsite.com&lt;/code&gt;&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:image {"id":452} --&gt;

&lt;figure class="wp-block-image"&gt;
![](https://chanjinhao.files.wordpress.com/2019/06/1.png){.wp-image-452}

&lt;/figure&gt;

&lt;!-- /wp:image --&gt;

&lt;!-- wp:image {"id":453} --&gt;

&lt;figure class="wp-block-image"&gt;
![](https://chanjinhao.files.wordpress.com/2019/06/2.png){.wp-image-453}

&lt;/figure&gt;

&lt;!-- /wp:image --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;Detection&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Domain fronting is used in other malicious scenarios, such as C2 communication and data exfiltration&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Detection of domain fronting obviously can't work just by observing the packet, as the contents are encrypted. Detection can thus only be done through behavioral analysis such as regular beaconing intervals, or suspicious packet sizes.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;</content><category term="Domain Fronting"></category><category term="SNI"></category></entry><entry><title>The Cyber Kill Chain</title><link href="/the-cyber-kill-chain.html" rel="alternate"></link><published>2019-05-13T16:52:00+00:00</published><updated>2019-05-13T16:52:00+00:00</updated><author><name>jinhaochan</name></author><id>tag:None,2019-05-13:/the-cyber-kill-chain.html</id><summary type="html">&lt;!-- wp:paragraph --&gt;

&lt;p&gt;The Cyber Kill Chain (CKC) is a sequential set of steps that takes place when an attack happens. There are many variations of the CKC by different companies such as , but the "trusted" and most convincing variant is by Lockheed Martin.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:image {"id":447} --&gt;

&lt;figure class="wp-block-image"&gt;
![](https://chanjinhao.files.wordpress.com/2019/05/the-cyber-kill-chain-body.png …&lt;/figure&gt;</summary><content type="html">&lt;!-- wp:paragraph --&gt;

&lt;p&gt;The Cyber Kill Chain (CKC) is a sequential set of steps that takes place when an attack happens. There are many variations of the CKC by different companies such as , but the "trusted" and most convincing variant is by Lockheed Martin.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:image {"id":447} --&gt;

&lt;figure class="wp-block-image"&gt;
![](https://chanjinhao.files.wordpress.com/2019/05/the-cyber-kill-chain-body.png.pc-adaptive.1920.medium.png){.wp-image-447}

&lt;/figure&gt;

&lt;!-- /wp:image --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;This CKC is pretty straightforward, and by disrupting any part of the kill chain, you can stop the final attack, which is "Actions On Objectives"&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;At each step, there are examples of what an Adversary could do, and what Defenders can do to detect or disrupt it.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;Reconnaissance&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Before carrying out the attack, the adversary will scope out and survey the target. This phase is extremely broad, and can cover technical and non-technical aspects.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;For example, they can find out the working hours of your system administrator to plan the right time to attack, or find out what version of OS and email application the company is using. They can harvest emails or contact information through OSINT channels, or social media. They can find scan for open services in the company network.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Because of such a broad scope of activities, it's almost impossible to be aware that someone is performing reconnaissance on your company. What you can do however lies on the technical side, such as:&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:list --&gt;

&lt;ul&gt;
&lt;li&gt;Enabling logging for your webservers to detect any sort of scraping or probing.&lt;/li&gt;
&lt;li&gt;Disabling all unneeded services&lt;/li&gt;
&lt;li&gt;Disabling ICMP responses&lt;/li&gt;
&lt;li&gt;Properly configuring your Firewall to log and prevent network traffic&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /wp:list --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;&lt;strong&gt;Detection&lt;/strong&gt;:&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;-&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;&lt;strong&gt;Prevention&lt;/strong&gt;:&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;The goal here is to prevent information leakage, as well as detecting information probing attempts. Knowing that an attack is going to happen is the first step to protecting yourself.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;Weaponization&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;In this stage, the adversary starts to prepare the payload for attack.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Given the information he got from reconnaissance, he can build tools specific for OS versions, application versions or Firewall versions. Since this phase of the attack happens outside the victims circle of control, there is no way of detecting when Weaponization happens.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;&lt;strong&gt;Detection:&lt;/strong&gt;&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;-&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;&lt;strong&gt;Prevention:&lt;/strong&gt;&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;One possible way of neutralizing this phase is to do regular security assessments of your infrastructure, and detect if any applications or versions are vulnerable, and perform patching to secure those assets.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;By doing so, you are preventing, or making it very hard for adversaries to perform Weaponization.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;Delivery&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;In the delivery stage, the attacker sends the Weaponized tools to the victim, either via software (Email, links, direct to the webserver) or physical means (USB insertion)&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;This is the most crucial stage for defenders. Knowing what are all the possible vectors of attacks, and either mitigating it, or eliminating it if possible.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;You must know which are your most important infrastructures that are connected to the most important assets, and make sure that they are well secured with various layers of security.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;&lt;strong&gt;Detection:&lt;/strong&gt;&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Logging must also be enabled to detect any point of entry, such as email logs, web logs and endpoint logs.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;&lt;strong&gt;Prevention:&lt;/strong&gt;&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Airgapped machines, web proxies and proper staff security education all limit the vectors of delivery.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;Exploitation&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;If you failed to prevent Delivery, the adversaries would be able to enter the machine. Once inside, the next step for them is to perform exploitation to either gain privilege escalation, or to gain unauthorized information. This can either be a software or hardware vulnerability that the adversary leverages on.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Preventing exploitation is a huge monster of a topic on it's own, but basically it revolves around patching your systems, making sure appropriate security controls are in place, and properly educating your staff on security issues like phishing emails and malicious links.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Also, regular security assessments should be done to lock down all possible edge cases.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;&lt;strong&gt;Detection:&lt;/strong&gt;&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Endpoint security and application logging&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;&lt;strong&gt;Prevention:&lt;/strong&gt;&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;By hardening your systems and educating your users, you're limiting the amount of damage that can be done if the adversary is within your network.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;Installation&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Once the adversary gets into your system and performs exploitation, it is highly likely that he would have escalated privileges, and can install other tools he wants to allow him to perform other actions.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;These tools includes keyloggers, rootkits, backdoors, webshells or scripts.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;&lt;strong&gt;Detection:&lt;/strong&gt;&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Detection at this phase involves behavioral analysis. HIPS, endpoint detection tools, and log analysis can be used to detect anomalous activities on both the endpoint and network.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;&lt;strong&gt;Prevention:&lt;/strong&gt;&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;At this phase, since the adversary already has exploited the system and has escalated privilege. There is little you can do to prevention, but only detection and performing remediation.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;Command &amp;amp; Control&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;After installing rootkits and backdoors, the malware needs to receive commands remotely from their server. This is done by establishing a C2 connection out from the victim machine to the adversary.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;C2 communication is hard to detect, and it can take place under commonly used ports and services such as HTTP, DNS or SMTP.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;&lt;strong&gt;Detection:&lt;/strong&gt;&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Network based detection can be used to find anomalous activities on the network. Web proxies to log all traffic for analysis.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;&lt;strong&gt;Prevention:&lt;/strong&gt;&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Blocking and preventing unauthorized network traffic. Disabling unneeded services that connect out to the internet. Close unused ports. Honey pots to study the C2 traffic.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;Actions On Objectives&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;In the CKC, it shows this as the final step after performing all previous actions. Actions On Objects could mean acquiring user credentials, collecting and exfiltrating data or lateral movement. But these actions need not be the final step of the CKC, after establishing a C2 or performing Exploitation.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Depending on the objective the adversary wants to perform, Actions On Objectives could actually happen after the Exploitation phase onward.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;This phase is an accumulation of steps, thus there is no single point of detection or prevention. To disrupt this part of the kill chain, you have to target all preceding parts of the CKC.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;&lt;strong&gt;Detection:&lt;/strong&gt;&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Logging on network and endpoint to perform anomaly detection.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;&lt;strong&gt;Prevention:&lt;/strong&gt;&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Preventing Delivery and Exploitation would prevent the adversaries to perform any Actions, thus preventing this final step of the CKC.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Installation cannot be prevented, since it assumes that the adversary has escalated privileges, and a C2 connection may not be required to perform an Action On Objectives.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;</content><category term="Cyber kill chain"></category></entry><entry><title>Side Channel Data Exfiltration</title><link href="/side-channel-data-exfiltration.html" rel="alternate"></link><published>2019-05-10T14:39:00+00:00</published><updated>2019-05-10T14:39:00+00:00</updated><author><name>jinhaochan</name></author><id>tag:None,2019-05-10:/side-channel-data-exfiltration.html</id><summary type="html">&lt;!-- wp:paragraph --&gt;

&lt;p&gt;A typical data exfiltration attack can be quite easy to spot. By monitoring the usage of common protocols such as HTTP, HTTPS, FTP or even DNS, we can deduce if a data exfiltration is taking place.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Most modern DLP (Data Leak Prevention) solutions today that incorporate network analysis can perform …&lt;/p&gt;</summary><content type="html">&lt;!-- wp:paragraph --&gt;

&lt;p&gt;A typical data exfiltration attack can be quite easy to spot. By monitoring the usage of common protocols such as HTTP, HTTPS, FTP or even DNS, we can deduce if a data exfiltration is taking place.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Most modern DLP (Data Leak Prevention) solutions today that incorporate network analysis can perform such detection across multiple protocols. In fact, a simple data analysis by SIEMs and a competent analyst can point out anomalies in traffic behavior and protocol usage.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;The bad guys are well aware of this, and thus are looking for many innovative ways to exfiltrate data that does not leverage on typical protocols, of even the network at all. I came across a few that I found were extremely interesting:&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;Data Transfer over Ultrasonic Frequency&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/jamesonrader/CUE-Ultrasonic-Transmissions-Protocol"&gt;https://github.com/jamesonrader/CUE-Ultrasonic-Transmissions-Protocol&lt;/a&gt;&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;On the write up, it has &lt;strong&gt;&lt;em&gt;"No reliance on a data connection, including Wi-Fi, Bluetooth, or cellular service."&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;As of now, the advertised usage is targeted at various marketing activities during events at a stadium. One example usage was &lt;strong&gt;&lt;em&gt;"Triggering commands on the smartphone through a television broadcast, online video, radio commercial, film and movies."&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;If you can send commands, you can send data. If you can send data, it's data exfiltration.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;Data Transfer over Screen Interfaces&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/pentestpartners/PTP-RAT"&gt;https://github.com/pentestpartners/PTP-RAT&lt;/a&gt;&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;&lt;a href="https://www.pentestpartners.com/security-blog/exfiltration-by-encoding-data-in-pixel-colour-values/"&gt;https://www.pentestpartners.com/security-blog/exfiltration-by-encoding-data-in-pixel-colour-values/&lt;/a&gt;&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;This package is more straightforward as malicious tool.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;You have a sender (Victim) and a receiver (C2). The victim has his machine compromised, and has established an RDP connection back to the C2. To get the RDP connection in the first place can be done by tunneling through SSH: &lt;a href="https://serverfault.com/questions/200249/how-to-tunnel-windows-remote-desktop-through-ssh-using-a-linux-box"&gt;https://serverfault.com/questions/200249/how-to-tunnel-windows-remote-desktop-through-ssh-using-a-linux-box&lt;/a&gt;&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Once the RDP connection is established, this tool shows that data exfiltration can be performed by encoding data into pixels, which on the receiver end, can read the screen decode them.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:core-embed/youtube {"url":"https://www.youtube.com/watch?time_continue=1\u0026v=hpw8Lz5Fg9I","type":"rich","providerNameSlug":"","className":"wp-embed-aspect-16-9 wp-has-aspect-ratio"} --&gt;

&lt;figure class="wp-block-embed-youtube wp-block-embed is-type-rich wp-embed-aspect-16-9 wp-has-aspect-ratio"&gt;
&lt;div class="wp-block-embed__wrapper"&gt;

https://www.youtube.com/watch?time\_continue=1&amp;v=hpw8Lz5Fg9I

&lt;/div&gt;

&lt;/figure&gt;

&lt;!-- /wp:core-embed/youtube --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;Data Transfer over Hardware Manipulation&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Perhaps the most interesting of all is hijacking and manipulating the physical machine itself. In the event of an air-gapped machine where no network connection is present, getting data out can be very challenging. (Getting into an air-gapped machine is even more challenging, and can involve really complex scenarios such as supply-chain attacks)&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;This paper explain how it's possible to control the blinking of LED lights and, using a recording device, capture the blinking sequences to reconstruct data: &lt;a href="https://arxiv.org/abs/1706.01140"&gt;https://arxiv.org/abs/1706.01140&lt;/a&gt;&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Even more innovative ones take control of the PC fans, and control the RPM to produce sound based data encoding: &lt;a href="https://www.technologyreview.com/s/601816/how-fansmitter-malware-steals-data-from-air-gapped-computers/"&gt;https://www.technologyreview.com/s/601816/how-fansmitter-malware-steals-data-from-air-gapped-computers/&lt;/a&gt;&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;End Notes&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;The techniques are endless, and as attackers continue to get more innovative, the list will continue to grow. That being said, all these attacks are considerably hard to pull off, and what we as defenders can do is the bare minimum of preventing easy ways of data exfiltration over the network.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Once we raise the difficulty threshold of data exfiltration to a certain level, then should we start worrying about such innovative and out of the box methods. Get the basics right first!&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;</content><category term="data exfiltration"></category></entry><entry><title>Looking out for C2 Traffic</title><link href="/looking-out-for-c2-traffic.html" rel="alternate"></link><published>2019-05-02T16:14:00+00:00</published><updated>2019-05-02T16:14:00+00:00</updated><author><name>jinhaochan</name></author><id>tag:None,2019-05-02:/looking-out-for-c2-traffic.html</id><summary type="html">&lt;!-- wp:heading --&gt;

&lt;h2&gt;Types of C2 Communication&lt;/h2&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;When a host gets infected with a malware, sometimes it will attempt to call back to it's Command and Control (C2) to get, or send information. There are 4 types of C2 communication traffic&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:list {"ordered":true} --&gt;

&lt;ol&gt;
&lt;li&gt;Beacon&lt;ul&gt;
&lt;li&gt;After a host has been compromised, the malware will send a …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;!-- wp:heading --&gt;

&lt;h2&gt;Types of C2 Communication&lt;/h2&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;When a host gets infected with a malware, sometimes it will attempt to call back to it's Command and Control (C2) to get, or send information. There are 4 types of C2 communication traffic&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:list {"ordered":true} --&gt;

&lt;ol&gt;
&lt;li&gt;Beacon&lt;ul&gt;
&lt;li&gt;After a host has been compromised, the malware will send a message heartbeat to the C2 to inform them of it's status. This traffic is just to tell the C2 that it's alive.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Command&lt;ul&gt;
&lt;li&gt;The command is sent from the C2 to the malware residing on the compromised host. It can either be real-time, or non-real-time. Non-real-time commands means that the command is stored and queued somewhere which the malware can retrieve to execute.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Exfiltration&lt;ul&gt;
&lt;li&gt;This command is sent from the compromised host to the C2. Exfiltration means sending a payload, and this payload can either be a reply from the malware, or stolen data from the host or network. Exfiltration can be done either immediately on request, or at regular (or deliberately irregular) intervals&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Connectivity Check&lt;ul&gt;
&lt;li&gt;This check is done by the malware to check if it has internet connectivity out. This connection may not talk directly to the C2, but may try to connect to something as benign as Google. If it doesn't have any internet connection, it can either defer talking to the C2, or remove itself entirely from the system.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- /wp:list --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;Capturing C2 traffic&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;There are some strategies to capture C2 traffic, such as leveraging on CTI to learn about IOCs, patterns and log entries that may indicate a compromise.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Because C2 traffic is a networking phenomenon, most approaches towards network analysis, such as:&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:list --&gt;

&lt;ul&gt;
&lt;li&gt;Netflow Analysis for inflow and outflow&lt;/li&gt;
&lt;li&gt;IRC and P2P traffic&lt;/li&gt;
&lt;li&gt;DNS query logs (to look out for DNS tunneling or DGA)&lt;/li&gt;
&lt;li&gt;Unusual port numbers and services&lt;/li&gt;
&lt;li&gt;Unusual timing of connections&lt;/li&gt;
&lt;li&gt;Requests to Social Media at unusual hours&lt;/li&gt;
&lt;li&gt;Packet size&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /wp:list --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Below shows an image of the packet sizes versus time, and we can see the start difference between a normal Google search and a Malware&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:image {"id":435,"align":"center"} --&gt;

&lt;div class="wp-block-image"&gt;

&lt;figure class="aligncenter"&gt;
![](https://chanjinhao.files.wordpress.com/2019/05/eta-blake-fig-2.png){.wp-image-435}
&lt;/figure&gt;

&lt;/div&gt;

&lt;!-- /wp:image --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;Machine Learning to capture C2 traffic&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Machine learning techniques can be employed to detect C2 traffic. In an extremely noisy environment like network traffic, ML perform anomaly detection by sieving out traffic that stands out.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;I did a small sample project which can be seen here:&lt;a href="https://github.com/jinhaochan/BotnetDetection"&gt;https://github.com/jinhaochan/BotnetDetection&lt;/a&gt;&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;The model trained took features only from network behavior, and had quite a good performance. Although I must say that more advanced malwares these days come up with creative techniques, and in this case, machine learning might fail to detect them due to the lack to training data. Furthermore, the malware can cleverly disguise themselves to look like normal traffic, and the model we train miss those entries&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;Analyzing C2 traffic&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Assuming that you know a malware has infected a host and is talking to a C2 server, you can either setup a honeypot, or try to reverse engineer the malware sample on the host.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Setting up the honeypot is essentially performing an MITM between the malware and the C2 server. We allow the malware to connect to the C2 and internet, while isolating it from other machines on the network to prevent it from spreading. This way, we can capture all the traffic that's flowing to and from the C2, and we can find out what the motive of the malware is.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;The second method is getting the sample of the malware on the infected host, and perform reverse engineering to find out what functions and capabilities it has.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;MITRE ATT&amp;amp;CK TTP for C2&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;There is a branch Tactics in the MITRE ATT&amp;amp;CK Framework dedicated to C2, and there is a collection of Techniques they use to identify C2 communication.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;If you are coming up with a system or model to detect C2 traffic, the matrix can be highly beneficial. But take caution to not fit a round peg into a square hole, the list is not comprehensive. Attackers are aware of MITRE and their TTPs, and will actively build ways around them.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;Software to use for detection C2&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Bro (now renamed to Zeek) &lt;a href="https://www.zeek.org/"&gt;https://www.zeek.org/&lt;/a&gt;&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;There are many write ups out there on how to use Zeek to capture and analyze traffic. Zeek is not specific to capturing just C2, but a wide array of network activities&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;</content><category term="C2"></category><category term="Command and Control"></category></entry><entry><title>What is UPnP? (And how it can be malicious)</title><link href="/what-is-upnp-and-how-it-can-be-malicious.html" rel="alternate"></link><published>2019-04-29T20:09:00+00:00</published><updated>2019-04-29T20:09:00+00:00</updated><author><name>jinhaochan</name></author><id>tag:None,2019-04-29:/what-is-upnp-and-how-it-can-be-malicious.html</id><summary type="html">&lt;!-- wp:paragraph --&gt;

&lt;p&gt;UPnP, which stands for Universal Plug n Play, is a set of networking protocols used to facilitate adding of new devices to the network. It comes enabled default on most new routers.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;For example, when you connect a new printer to the network, it automatically becomes discoverable by all other …&lt;/p&gt;</summary><content type="html">&lt;!-- wp:paragraph --&gt;

&lt;p&gt;UPnP, which stands for Universal Plug n Play, is a set of networking protocols used to facilitate adding of new devices to the network. It comes enabled default on most new routers.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;For example, when you connect a new printer to the network, it automatically becomes discoverable by all other devices without you having to configure the IP address, or opening ports on the firewall. It does so through the concept of zero-configuration networking, which at it's core consists of&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:list {"ordered":true} --&gt;

&lt;ol&gt;
&lt;li&gt;Automatic assignment of network address&lt;/li&gt;
&lt;li&gt;Automatic distribution and resolution of hostnames&lt;/li&gt;
&lt;li&gt;Automatic location of network services such as printers (through Service Discovery Protocol)&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- /wp:list --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Device search and advertising is done over HTTP over UDP on port 1900&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;This means that any UPnP compatible device can join the network and automatically get an IP address, broadcast it's name, advertise it's capabilities /services on request, and learn about capabilities / services on the network.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;UPnP Setup Steps&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:heading {"level":4} --&gt;&lt;/p&gt;
&lt;h4&gt;Addressing&lt;/h4&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;The device implements a DHCP client, and must search for a DHCP server on the network. If no DHCP server exists on the network, it then assigns itself an IP through AutoIP&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":4} --&gt;

&lt;h4&gt;Discovery&lt;/h4&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;The device then uses Simple Service Discovery Protocol (SSDP) to advertise it's own service to Control Points (CP) on the network by sending SSDP Alive Messages, which provides very basic information about the device&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":4} --&gt;

&lt;h4&gt;Description&lt;/h4&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;To learn more about the device, the Control Point must retrieve the device description from the URL provided from the SSDP. The Device Description comes in an XML format, and has information such as model number, serial number and manufacturer name.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":4} --&gt;

&lt;h4&gt;Control&lt;/h4&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;After getting the description, the Control Point can send actions to the device via Simple Object Access Protocol (SOAP)&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":4} --&gt;

&lt;h4&gt;Notifications&lt;/h4&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;The UPnP device can send events or notifications to the Control Points on any changes that happen to it. This uses the General Event Notification Architecture (GENA)&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":4} --&gt;

&lt;h4&gt;Presentation&lt;/h4&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;If the device has any pages for presentation, the Control Point can receive it and load it on the web browser&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;How It Is Abused&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;UPnP does not perform any sort of authentication, and assumes that any devices that is connected is trusted.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Also, UPnP can automatically configure port forwarding on the router without having any user intervention, or authentication.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Flash UPnP attack was one of the attack that abused the UPnP protocol, and how it works was by sending a UPnP request to the router to forward ports, thus exposing it to the internet. The attack could also change your primary DNS server with a UPnP request.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;The best defense therefore is to &lt;strong&gt;disable UPnP on your routers&lt;/strong&gt;&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;</content><category term="UPnP"></category></entry><entry><title>MITRE on Threat Detection</title><link href="/mitre-on-threat-detection.html" rel="alternate"></link><published>2019-04-25T17:37:00+00:00</published><updated>2019-04-25T17:37:00+00:00</updated><author><name>jinhaochan</name></author><id>tag:None,2019-04-25:/mitre-on-threat-detection.html</id><summary type="html">&lt;!-- wp:paragraph --&gt;

&lt;p&gt;I just sat through a webinar by the folks at Red Canary, and they covered some questions regarding threat detection using the MITRE ATT&amp;amp;CK framework.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;The webinar sat down with the researchers who created MITRE, and it was quite insightful. Here are some of the notes I took that …&lt;/p&gt;</summary><content type="html">&lt;!-- wp:paragraph --&gt;

&lt;p&gt;I just sat through a webinar by the folks at Red Canary, and they covered some questions regarding threat detection using the MITRE ATT&amp;amp;CK framework.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;The webinar sat down with the researchers who created MITRE, and it was quite insightful. Here are some of the notes I took that may be useful for present and future work:&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;Top 10 MITRE ATT&amp;amp;CK Techniques&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:list {"ordered":true} --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Powershell&lt;/li&gt;
&lt;li&gt;Scripting&lt;/li&gt;
&lt;li&gt;Regsvr32&lt;/li&gt;
&lt;li&gt;Connection proxy&lt;/li&gt;
&lt;li&gt;Spearphising&lt;/li&gt;
&lt;li&gt;Masquerading&lt;/li&gt;
&lt;li&gt;Credential Dumping&lt;/li&gt;
&lt;li&gt;Registry run keys&lt;/li&gt;
&lt;li&gt;Rundll32&lt;/li&gt;
&lt;li&gt;Service Execution&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- /wp:list --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;We can observe that a bulk of the these techniques are actually native operating system utilities, and that adversaries are leveraging on these preinstalled utilities to carry out their attacks. Things like Powershell, Regsvr32 and Rundll32 are very common things that are executed in benign settings.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;The implications of this is that we simply can't just "turn off" these services in an attempt to disrupt their Cyber Kill Chain. What has to be done is proper logging and auditing of these services.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;For example, we need to turn on logging for Powershell command line, or cmd.exe command line parameters to observe what command is being ran. Also, we need to turn on process tracking to identify which process spawns what other processes. If Microsoft Word spawns cmd.exe or Powershell, we know that something is highly suspicious.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;That being said, there needs to be a fine balance to ensure we don't get too much log by enabling everything. Most activities are normally benign, and having too much logging will induced noise, which may invariably hide the malicious activities!&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;Top Data Sources for leveraging on MITRE ATT&amp;amp;CK&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:list {"ordered":true} --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Process Monitoring&lt;/li&gt;
&lt;li&gt;File Monitoring&lt;/li&gt;
&lt;li&gt;Process Command-line Parameters&lt;/li&gt;
&lt;li&gt;API monitoring&lt;/li&gt;
&lt;li&gt;Process use of network&lt;/li&gt;
&lt;li&gt;Windows Registry&lt;/li&gt;
&lt;li&gt;Packet capture&lt;/li&gt;
&lt;li&gt;Authentication Logs&lt;/li&gt;
&lt;li&gt;Netflow&lt;/li&gt;
&lt;li&gt;Windows Event Logs&lt;/li&gt;
&lt;li&gt;Network Protocol Analysis&lt;/li&gt;
&lt;li&gt;Binary file metadata&lt;/li&gt;
&lt;li&gt;DLL monitoring&lt;/li&gt;
&lt;li&gt;Loaded DLL&lt;/li&gt;
&lt;li&gt;System Calls&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- /wp:list --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;If that list is too much, or you find that it's too noisy (or your sysadmin policy says you can't enable such logging), then there is a bare minimum data source is required for threat hunting:&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:list {"ordered":true} --&gt;

&lt;ol&gt;
&lt;li&gt;Windows Registry&lt;/li&gt;
&lt;li&gt;File Monitoring&lt;/li&gt;
&lt;li&gt;Process Command-line Parameters&lt;/li&gt;
&lt;li&gt;Process Monitoring&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- /wp:list --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;These 4 telemetry provides a comprehensive enough picture to perform threat hunting. These 4 data sources will cover most crucial end-point activities. There isn't any network components in this, but that can be incorporated if needed.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;&lt;strong&gt;How do you build up threat hunting plan based on MITRE ATT&amp;amp;CK?&lt;/strong&gt;&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Know the questions you want to answer, and construct hypotheses around them. Evaluate these hypothesis using various data sources.&lt;/strong&gt;&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Don't in go blindly. Threat hunting has to be done in a directed manner, and you need to know what you're hunting.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;Tools to assist in Threat Hunting&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:list --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DetectionLab by Chris Long&lt;/li&gt;
&lt;li&gt;ThreatHuting splunk app by Olaf Hartong&lt;/li&gt;
&lt;li&gt;PoSh_ATTCK by ENRW&lt;/li&gt;
&lt;li&gt;ATT&amp;amp;CK Navigator&lt;/li&gt;
&lt;li&gt;Atomic Red Team&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /wp:list --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;I've not used the DetectionLab, but I've used the rest quite extensively.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;The data resource by Olaf Hartong is really comprehensive, as it covers most TTPs. However, most of the queries are Sysmon oriented, so if your environment does not support Sysmon, you have to find way to tweak the Sysmon queries to match your environment.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;PoSh_ATTCK seems to be a Powershell replica of MITRE, and I did not really find much value add in it.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;ATT&amp;amp;CK Navigator is the standard way of browsing the TTPs. Standard, but very useful. They even link the TTPs to suspected APT groups, which can assist in attribution.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Atomic Red Team is a really useful resource in providing atomic tests to execute. This allows you to replay attacks, and get first hand data in your environment. However, it does not cover all the attacks, and there are some TTPs that are still missing in their atomic test list. Still, a very good resource.  &lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;</content><category term="MITRE"></category></entry><entry><title>CSRF Tokens</title><link href="/csrf-tokens.html" rel="alternate"></link><published>2019-04-24T16:13:00+00:00</published><updated>2019-04-24T16:13:00+00:00</updated><author><name>jinhaochan</name></author><id>tag:None,2019-04-24:/csrf-tokens.html</id><summary type="html">&lt;!-- wp:paragraph --&gt;

&lt;p&gt;If we look at source codes of HTML forms, we typically can spot this field being rendered on the webpage&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:image {"id":420} --&gt;

&lt;figure class="wp-block-image"&gt;
![](https://chanjinhao.files.wordpress.com/2019/04/token.png){.wp-image-420}

&lt;figcaption&gt;


&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;!-- /wp:image --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Sometimes it doesn't have the name called CSRF Token, and it just appears as a random gibberish value being loaded …&lt;/p&gt;</summary><content type="html">&lt;!-- wp:paragraph --&gt;

&lt;p&gt;If we look at source codes of HTML forms, we typically can spot this field being rendered on the webpage&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:image {"id":420} --&gt;

&lt;figure class="wp-block-image"&gt;
![](https://chanjinhao.files.wordpress.com/2019/04/token.png){.wp-image-420}

&lt;figcaption&gt;


&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;!-- /wp:image --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Sometimes it doesn't have the name called CSRF Token, and it just appears as a random gibberish value being loaded.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;This post breaks down the purpose of the token, and what happens behind the scenes with the token&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;Understanding CSRF&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;CSRF stands for Cross-Site Request Forgery, and understanding how it works is a prerequisite to understanding CSRF tokens. Below shows a picture of what a CSRF attack looks like&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:image {"id":421} --&gt;

&lt;figure class="wp-block-image"&gt;
![](https://chanjinhao.files.wordpress.com/2019/04/csrf-cross-site-request-forgery.png){.wp-image-421}

&lt;/figure&gt;

&lt;!-- /wp:image --&gt;

&lt;!-- wp:list {"ordered":true} --&gt;

&lt;ol&gt;
&lt;li&gt;The attacker crafts a GET requests that triggers a fund transfer to his account&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GET http://bank.com/transfer.php?account=Attacker&amp;amp;amount=100&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The attacker embeds this request as a hyperlink&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;a href="http://bank.com transfer.php?account=Attacker&amp;amp;amount=100"&amp;gt; READ MORE... &amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;When the user clicks on the link, it triggers the &lt;code&gt;GET&lt;/code&gt; request on behalf of the victim&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;GET&lt;/code&gt; request is triggered by the victim, and funds are transferred to the Attacker&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- /wp:list --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;This attack hinges on the fact that the Victim must be logged in to the service, and is already authenticated with an open session with the service.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;If the Victim is not logged in, when he clicks on the malicious link, instead of triggering the bad &lt;code&gt;GET&lt;/code&gt; request, it will redirect him to the login page instead, thus rendering the attack useless.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;CSRF Tokens&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;CSRF token is a simple concept where include one more argument of a token, that is sort of like a secret password.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;&lt;code&gt;http://bank.com/transfer.php?account=User&amp;amp;amount=100&amp;amp;token=32Sa2dsa10gB88vcx9cz08f331j=Da&lt;/code&gt;&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;This token value is a high-entropy value which is hard to guess by the attacker. If on the server side, it receives a wrong or missing CSRF token value, the &lt;code&gt;GET&lt;/code&gt; request is rejected and does not execute&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;The CSRF token works this way:&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:list {"ordered":true} --&gt;

&lt;ol&gt;
&lt;li&gt;Client requests for a HTML page that contains a form&lt;/li&gt;
&lt;li&gt;Server generates two distinct tokens, and sends one as a cookie to the client, and embeds the other as a hidden field in the form&lt;/li&gt;
&lt;li&gt;When the client submits the form, both CSRF tokens must be sent back to the server. The one embedded in the form, and the one in the cookie.&lt;/li&gt;
&lt;li&gt;If the request does not contain both tokens, it's rejected&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- /wp:list --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;The CSRF token value should be regularly invalidated at a time interval, per request, or when the user logs out.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;CSRF Token Vulnerabilities&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;If traffic carrying the token is not encrypted over HTTPS, the Attacker can sniff the traffic and obtain the CSRF token value and the Cookie, and perform a CSRF token replay attack.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;The solution to this is obvious: Always use encryption for communication. Aside from that, per-request-tokens can also be implemented.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;</content><category term="CSRF"></category></entry><entry><title>OS Inference through Ping TTL</title><link href="/os-inference-through-ping-ttl.html" rel="alternate"></link><published>2019-04-18T14:00:00+00:00</published><updated>2019-04-18T14:00:00+00:00</updated><author><name>jinhaochan</name></author><id>tag:None,2019-04-18:/os-inference-through-ping-ttl.html</id><summary type="html">&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;Terminologies&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:list --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ping: An command to discover the availability of a target machine. It sends an ICMP Echo Request, and waits for an Echo Reply&lt;/li&gt;
&lt;li&gt;TTL: Time-To-Live, which tells the network routers how long the packet should live. For each router that passes the packet on, the TTL reduces by 1 …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;Terminologies&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:list --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ping: An command to discover the availability of a target machine. It sends an ICMP Echo Request, and waits for an Echo Reply&lt;/li&gt;
&lt;li&gt;TTL: Time-To-Live, which tells the network routers how long the packet should live. For each router that passes the packet on, the TTL reduces by 1. Once TTL reaches 0, the packet is discarded, and an ICMP message is sent to the original sender to resend the packet.&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /wp:list --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;Infering OSes From TTLs&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Each OS has a different TTL for their Echo Reply packet, and based on that, we can infer what OS is sending us the reply.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Lets look at what happens when we ping &lt;code&gt;google.com&lt;/code&gt;&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:image {"id":415} --&gt;

&lt;figure class="wp-block-image"&gt;
![](https://chanjinhao.files.wordpress.com/2019/04/untitled.png){.wp-image-415}

&lt;/figure&gt;

&lt;!-- /wp:image --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;The TTL that is show there is the Echo Reply that Google has sent us, and when it has reached our machine, it was "left" with 42 TTL. So how do we find out how long the Echo Reply travelled? &lt;code&gt;tracert&lt;/code&gt;!&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:image {"id":416} --&gt;

&lt;figure class="wp-block-image"&gt;
![](https://chanjinhao.files.wordpress.com/2019/04/untitled-1.png){.wp-image-416}

&lt;/figure&gt;

&lt;!-- /wp:image --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;How &lt;code&gt;tracert&lt;/code&gt; works is that it first sends out a packet with TTL 1 and incrementally bumps up that amount so that at each router, it collect the IP address information about it. When a packet reaches a router with TTL=0, it is sent back to the originating machine, along with it's (the router) IP address.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Request time out happens when the network router has specifically blocked ICMP ping request, so when a packet reaches there with TTL=0, nothing is sent back.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;We can see that for traffic that travel from &lt;code&gt;google.com&lt;/code&gt; to our machine takes 23 hops, and when it reached out machine, it was left with 42 TTL. With that, we can conclude that when it was sent out, it had an initial TTL of &lt;code&gt;23+42=65&lt;/code&gt;.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;We can look at the table below to find out that Linux servers using ICMP protocol has a TTL of 64, which has the closest value to ours.  &lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;Table of TTLs for each OS&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:table --&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Device /\        Version                 Protocol       TTL
  OS                                                      &lt;/p&gt;
&lt;p&gt;AIX              -                       TCP            60&lt;/p&gt;
&lt;p&gt;AIX              -                       UDP            30&lt;/p&gt;
&lt;p&gt;AIX              3.2, 4.1                ICMP           255&lt;/p&gt;
&lt;p&gt;BSDI             BSD/OS 3.1 and 4.0      ICMP           255&lt;/p&gt;
&lt;p&gt;Compa            Tru64 v5.0              ICMP           64&lt;/p&gt;
&lt;p&gt;Cisco            -                       ICMP           254&lt;/p&gt;
&lt;p&gt;DEC\             V5                      TCP and UDP    30
  Pathworks                                               &lt;/p&gt;
&lt;p&gt;Foundry          -                       ICMP           64&lt;/p&gt;
&lt;p&gt;FreeBSD          2.1R                    TCP and UDP    64&lt;/p&gt;
&lt;p&gt;FreeBSD          3.4, 4.0                ICMP           255&lt;/p&gt;
&lt;p&gt;FreeBSD          5                       ICMP           64&lt;/p&gt;
&lt;p&gt;HP-UX            9.0x                    TCP and UDP    30&lt;/p&gt;
&lt;p&gt;HP-UX            10.01                   TCP and UDP    64&lt;/p&gt;
&lt;p&gt;HP-UX            10.2                    ICMP           255&lt;/p&gt;
&lt;p&gt;HP-UX            11                      ICMP           255&lt;/p&gt;
&lt;p&gt;HP-UX            11                      TCP            64&lt;/p&gt;
&lt;p&gt;Irix             5.3                     TCP and UDP    60&lt;/p&gt;
&lt;p&gt;Irix             6.x                     TCP and UDP    60&lt;/p&gt;
&lt;p&gt;Irix             6.5.3, 6.5.8            ICMP           255&lt;/p&gt;
&lt;p&gt;juniper          -                       ICMP           64&lt;/p&gt;
&lt;p&gt;MPE/IX\          -                       ICMP           200
  (HP)                                                    &lt;/p&gt;
&lt;p&gt;Linux            2.0.x kernel            ICMP           64&lt;/p&gt;
&lt;p&gt;Linux            2.2.14 kernel           ICMP           255&lt;/p&gt;
&lt;p&gt;Linux            2.4 kernel              ICMP           255&lt;/p&gt;
&lt;p&gt;Linux            Red Hat 9               ICMP and TCP   64&lt;/p&gt;
&lt;p&gt;MacOS/MacTCP     2.0.x                   TCP and UDP    60&lt;/p&gt;
&lt;p&gt;MacOS/MacTCP     X (10.5.6)              ICMP/TCP/UDP   64&lt;/p&gt;
&lt;p&gt;NetBSD           -                       ICMP           255&lt;/p&gt;
&lt;p&gt;Netgear\         -                       ICMP and UDP   64
  FVG318                                                  &lt;/p&gt;
&lt;p&gt;OpenBSD          2.6 &amp;amp; 2.7               ICMP           255&lt;/p&gt;
&lt;p&gt;OpenVMS          07.01.2002              ICMP           255&lt;/p&gt;
&lt;p&gt;OS/2             TCP/IP 3.0              -              64&lt;/p&gt;
&lt;p&gt;OSF/1            V3.2A                   TCP            60&lt;/p&gt;
&lt;p&gt;OSF/1            V3.2A                   UDP            30&lt;/p&gt;
&lt;p&gt;Solaris          2.5.1, 2.6, 2.7, 2.8    ICMP           255&lt;/p&gt;
&lt;p&gt;Solaris          2.8                     TCP            64&lt;/p&gt;
&lt;p&gt;Stratus          TCP_OS                 ICMP           255&lt;/p&gt;
&lt;p&gt;Stratus          TCP_OS (14.2-)         TCP and UDP    30&lt;/p&gt;
&lt;p&gt;Stratus          TCP_OS (14.3+)         TCP and UDP    64&lt;/p&gt;
&lt;p&gt;Stratus          STCP                    ICMP/TCP/UDP   60&lt;/p&gt;
&lt;p&gt;SunOS            4.1.3/4.1.4             TCP and UDP    60&lt;/p&gt;
&lt;p&gt;SunOS            5.7                     ICMP and TCP   255&lt;/p&gt;
&lt;p&gt;Ultrix           V4.1/V4.2A              TCP            60&lt;/p&gt;
&lt;p&gt;Ultrix           V4.1/V4.2A              UDP            30&lt;/p&gt;
&lt;p&gt;Ultrix           V4.2 – 4.5              ICMP           255&lt;/p&gt;
&lt;p&gt;VMS/Multinet     -                       TCP and UDP    64&lt;/p&gt;
&lt;p&gt;VMS/TCPware      -                       TCP            60&lt;/p&gt;
&lt;p&gt;VMS/TCPware      -                       UDP            64&lt;/p&gt;
&lt;p&gt;VMS/Wollongong   1.1.1.1                 TCP            128&lt;/p&gt;
&lt;p&gt;VMS/Wollongong   1.1.1.1                 UDP            30&lt;/p&gt;
&lt;p&gt;VMS/UCX          -                       TCP and UDP    128&lt;/p&gt;
&lt;p&gt;Windows          for Workgroups          TCP and UDP    32&lt;/p&gt;
&lt;p&gt;Windows          95                      TCP and UDP    32&lt;/p&gt;
&lt;p&gt;Windows          98                      ICMP           32&lt;/p&gt;
&lt;p&gt;Windows          98, 98 SE               ICMP           128&lt;/p&gt;
&lt;p&gt;Windows          98                      TCP            128&lt;/p&gt;
&lt;p&gt;Windows          NT 3.51                 TCP and UDP    32&lt;/p&gt;
&lt;p&gt;Windows          NT 4.0                  TCP and UDP    128&lt;/p&gt;
&lt;p&gt;Windows          NT 4.0 SP5-             -              32&lt;/p&gt;
&lt;p&gt;Windows          NT 4.0 SP6+             -              128&lt;/p&gt;
&lt;p&gt;Windows          NT 4 WRKS SP 3, SP 6a   ICMP           128&lt;/p&gt;
&lt;p&gt;Windows          NT 4 Server SP4         ICMP           128&lt;/p&gt;
&lt;p&gt;Windows          ME                      ICMP           128&lt;/p&gt;
&lt;p&gt;Windows          2000 pro                ICMP/TCP/UDP   128&lt;/p&gt;
&lt;p&gt;Windows          2000 family             ICMP           128&lt;/p&gt;
&lt;p&gt;Windows          Server 2003             -              128&lt;/p&gt;
&lt;p&gt;Windows          XP                      ICMP/TCP/UDP   128&lt;/p&gt;
&lt;p&gt;Windows          Vista                   ICMP/TCP/UDP   128&lt;/p&gt;
&lt;p&gt;Windows          7                       ICMP/TCP/UDP   128&lt;/p&gt;
&lt;p&gt;Windows          Server 2008             ICMP/TCP/UDP   128&lt;/p&gt;
&lt;p&gt;Windows          10                      ICMP/TCP/UDP   128&lt;/p&gt;
&lt;hr&gt;
&lt;!-- /wp:table --&gt;</content></entry><entry><title>How to harden a Linux Kernel</title><link href="/how-to-harden-a-linux-kernel.html" rel="alternate"></link><published>2019-04-17T11:21:00+00:00</published><updated>2019-04-17T11:21:00+00:00</updated><author><name>jinhaochan</name></author><id>tag:None,2019-04-17:/how-to-harden-a-linux-kernel.html</id><summary type="html">&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Hardening means to make the something more secure and resilient to attacks. When people talk about hardening, they usually talk about server hardening, which includes things like&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:list --&gt;

&lt;ul&gt;
&lt;li&gt;IP / MAC address white listing&lt;/li&gt;
&lt;li&gt;Closing unused ports&lt;/li&gt;
&lt;li&gt;Uninstalling unused systems&lt;/li&gt;
&lt;li&gt;Disabling &lt;code&gt;root&lt;/code&gt; login (no one can login as root, only a normal …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Hardening means to make the something more secure and resilient to attacks. When people talk about hardening, they usually talk about server hardening, which includes things like&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:list --&gt;

&lt;ul&gt;
&lt;li&gt;IP / MAC address white listing&lt;/li&gt;
&lt;li&gt;Closing unused ports&lt;/li&gt;
&lt;li&gt;Uninstalling unused systems&lt;/li&gt;
&lt;li&gt;Disabling &lt;code&gt;root&lt;/code&gt; login (no one can login as root, only a normal user who can &lt;code&gt;sudo&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /wp:list --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;These are legitimate areas of hardening, but another area of hardening involves securing the kernel itself at compile time. This deals with much lower level of security such as Address Space Layout Randomization (ASLR) or Read/Write permissions at different memory regions (SMEP/SMAP). In this post, I'll be writing about these 2 technologies.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;Kernel Level Hardening&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:heading {"level":4} --&gt;&lt;/p&gt;
&lt;h4&gt;Kernel Address Space Layout Randomization (KASLR)&lt;/h4&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;ASLR is a memory protection technique that randomizes the address layout of the executables that are loaded in memory. How this prevent an attack is to disallow memory space predictability.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;An attacker, if he knows your target OS (example Ubuntu 14.04), he can spin up the exact same OS in his testing environment. If there is no ASLR, the executables such as &lt;code&gt;glibc&lt;/code&gt; will be loaded in the same address space every time, allowing him to make an exploit targeting predictable addresses.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;With ASLR, the executable will always be in a different address space, and it will cause the kernel to crash (Memory access violation) if an exploit runs.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;ASLR can be configured at &lt;code&gt;/proc/sys/kernel/randomize_va_space&lt;/code&gt; with the following values:&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:list --&gt;

&lt;ul&gt;
&lt;li&gt;0 - No Randomization: All addresses are static&lt;/li&gt;
&lt;li&gt;1 - Conserved Randomization:&lt;ul&gt;
&lt;li&gt;Stack ASLR: Each execution of a program results in different stack memory layout&lt;/li&gt;
&lt;li&gt;LIBS/MMAP ASLR: Each execution of a program results in different &lt;code&gt;mmap&lt;/code&gt; memory space layout&lt;/li&gt;
&lt;li&gt;EXEC ASLR: Each program that was complied with &lt;code&gt;-fPIE -pie&lt;/code&gt;, which stands for Position Independent Executables, will get loaded into different memory locations&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2 - Full Randomization: &lt;code&gt;brk&lt;/code&gt; ASLR&lt;ul&gt;
&lt;li&gt;All of the above, including &lt;code&gt;brk&lt;/code&gt; ASLR&lt;/li&gt;
&lt;li&gt;Previously, &lt;code&gt;brk&lt;/code&gt; memory areas were always allocated after the EXEC memory area&lt;/li&gt;
&lt;li&gt;&lt;code&gt;brk&lt;/code&gt; ASLR randomizes the &lt;code&gt;brk&lt;/code&gt; memory area relative to the EXEC memory area&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /wp:list --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Possible Exploits: One of the weakness of ASLR is that even though the libraries and executables are randomly located within the memory space, within the library, the functions are still at a fixed offset. This means that if the attack want to leverage on a &lt;code&gt;glibc&lt;/code&gt; function, all he has to do is find the starting point of &lt;code&gt;glibc&lt;/code&gt;, and the function will always be at the same offset&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":4} --&gt;

&lt;h4&gt;SMEP/SMAP&lt;/h4&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Supervisor Mode Execution Protection (SMEP) and Supervisor Mode Access Prevention (SMAP) are techniques to prevent unauthorized memory access.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;SMAP prevents supervisor mode from accessing (rw) user-space memory space.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;SMEP prevents user mode from executing (x) in kernel memory space&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;SMAP is important because while you're in kernel space, you have full privileges to perform any actions. If we allow this privilege to "escape" and return to user-space memory, he can perform even more unauthorized actions and get user data.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;SMEP is important for similar reasons, where the user cannot execute in kernel space to perform unprivileged actions affecting the kernel.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Possible Exploits: Linux kernel has a function &lt;code&gt;native_write_cr4&lt;/code&gt; which can overwrite bits in the CR4 control register. One of the bit controls if SMEP/SMAP is on or off. If the attack can call the function to overwrite the bits in the control register, he can turn of SMEP/SMAP&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;!-- /wp:paragraph --&gt;</content><category term="ASLR"></category><category term="SMAP"></category><category term="SMEP"></category></entry><entry><title>Hosting your own DNS (and how to setup DNS tunneling)</title><link href="/hosting-your-own-dns-and-how-to-setup-dns-tunneling.html" rel="alternate"></link><published>2019-04-11T11:23:00+00:00</published><updated>2019-04-11T11:23:00+00:00</updated><author><name>jinhaochan</name></author><id>tag:None,2019-04-11:/hosting-your-own-dns-and-how-to-setup-dns-tunneling.html</id><summary type="html">&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Earlier this week, I wrote a post on DNS tunneling, and how to pass information over the web through the DNS protocol by stuffing information in the DNS Name Resolution process.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;In this post, we're going to look at how to setup and host your own DNS server. And because …&lt;/p&gt;</summary><content type="html">&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Earlier this week, I wrote a post on DNS tunneling, and how to pass information over the web through the DNS protocol by stuffing information in the DNS Name Resolution process.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;In this post, we're going to look at how to setup and host your own DNS server. And because you're hosting it, you can essentially choose to reply whatever you want to the subject querying you.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;Components&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:list {"ordered":true} --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;VM with a static IP address, and allowed ingress/egress connections for port 53.&lt;ul&gt;
&lt;li&gt;For this, I spun up a VM on GCP with minimal settings to reduce the cost&lt;/li&gt;
&lt;li&gt;I used a Linux based image because I planned to use bind9 for my DNS (https://wiki.debian.org/Bind9)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A Domain name&lt;ul&gt;
&lt;li&gt;Head over to &lt;code&gt;my.freenom.com&lt;/code&gt; for a free domain name with a &lt;code&gt;.tk&lt;/code&gt; TLD&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- /wp:list --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;Concepts&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:list --&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DNS Resolution&lt;ul&gt;
&lt;li&gt;When you send a query for a domain name, it queries your DNS for the corresponding IP address tied to the domain name&lt;/li&gt;
&lt;li&gt;Your DNS server then queries the Root Servers, which are DNS servers who hold information about the TLDs such as &lt;code&gt;.com&lt;/code&gt; or &lt;code&gt;.tk&lt;/code&gt;, and redirects your query to the TLD Server&lt;/li&gt;
&lt;li&gt;The TLD Server stores information about your second level domains. The &lt;code&gt;.com&lt;/code&gt; server will store information such as &lt;code&gt;facebook.com&lt;/code&gt; or &lt;code&gt;google.com&lt;/code&gt;. In our case, we're using the &lt;code&gt;.tk&lt;/code&gt; domain, so the &lt;code&gt;.tk&lt;/code&gt; server will hold our website information &lt;code&gt;dnsserver.tk&lt;/code&gt;. The TLD server defers the query to &lt;code&gt;dnsserver.tk&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dnsserver.tk&lt;/code&gt; is known as the Authoritative Server, which gives the authoritative response of the IP address&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DNS Glue Record&lt;ul&gt;
&lt;li&gt;A DNS glue record is used for preventing circular dependencies&lt;/li&gt;
&lt;li&gt;This is important when your DNS server is a subdomain of your domain name itself. e.g. &lt;code&gt;ns1.dnsserver.tk&lt;/code&gt; is a subdomain of &lt;code&gt;dnsserver.tk&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The circular dependency happens when we ask for the IP address of &lt;code&gt;dnsserver.tk&lt;/code&gt;, and it tells you to ask it's DNS server &lt;code&gt;ns1.dnsserver.tk&lt;/code&gt;. But in order to query &lt;code&gt;ns1.dnsserver.tk&lt;/code&gt;, you need the IP address of &lt;code&gt;dnsserver.tk&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;To solve this issue, we "glue" the IP address of &lt;code&gt;ns1.dnsserver.tk&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Now, instead of asking you to query &lt;code&gt;ns1.dnsserver.tk&lt;/code&gt;, it'll give you the IP address of &lt;code&gt;ns1.dnsserver.tk&lt;/code&gt; directly, breaking the circular dependency&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /wp:list --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;Execution&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:heading {"level":4} --&gt;&lt;/p&gt;
&lt;h4&gt;GCP&lt;/h4&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;We will need to spin up the VM, get it's static IP, and host a DNS server on it. this VM will be our &lt;code&gt;ns1.dnsserver.tk&lt;/code&gt;&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;You can follow this guide on how to setup bind9 on your VM https://www.digitalocean.com/community/tutorials/how-to-configure-bind-as-an-authoritative-only-dns-server-on-ubuntu-14-04&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;On your GCP console, you have to do 2 things&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:list --&gt;

&lt;ul&gt;
&lt;li&gt;Open ports 53 to allow DNS traffic to flow through&lt;/li&gt;
&lt;li&gt;Set your IP address to static, instead of ephemeral&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /wp:list --&gt;

&lt;!-- wp:heading {"level":4} --&gt;

&lt;h4&gt;Domain name console&lt;/h4&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;When you register for a new domain name, you can usually configure it. The free domain name we got from &lt;code&gt;my.freenom.com&lt;/code&gt; allows your to specify your own Nameserver and glue records.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;I've attached screen grabs on how to point the Nameservers to your &lt;code&gt;ns1.dnsserver.tk&lt;/code&gt;, and how to glue your IP address to &lt;code&gt;ns1.dnsserver.tk&lt;/code&gt; for breaking circular dependency&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:image {"id":405} --&gt;

&lt;figure class="wp-block-image"&gt;
![](https://chanjinhao.files.wordpress.com/2019/04/2.png){.wp-image-405}

&lt;/figure&gt;

&lt;!-- /wp:image --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;When setting up your glue records for the Nameservers, you can use the same IP address for both records. You need 2 records because when you specify new Nameserver, you need to input minimally 2 records&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:image {"id":406} --&gt;

&lt;figure class="wp-block-image"&gt;
![](https://chanjinhao.files.wordpress.com/2019/04/1.png){.wp-image-406}

&lt;/figure&gt;

&lt;!-- /wp:image --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Instead of letting Freenom Nameservers to be the authoritative Nameserver, point it to your Nameservers your are hosting.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;When you set a new Nameserver, you need to wait a few hours for it to propagate the information over to other DNS servers.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;In your DNS server, you can choose to return whatever you want when a DNS request comes to your server. In this way, it can be possible to craft it as a C2 communication server. I won't go into details on how to set that up, but this is one of the steps.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;</content><category term="DNS"></category></entry><entry><title>UEFI and Secure Boot</title><link href="/uefi-and-secure-boot.html" rel="alternate"></link><published>2019-04-09T16:12:00+00:00</published><updated>2019-04-09T16:12:00+00:00</updated><author><name>jinhaochan</name></author><id>tag:None,2019-04-09:/uefi-and-secure-boot.html</id><summary type="html">&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Secure Boot is a verification mechanism to ensure that code launched by the firmware is trusted. It ensures that all system level drivers are signed and trusted.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Before we talk about secure boot and how it works, we need to have some understand of UEFI (Unified Extensible Firmware Interface)&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;Overview …&lt;/h3&gt;</summary><content type="html">&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Secure Boot is a verification mechanism to ensure that code launched by the firmware is trusted. It ensures that all system level drivers are signed and trusted.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Before we talk about secure boot and how it works, we need to have some understand of UEFI (Unified Extensible Firmware Interface)&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;Overview of BIOS and UEFI&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Both UEFI and BIOS are firmwares, and are programs that run upon booting your system.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;UEFI provides faster boot time, more security features (such as Secure Boot), and a more usable graphical interface. Below shows the visual difference between BIOS and UEFI:&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:image {"id":398} --&gt;

&lt;figure class="wp-block-image"&gt;
![](https://chanjinhao.files.wordpress.com/2019/04/ximg_5913814ed5e9f.png.pagespeed.gpjpjwpjwsjsrjrprwricpmd.ic_.9qc4wyodnr.png){.wp-image-398}

&lt;figcaption&gt;
Side by side visual comparison of BIOS and UEFI

&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;!-- /wp:image --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;The typical sequence for the BIOS when booting up is:&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:list {"ordered":true} --&gt;

&lt;ol&gt;
&lt;li&gt;Perform POST (Power-On Self Test), which checks that the hardware configuration is proper&lt;/li&gt;
&lt;li&gt;Look for the MBR (Master Boot Record) on the boot device to launch the boot loader&lt;/li&gt;
&lt;li&gt;Boot loader then launches the Operating System&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- /wp:list --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;On the other hand, UEFI boots the system by launching EFI's (Extensible Firmware Interfaces) executables, as opposed to running the MBR.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;Drawbacks of BIOS&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Some major drawbacks of BIOS booting are it can only boot from an MBR-partitioned disk, and the MBR-partitioned disk can only support up to 2TB of partitions. What this means is that if you use a disk bigger than 2TB as your boot loader, it will only show that it has 2TB of space.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;GPT partitioning can support partitions more than 2TB, but BIOS cannot boot from GPT-partitioned disk, only MBR-partitioned disk&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Also, BIOS runs in 16-bit processor mode, and only has 1MB of memory space to execute in. As such due to its limited space, it cannot initialize multiple hardware at once, which leads to a slower boot time.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;These drawbacks are solved by UEFI&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;UEFI&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;One of the biggest change is that the UEFI can run in 32-bit or 64-bit mode, which has way more address space, and is able to boot a lot faster. It also has other features such as&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:list {"ordered":true} --&gt;

&lt;ol&gt;
&lt;li&gt;Being able to boot from a GPT-partitioned disk, hence being able to support disks more than 2TB&lt;/li&gt;
&lt;li&gt;Giving a nice GUI&lt;/li&gt;
&lt;li&gt;Secure Boot feature (more on this later)&lt;/li&gt;
&lt;li&gt;Network boot&lt;/li&gt;
&lt;li&gt;Firmware specification&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- /wp:list --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Just like the BIOS which targets the MBR to boot up the OS, UEFI marks one of the GPT-partition with a boot flag, and that partition becomes an EFI partition with its own EFI filesystem in FAT32 format.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;The layout of the EFI filesystem is such that every OS has its own directory, which stores all the necessary files for loading the OS&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:code --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;EFI&lt;/span&gt;
    &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Boot&lt;/span&gt;
    &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Microsoft&lt;/span&gt;
    &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Ubuntu&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- /wp:code --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;UEFI Legacy Mode&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Operating Systems that are installed in BIOS mode cannot be booted using UEFI, vice-versa. To boot a BIOS install OS in UEFI mode, you have to reinstall the entire system. To get around this hassle, UEFI supports legacy mode&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;UEFI Legacy will make the UEFI act just like a BIOS, and this throws away many of the features such as Fast Boot and Secure Boot. UEFI Legacy allows the system to boot from MBR-partitioned disks, and allows booting to be not from EFI partitions.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;Secure Boot&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Advanced malwares target the bootloader as a vector of attack, which launches their malicious process before the OS is launched.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Secure Boot is a feature in UEFI which aims to make the booting process more secure by disallowing unsigned code to run in the pre-boot phase. Secure Boot only allows signed bootloaders and drivers that are trusted by the Original Equipment Manufacturer (OEM) to run.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;When the PC first runs, it checks the signature of each piece of booting software. If the signatures are valid, then the firmware passes control to the OS.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;The OEMs creates Secure Boot keys and store them on the firmware, which are used for the verification process of Secure Boot.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Secure Boot is also customizable, and you can control which signing certificates are present for checking. You can install or remove certificates that Secure Boot uses for checking. For example, if an organization uses Linux, they can remove all of Microsoft's certificates, and install their own organization's certificate in place. Secure Boot then uses those certificates for verification.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;This customization is also available to any individual user, where you can sign your own bootloader and device drivers.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;Secure Boot and Linux&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;The whole concept of Secure Boot was built around Microsoft systems, and Linux distros were not made in mind for this. As such, there were a few hurdles to overcome when applying Secure Boot to Linux distros.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;The first money grabbing move by Microsoft was to let Linux distros pay a one-time fee of \$99 on Microsoft Sysdev Portal to apply for their bootloaders to be signed and recognized by Secure Boot. This way, these Linux distros work with Secure Boot out-of-the-box in the machines.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;In Linux, it's common for developers to develop their own third party modules, which are all unsigned, and will be rejected by the system when trying to &lt;code&gt;insmod&lt;/code&gt; them. Linux therefore provides a way to sign their custom binaries or modules using the command &lt;code&gt;sbsign&lt;/code&gt; and &lt;code&gt;kmodsign&lt;/code&gt; respectively.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;!-- /wp:paragraph --&gt;</content><category term="Secure Boot"></category><category term="UEFI"></category></entry><entry><title>What is a CGI?</title><link href="/what-is-a-cgi.html" rel="alternate"></link><published>2019-04-08T17:11:00+00:00</published><updated>2019-04-08T17:11:00+00:00</updated><author><name>jinhaochan</name></author><id>tag:None,2019-04-08:/what-is-a-cgi.html</id><summary type="html">&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Not Computer Generated Imagery, but &lt;code&gt;cgi&lt;/code&gt; pages you see when you visit webpages.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;CGI stands for Common Gateway Interface, and it acts as the Controller in the MVC framework. To give a complete picture, in a web application, the Model is the database, the View is the front-end HTML/CSS …&lt;/p&gt;</summary><content type="html">&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Not Computer Generated Imagery, but &lt;code&gt;cgi&lt;/code&gt; pages you see when you visit webpages.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;CGI stands for Common Gateway Interface, and it acts as the Controller in the MVC framework. To give a complete picture, in a web application, the Model is the database, the View is the front-end HTML/CSS, and the Controller is the logic that processes user interaction&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;The CGI program takes in input from the user via the webpage, does the processing, and outputs information back to the front-end.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:image {"id":392,"align":"center"} --&gt;

&lt;div class="wp-block-image"&gt;

&lt;figure class="aligncenter"&gt;
![](https://chanjinhao.files.wordpress.com/2019/04/cgi.gif){.wp-image-392}
&lt;/figure&gt;

&lt;/div&gt;

&lt;!-- /wp:image --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;CGI is a generic name for any program, or script that runs at the back end to process the user input. This program can be written in languages such as Python, C or C++. An example of a Python CGI is:&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;&lt;code&gt;http://www.test.com/cgi-bin/hello.py?key1=value1&amp;amp;key2=value2&lt;/code&gt;&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;Programming vs CGI Programming&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Most of us are familiar and have experience with the languages mentioned above, but there is a difference between conventional programming with those languages, and programming to conform to CGI standard.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Below shows a code snippet of CGI programming in Python:&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:code --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Content-type:text/html&lt;/span&gt;&lt;span class="se"&gt;\r\n\r\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;html&amp;gt;&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;head&amp;gt;&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;title&amp;gt;Hello Word - First CGI Program&amp;lt;/title&amp;gt;&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;/head&amp;gt;&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;body&amp;gt;&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;h2&amp;gt;Hello Word! This is my first CGI program&amp;lt;/h2&amp;gt;&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;/body&amp;gt;&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;/html&amp;gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- /wp:code --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;There are two main differences here:&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:list {"ordered":true} --&gt;

&lt;ol&gt;
&lt;li&gt;The CGI program must start with a MIME-type header.&lt;ul&gt;
&lt;li&gt;MIME, which stands for &lt;strong&gt;Multipurpose Internet Mail Extensions&lt;/strong&gt; is a HTTP header which tells the client what sort of content it's receiving.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;print "Content-type:text/html\r\n\r\n"&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The content of the output must be in HTML format, or other formats that the browser is able to display&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- /wp:list --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;CGI Environment Variables&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;When programming a CGI program, there are some environment variables that are standard across all CGI, regardless of languages used.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Some examples of these are:&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:table --&gt;

&lt;hr&gt;
&lt;p&gt;HTTP_COOKIE        The visitor's cookie, if one is set
  HTTP_HOST          The hostname of the page being attempted
  HTTP_REFERER       The URL of the page that called your program
  HTTP_USER_AGENT   The browser type of the visitor&lt;/p&gt;
&lt;hr&gt;
&lt;!-- /wp:table --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;You can see the full list of CGI environment variables by searching it online.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;CGI Vulnerabilities&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Most CGI vulnerabilities lie in the fast that the inputs from the users are not properly checked and parsed. As a result, the user can perform unintended actions on your server such as directory traversal or RCE.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;</content><category term="cgi"></category></entry><entry><title>Domain Generating Algorithm (Used by C2 Communication)</title><link href="/domain-generating-algorithm-used-by-c2-communication.html" rel="alternate"></link><published>2019-04-07T16:46:00+00:00</published><updated>2019-04-07T16:46:00+00:00</updated><author><name>jinhaochan</name></author><id>tag:None,2019-04-07:/domain-generating-algorithm-used-by-c2-communication.html</id><summary type="html">&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;C2 Communication and Disruption&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;When a machine gets infected by a malware, it can start receiving command from it's C2 server to perform unwanted activities. Examples of this are a machines infected with botnets or ransomware, where the C2 server will send commands down to the victim machine, and the …&lt;/p&gt;</summary><content type="html">&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;C2 Communication and Disruption&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;When a machine gets infected by a malware, it can start receiving command from it's C2 server to perform unwanted activities. Examples of this are a machines infected with botnets or ransomware, where the C2 server will send commands down to the victim machine, and the machines can send replies back.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;The easiest way to tackle this problem is to disrupt the communication between the C2 and the victim machine, and one of this is to either take down the C2 server, or block all traffic that is going to that specific IP address.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;How Malwares Overcome Communication Disruption&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Bad actors are well aware of this problem of having a single static IP or server for their C2, and they know that if this single IP is block or the server is taken down, their infected machines have no where to receive commands from.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;How they overcome this is by having their malware communicate with different domains instead of a single static one. This act is called &lt;strong&gt;"Domain Fluxing&lt;/strong&gt;", or &lt;strong&gt;"Fast Fluxing"&lt;/strong&gt;, where the malware communicates with different C2 servers.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;The process of generating multiple domains for their malware to connect to is called &lt;strong&gt;"Domain Generation Algorithm" (DGA)&lt;/strong&gt;.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;DGA in Action&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;DGAs automatically generate multiple domains that the malware can communicate to. These DGA's have to be random enough, so that defenders cannot predict what list of domains to block. For example, if a malware is dumb enough to change their list of domains to "badserver1", "badserver2" ... Defenders just have to block "badserver*", and that will cover all the list of C2 servers.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Dumb DGAs will also generate jibberish domains, which can be spotted easily by analyst, or smart NLP models. Domains such as "dsawkkl.com" generated randomly is obviously a malicious domain.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Smarter DGAs will pluck and piece together words that make sense, such as "Birds.com", "Elephant.com" or "Tiger.com". But this also has a downside, as its obvious that their seed for generating the names are animals. Really advanced DGAs will use and NLP text generator model, and a random seed generator to produce really legitimate looking domains that can fool both the analyst, and models.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Below is an example code to generate random domains&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:code --&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;def&lt;/span&gt; &lt;span class="nv"&gt;generate_domain&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;year&lt;/span&gt;, &lt;span class="nv"&gt;month&lt;/span&gt;, &lt;span class="nv"&gt;day&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;:
    &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;Generates a domain name for the given date.&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="nv"&gt;domain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;range&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;:
        &lt;span class="nv"&gt;year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;year&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;year&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="ss"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;year&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nv"&gt;xFFFFFFF0&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
        &lt;span class="nv"&gt;month&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;month&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;month&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;month&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nv"&gt;xFFFFFFF8&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
        &lt;span class="nv"&gt;day&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;day&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;day&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="ss"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="ss"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;day&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="nv"&gt;xFFFFFFFE&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;

    &lt;span class="nv"&gt;domain&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nv"&gt;chr&lt;/span&gt;&lt;span class="ss"&gt;(((&lt;/span&gt;&lt;span class="nv"&gt;year&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="nv"&gt;month&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt; &lt;span class="nv"&gt;day&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;97&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;!-- /wp:code --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Malwares need to communicate with C2's for commands. It's easy to block a single domain, or list of correlated domains.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Malwares therefore need sophisticated DGAs to come up with unpredictable domains for their C2 server.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;</content><category term="Domain Generation Algorithm"></category></entry><entry><title>Process Injection</title><link href="/process-injection.html" rel="alternate"></link><published>2019-04-05T14:44:00+00:00</published><updated>2019-04-05T14:44:00+00:00</updated><author><name>jinhaochan</name></author><id>tag:None,2019-04-05:/process-injection.html</id><summary type="html">&lt;!-- wp:paragraph --&gt;

&lt;p&gt;I decided to revisit some fundamental security concepts again, and one of which I used in my previous employment was Process Injection.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Process Injection is a technique of running your own code within the address space of another process. The hard part is getting your code in that address space …&lt;/p&gt;</summary><content type="html">&lt;!-- wp:paragraph --&gt;

&lt;p&gt;I decided to revisit some fundamental security concepts again, and one of which I used in my previous employment was Process Injection.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Process Injection is a technique of running your own code within the address space of another process. The hard part is getting your code in that address space, but there are numerous ways to achieve this&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;DLL Injection&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;The malware write the address pointing to its own DLL into the virtual address space of another process. The DLL is then executed by creating a remote thread within the process.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;The steps performed to achieve this are:&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:list {"ordered":true} --&gt;

&lt;ol&gt;
&lt;li&gt;Finding a process to hijack using &lt;code&gt;Process32First&lt;/code&gt; and &lt;code&gt;Process32Next&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Getting a handle of the target process with &lt;code&gt;OpenProcess&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Allocating memory and writing the path to malicious DLL using &lt;code&gt;VirtualAllocEx&lt;/code&gt; and &lt;code&gt;WriteProcessMemory&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Code execution in the process by calling &lt;code&gt;CreateRemoteThread&lt;/code&gt;, &lt;code&gt;NtCreateThreadEx&lt;/code&gt; or &lt;code&gt;RtlCreateUserThread&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- /wp:list --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;PE Injection&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Instead of passing the address of the DLL, the malware can directly copy malicious the code into the process. The code is then executed via &lt;code&gt;CreateRemoteThread&lt;/code&gt;&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;The steps performed to achieve this are:&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:list {"ordered":true} --&gt;

&lt;ol&gt;
&lt;li&gt;Finding a process to hijack using &lt;code&gt;Process32First&lt;/code&gt; and &lt;code&gt;Process32Next&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Getting a handle of the target process with &lt;code&gt;OpenProcess&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Allocating memory and writing the malicious code using &lt;code&gt;VirtualAllocEx&lt;/code&gt; and &lt;code&gt;WriteProcessMemory&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Code execution in the process by calling &lt;code&gt;CreateRemoteThread&lt;/code&gt;, &lt;code&gt;NtCreateThreadEx&lt;/code&gt; or &lt;code&gt;RtlCreateUserThread&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- /wp:list --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;The difference here is in step 3, where the code is copied, instead of the reference to the code. This method does not require dropping a DLL onto the machine.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;Process Hollowing&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Instead of injecting the address of the DLL, or copying the malicious code into the target process, malware can also overwrite the original code in the memory space of the process. This is called Process Hollowing.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;The steps performed to achieve this are:&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:list {"ordered":true} --&gt;

&lt;ol&gt;
&lt;li&gt;Create a new process in suspended mode to host the malicious code&lt;/li&gt;
&lt;li&gt;Done by calling &lt;code&gt;CreateProcess&lt;/code&gt; with the flag &lt;code&gt;CREATE_SUSPEND&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Unmap memory of target process by calling &lt;code&gt;ZwUnmapViewOfSection&lt;/code&gt; or &lt;code&gt;NtUnmapViewOfSection&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Allocate new memory for malware using &lt;code&gt;VirtualAllocEx&lt;/code&gt; and write the code using &lt;code&gt;WriteProcessMemory&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Point the entry point of the suspended process to the code in the target process using &lt;code&gt;SetThreadContext&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Resume suspended process by calling &lt;code&gt;ResumeThread&lt;/code&gt; which executes the code in the target process&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- /wp:list --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;Thread Execution Hijacking (Suspend, Inject, Resume)&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Instead of creating a new process that is suspended like Process Hollowing, Thread Execution Hijacking avoids creating a new process.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;The steps performed to achieve this are:&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:list {"ordered":true} --&gt;

&lt;ol&gt;
&lt;li&gt;Get a handle to the target process&lt;/li&gt;
&lt;li&gt;Suspend the target process by calling &lt;code&gt;SuspendThread&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Write malicious code in the target process by calling &lt;code&gt;VirtualAllocEx&lt;/code&gt; and &lt;code&gt;WriteProcessMemory&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Resume the running of the process by calling &lt;code&gt;ResumeThread&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- /wp:list --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;SIR are problematic because suspending a process mid-execution may cause the system to crash.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;Hook Injection via &lt;code&gt;SetWindowsHookEx&lt;/code&gt;&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Hooking is a technique to intercept function calls, and load their malicious DLL upon a certain event getting triggered within a specific thread.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;&lt;code&gt;SetWindowsHookEx&lt;/code&gt; is called to install a hook routine into the hook chain. One of the arguments that &lt;code&gt;SetWindowsHookEx&lt;/code&gt; takes is a &lt;code&gt;threadID&lt;/code&gt; with which this hook procedure is associated with. If this value is set to &lt;code&gt;0&lt;/code&gt;, all threads within the process perform the action when the event is triggered. To generate less noise, 1 thread is usually targeted.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Once the DLL is injected, the malware executes the malicious code on behalf of the process of the &lt;code&gt;threadID&lt;/code&gt; that was passed into the &lt;code&gt;SetWindowsHookEx&lt;/code&gt; function.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;Injection and Persistence via Registry Modification&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Malwares can insert their malicious libraries under &lt;code&gt;Appinit_Dlls&lt;/code&gt; to have other processes load their libraries. Every library under this registry key is loaded into any process that calls &lt;code&gt;User32.dll&lt;/code&gt;.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Malwares can also put their libraries under &lt;code&gt;AppCertDlls&lt;/code&gt;, which affects any process that calls Win32 API functions such as &lt;code&gt;CreateProcess&lt;/code&gt;, &lt;code&gt;CreateProcessAsUser&lt;/code&gt; and &lt;code&gt;WinExec&lt;/code&gt;  &lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Image File Execution Options (IFEO) is usually used for debugging purposes. The &lt;code&gt;Debugger Value&lt;/code&gt; under this registry key can be set to attach a program to another executable for debugging, and whenever that executable is launched, the attached program is also launched. Malwares can make use of this to attach themselves to a target executable.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;Asynchronous Procedure Calls (APC)&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Malwares can leverage on APC to force another thread to execute their malicious code by intercepting the APC queue of the target thread.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Each thread has a queue of APC which are waiting for execution upon the thread entering an alterable state.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;The steps performed to achieve this are:&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:list {"ordered":true} --&gt;

&lt;ol&gt;
&lt;li&gt;Finding a thread that is in an alterable state&lt;/li&gt;
&lt;li&gt;Call &lt;code&gt;OpenThread&lt;/code&gt; and &lt;code&gt;QueueUserAPC&lt;/code&gt; to queue an APC to the thread&lt;/li&gt;
&lt;li&gt;&lt;code&gt;QueueUserAPC&lt;/code&gt; takes in 3 arguments&lt;ul&gt;
&lt;li&gt;Handle to a target thread&lt;/li&gt;
&lt;li&gt;Pointer to the function that the malware wants to run&lt;/li&gt;
&lt;li&gt;Parameters to the function&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- /wp:list --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;Injection using Shims&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Shims are provided by Microsoft to provide backward compatibility by allowing developers to apply fixes to their program without rewriting code. Malwares can leverage on Shims to target an executable for persistence and injection.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;When Windows runs the Shim engine, it loads a binary to check shimming databases to check for appropriate fixes. Malwares can create and install their own shimming database (sdb). They can do so by calling &lt;code&gt;sdbinst.exe&lt;/code&gt; (shim database installer), and install their own malicious sdb file.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;Import Address Table (IAT) and Inline Hooking&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;IAT hooking involves modifying the Import Address Table to redirect the address of the functions there to their own malicious functions.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Inline hooking modified the API function itself, by rewriting the first few bytes of code in the function to jump to their malicious function.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;In the past, I've only worked in the Linux space when doing process injection. One of the techniques I used was modifying the IAT, and here I've learnt a lot more other techniques that are related to the Windows OS.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;</content><category term="Process Injection"></category></entry><entry><title>Web Beacon for Trip wiring documents</title><link href="/web-beacon-for-trip-wiring-documents.html" rel="alternate"></link><published>2019-03-03T14:25:00+00:00</published><updated>2019-03-03T14:25:00+00:00</updated><author><name>jinhaochan</name></author><id>tag:None,2019-03-03:/web-beacon-for-trip-wiring-documents.html</id><summary type="html">&lt;!-- wp:paragraph --&gt;

&lt;p&gt;During my course of security research work, I came across this concept of web beacons, which is a clever way of knowing who has opened up a document.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;A Web Beacon is an element inside the document, that is not a saved resource. Rather, the element sends a request out …&lt;/p&gt;</summary><content type="html">&lt;!-- wp:paragraph --&gt;

&lt;p&gt;During my course of security research work, I came across this concept of web beacons, which is a clever way of knowing who has opened up a document.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;A Web Beacon is an element inside the document, that is not a saved resource. Rather, the element sends a request out to a server to retrieve the resource. An example of this would be an image tag, that requests the image resource from a server.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;For example, writing this piece of code fetches the image resource from www.w3schools.com server:&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;&lt;code&gt;img src="https://www.w3schools.com/images/w3schools_green.jpg" alt="W3Schools.com" style="width:104px;height:142px;"&lt;/code&gt;&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:image {"align":"center"} --&gt;

&lt;div class="wp-block-image"&gt;

&lt;figure class="aligncenter"&gt;
![W3Schools.com](https://www.w3schools.com/images/w3schools_green.jpg)  
&lt;figcaption&gt;
Image retrieved from w3 schools
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;!-- /wp:image --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;It's a very simple concept, and we can make use of this functionality and twist it to be a defensive tool&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;Web Server Request Tracking&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;If we can setup our own server that hosts resources, we can secretly embed invisible images, or elements that makes requests to our servers to retrieve those resources.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;This way, when the document is opened, the tries to render itself by making a request to our server for the resource. It acts as a tripwire that immediately triggers the moment the document is opened. And as the image is is not obvious to the threat actor, he would not be aware of this callback.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;Improvements?&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;The obvious drawback to this is that, once the document is taken to an offline premise, the image can no longer make a request to our server. This means that we will not be notified when the tripwire is activated.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;The second drawback is: So what?&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;So what if I know if the document has been opened by some unauthorized person, or in another location? What can I do to prevent him from opening it? Some simple solutions that I came up with are:&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;If the requesting IP address is not in the whitelist, we return an extremely huge image, hopefully to make the document hang and not be usable.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Another improvement is, aside from image resources, what other resources can be requested, and hopefully such resources can be "executed". Of course, such a solution is considered intrusive, because then it can be used in malicious ways for remote code execution.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;</content><category term="Web Beacons"></category></entry><entry><title>Pass The Hash Attack</title><link href="/pass-the-hash-attack.html" rel="alternate"></link><published>2019-01-06T10:45:00+00:00</published><updated>2019-01-06T10:45:00+00:00</updated><author><name>jinhaochan</name></author><id>tag:None,2019-01-06:/pass-the-hash-attack.html</id><summary type="html">&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Passing the Hash attack is a way of logging on to the machine without knowing the actual password of the user. It uses the hash value for authentication, instead of the plain text passwords.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;This attack vector is possible in Windows, due to how they store the passwords in their …&lt;/p&gt;</summary><content type="html">&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Passing the Hash attack is a way of logging on to the machine without knowing the actual password of the user. It uses the hash value for authentication, instead of the plain text passwords.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;This attack vector is possible in Windows, due to how they store the passwords in their system &lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;How Windows stores your passwords in memory&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;The Local Security Authority Subsystem Service, LSASS.exe, is a process that runs in memory, and it is responsible for performing tasks such as:&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:list --&gt;

&lt;ul&gt;
&lt;li&gt;Enforcing Security Policies&lt;/li&gt;
&lt;li&gt;Handling Login Verification&lt;/li&gt;
&lt;li&gt;Performing Password Changes&lt;/li&gt;
&lt;li&gt;Generating Access Tokens&lt;/li&gt;
&lt;li&gt;Writing to Windows Security Log&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /wp:list --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;LSASS.exe is a crucial component for running Windows, and a forceful termination of LSASS.exe will result in the Welcome screen losing its accounts, requiring a restart of the machine.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;After a user logs on to the system, a variety of credentials are generated and stored in LSASS.exe, which functions as a Single-Sign-On (SSO). The SSO is to allow quick and automated user authentication for resources. These credentials includes Kerberos Tickets, NTLM Hashes, LM Hashes and clear text passwords.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;Because LSASS.exe is running in memory, it should be no surprise that all these credentials and hashes are stored in memory as well. This makes it a valuable target for attackers to steal credentials.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:quote {"className":"is-style-default"} --&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;If you discover that LSASS.exe is not in C:\Windows\System32, or that it is consuming more resources than necessary, that is a cause for concern.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- /wp:quote --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;Extracting Password Hash from Memory&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;Since the password hashes are all stored in memory, all we have to do is to find techniques to extract the information. There are already many existing ways to do this, the most famous being the tool &lt;a href="https://github.com/gentilkiwi/mimikatz/wiki"&gt;Mimikatz&lt;/a&gt; &lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;One way of doing this is to dump the LSASS.exe process from memory to disk by using tools such as ProcDump (Which is a Microsoft Signed Binary, so it won't trigger any red flags when executed).&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;After you have dumped the password hashes, there are two attack scenarios that can happen:&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:list {"ordered":true} --&gt;

&lt;ol&gt;
&lt;li&gt;Decrypt the password hashes to obtain the plaintext password&lt;ul&gt;
&lt;li&gt;The hashes are encrypted using the Windows API &lt;strong&gt;LsaProtectMemory&lt;/strong&gt;.  We can simply decrypt it by calling &lt;strong&gt;LsaUnprotectMemory&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Don't decrypt the hash, and simply pass it to the authentication mechanism (Pass the Hash Attack)&lt;ul&gt;
&lt;li&gt;Inject the hash to LSASS.exe and open session with the injected hash.&lt;/li&gt;
&lt;li&gt;Implement part of the NTLM protocol for the authentication with the hash and send commands over the network with protocols like SMB, WMI, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- /wp:list --&gt;

&lt;!-- wp:heading {"level":3} --&gt;

&lt;h3&gt;Detecting a Pass The Hash Attack using Windows Event Log&lt;/h3&gt;
&lt;!-- /wp:heading --&gt;

&lt;!-- wp:separator --&gt;

&lt;hr&gt;
&lt;!-- /wp:separator --&gt;

&lt;p&gt;&lt;/p&gt;
&lt;!-- wp:paragraph --&gt;&lt;/p&gt;
&lt;p&gt;You can detect Pass the Hash attack by reviewing your Windows Event Security Log.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;A Pass the Hash attack takes places with the NTLM authentication type, and it can be seen in the Event Log with the following features:&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;

&lt;!-- wp:list {"ordered":true} --&gt;

&lt;ol&gt;
&lt;li&gt;NTLM connection takes place&lt;/li&gt;
&lt;li&gt;Event ID 4624 (“&lt;em&gt;An account was successfully logged on&lt;/em&gt;”)&lt;/li&gt;
&lt;li&gt;Logon Type 3 &lt;em&gt;(“A user or computer logged on to this computer from the network”&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Authentication Package NTLM (or by logon process name NtLmSsp)&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- /wp:list --&gt;

&lt;!-- wp:paragraph --&gt;

&lt;p&gt;These features are indicative of an NTLM login process, but it does not mean that a Pass the Hash has taken place. Further analysis, such as user behavior, allowed logon techniques and privileges assigned can tell you more.&lt;/p&gt;
&lt;!-- /wp:paragraph --&gt;</content><category term="Pass the hash"></category><category term="Windows"></category></entry><entry><title>Setting Up Your Own IDS</title><link href="/setting-up-your-own-ids.html" rel="alternate"></link><published>2018-12-30T19:49:00+00:00</published><updated>2018-12-30T19:49:00+00:00</updated><author><name>jinhaochan</name></author><id>tag:None,2018-12-30:/setting-up-your-own-ids.html</id><summary type="html">&lt;h1&gt;Mininet Floodlight Snort&lt;/h1&gt;
&lt;p&gt;In this post, we're going to be building our own IDS setup to play around with.&lt;/p&gt;
&lt;p&gt;This setup can be used as a POC, or to just see how an IDS works. We're going to be using 3 technologies here.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Mininet, which is a program to create …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;h1&gt;Mininet Floodlight Snort&lt;/h1&gt;
&lt;p&gt;In this post, we're going to be building our own IDS setup to play around with.&lt;/p&gt;
&lt;p&gt;This setup can be used as a POC, or to just see how an IDS works. We're going to be using 3 technologies here.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Mininet, which is a program to create your own virtual network on your host.&lt;/li&gt;
&lt;li&gt;Snort, which is an IDS program&lt;/li&gt;
&lt;li&gt;Floodlight, which is an SDN controller&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;[gallery ids="110,109,108" type="rectangular" link="none"]&lt;/p&gt;
&lt;h2&gt;The Setup&lt;/h2&gt;
&lt;p&gt;We're going to setup an SDN network with 5 hosts, with host 5 sniffing traffic on host 4 using Snort.&lt;/p&gt;
&lt;p&gt;This project will have 3 malicious actors (h1, h2, h3), a victim machine (h4) and an IDS using Snort sniffer (h5)&lt;/p&gt;
&lt;p&gt;We will configure the network such that the 5 hosts are connected to the a switch, and the switch is connected to Floodlight SDN Controller. h1, h2 and h3 will attack h4 with a DoS attack, and h5 will be able to pick it up using Snort rules.&lt;/p&gt;
&lt;h2&gt;Setting up floodlight&lt;/h2&gt;
&lt;p&gt;[code lang=text]&lt;br&gt;
git://github.com/floodlight/floodlight.git&lt;br&gt;
\$ cd floodlight&lt;br&gt;
\$ git submodule init&lt;br&gt;
\$ git submodule update&lt;br&gt;
\$ ant&lt;/p&gt;
&lt;p&gt;\$ sudo mkdir /var/lib/floodlight&lt;br&gt;
\$ sudo chmod 777 /var/lib/floodlight&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;After you've configured Floodlight, run it with:&lt;br&gt;
&lt;code&gt;$ java -jar target/floodlight.jar&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Floodlight GUI will be running on http://localhost:8080/ui/pages/index.html&lt;/p&gt;
&lt;h2&gt;Setting up mininet&lt;/h2&gt;
&lt;p&gt;Clone and install:&lt;/p&gt;
&lt;p&gt;[code lang=text]&lt;br&gt;
\$ git clone git://github.com/mininet/mininet&lt;br&gt;
\$ cd mininet&lt;br&gt;
\$ sudo ./util/install.sh -a&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;Mininet is now installed.&lt;/p&gt;
&lt;p&gt;Spawn your network with the command:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ sudo mn --topo single,5 --controller=remote,ip=127.0.0.1,port=6653&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Spawns a single layer network, with 5 hosts connected to a switch.&lt;/p&gt;
&lt;p&gt;The switch is connected to a remote controller, which is the floodlight service you setup earlier.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: your port specified in this command should be &lt;code&gt;6653&lt;/code&gt; and not &lt;code&gt;8080&lt;/code&gt;. &lt;code&gt;8080&lt;/code&gt; is used for showing the UI, &lt;code&gt;6653&lt;/code&gt; is used for communicating with your switch.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If your floodlight service is running on another machine, configure the &lt;code&gt;ip&lt;/code&gt; and &lt;code&gt;port&lt;/code&gt; accordingly.&lt;/p&gt;
&lt;h2&gt;Setting up Snort (In Ubuntu)&lt;/h2&gt;
&lt;p&gt;Before installing Snort, you have to first install DAQ&lt;/p&gt;
&lt;p&gt;Updating your apt&lt;/p&gt;
&lt;p&gt;[code lang=text]&lt;br&gt;
\$ apt-get update -y&lt;br&gt;
\$ apt-get upgrade -y&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;Installing dependencies&lt;br&gt;
&lt;code&gt;$ apt-get install openssh-server ethtool build-essential libpcap-dev libpcre3-dev libdumbnet-dev bison flex zlib1g-dev liblzma-dev openssl libssl-dev&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Grabbing DAQ source (Change the value of the version to the lastest one)&lt;/p&gt;
&lt;p&gt;[code lang=text]&lt;br&gt;
\$ wget https://www.snort.org/downloads/snort/daq-2.0.6.tar.gz&lt;br&gt;
\$ tar xvf daq-2.0.6.tar.gz&lt;br&gt;
\$ cd daq-2.0.6&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;Configure and install DAQ&lt;/p&gt;
&lt;p&gt;[code lang=text]&lt;br&gt;
\$ ./configure &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;Now that you've installed DAQ, you can proceed to install Snort&lt;/p&gt;
&lt;p&gt;Grabbing Snort source (Change the value of the version to the lastest one)&lt;/p&gt;
&lt;p&gt;[code lang=text]&lt;br&gt;
\$ wget https://www.snort.org/downloads/snort/snort-2.9.8.3.tar.gz&lt;br&gt;
\$ tar vzf snort-2.9.8.3.tar.gz&lt;br&gt;
\$ cd snort-2.9.8.3&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;Configure and install Snort&lt;/p&gt;
&lt;p&gt;[code lang=text]&lt;br&gt;
\$ ./configure --enable-sourcefire &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;Link the libraries&lt;/p&gt;
&lt;p&gt;[code lang=text]&lt;br&gt;
\$ ldconfig&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;Creating a symbolic link to Snort binary&lt;/p&gt;
&lt;p&gt;[code lang=text]&lt;br&gt;
\$ ln -s /usr/local/bin/snort /usr/sbin/snort&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;Test it out!&lt;br&gt;
&lt;code&gt;$ snort -V&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;After Snort is up and running, you will need to create directory structures for it&lt;/p&gt;
&lt;p&gt;[code lang=text]&lt;br&gt;
\$ mkdir /etc/snort&lt;/p&gt;
&lt;p&gt;\$ mkdir /etc/snort/preproc_rules&lt;/p&gt;
&lt;p&gt;\$ mkdir /etc/snort/rules&lt;/p&gt;
&lt;p&gt;\$ mkdir /var/log/snort&lt;/p&gt;
&lt;p&gt;\$ mkdir /usr/local/lib/snort_dynamicrules&lt;/p&gt;
&lt;p&gt;\$ touch /etc/snort/rules/white_list.rules&lt;/p&gt;
&lt;p&gt;\$ touch /etc/snort/rules/black_list.rules&lt;/p&gt;
&lt;p&gt;\$ touch /etc/snort/rules/local.rules&lt;/p&gt;
&lt;p&gt;\$ chmod -R 5775 /etc/snort/&lt;/p&gt;
&lt;p&gt;\$ chmod -R 5775 /var/log/snort/&lt;/p&gt;
&lt;p&gt;\$ chmod -R 5775 /usr/local/lib/snort&lt;/p&gt;
&lt;p&gt;[/code]&lt;/p&gt;
&lt;h2&gt;Configuring Snort Rules&lt;/h2&gt;
&lt;p&gt;Download Snort rules here https://www.snort.org/downloads&lt;/p&gt;
&lt;p&gt;Edit your &lt;code&gt;snort.conf&lt;/code&gt; accordingly to remove any preprocessors you don't have&lt;/p&gt;
&lt;p&gt;If you're having trouble, &lt;code&gt;$ sudo find / -type f -name snort.conf&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Adding a rule in &lt;code&gt;snort.conf&lt;/code&gt; to catch DoS by ICMP packets&lt;/p&gt;
&lt;p&gt;&lt;code&gt;alert icmp any any -&amp;amp;gt; any any (threshold: type both, track by_dst, count 70, seconds 10; msg: "DoS by ICMP detected"; sid:1001;)&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Mirroring port h4 to h5 and sniff using Snort&lt;/h2&gt;
&lt;p&gt;Command to mirror h4 traffic to h5&lt;br&gt;
&lt;code&gt;mininet$ s1 ovs-vsctl -- set Bridge "s1" mirrors=@m -- --id=@s1-eth4 get Port s1-eth4 -- --id=@s1-eth5 get Port s1-eth5 -- --id=@m create Mirror name=e4toe5 select-dst-port=@s1-eth4 output-port=@s1-eth5&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now all traffic that is flowing into h4 will be mirrored onto h5, where Snort is running.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mininet$ xterm h5&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In the new terminal spawned for h5, run:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;h5$ ifconfig&lt;/code&gt; to get the adapter name&lt;/p&gt;
&lt;p&gt;&lt;code&gt;h5$ snort -i &amp;amp;lt;Adapter name&amp;amp;gt; -c &amp;amp;lt;snort.conf location&amp;amp;gt; &amp;amp;amp;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;h5 is now sniffing traffic on h4&lt;/p&gt;
&lt;h2&gt;Starting the attack&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;mininet$ h1 ping -f h4&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This launches a barrage of ICMP packets from h1 to h4, which will subsequently be detected by h5, who is sniffing h4.&lt;/p&gt;
&lt;p&gt;h5 will then write an alert which you should see in &lt;code&gt;/var/log/snort/alert&lt;/code&gt; the message &lt;code&gt;"DoS by ICMP detected"&lt;/code&gt;&lt;/p&gt;</content><category term="Mininet"></category><category term="SDN"></category><category term="Snort"></category></entry><entry><title>Software Defined Networking (SDN)</title><link href="/software-defined-networking-sdn.html" rel="alternate"></link><published>2018-12-23T10:29:00+00:00</published><updated>2018-12-23T10:29:00+00:00</updated><author><name>jinhaochan</name></author><id>tag:None,2018-12-23:/software-defined-networking-sdn.html</id><summary type="html">&lt;h1&gt;What is an SDN&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;Software Defined Networking is a way of abstracting away the control logic of networking and packet switching away from the physical switches, and passing that control to a SDN Controller.&lt;/p&gt;
&lt;p&gt;The main idea of this is to allow the control to perform decision making on what …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;What is an SDN&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;Software Defined Networking is a way of abstracting away the control logic of networking and packet switching away from the physical switches, and passing that control to a SDN Controller.&lt;/p&gt;
&lt;p&gt;The main idea of this is to allow the control to perform decision making on what to do with the packets on the switches behalf.&lt;/p&gt;
&lt;h1&gt;Components and Architecture of a SDN&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img alt="Untitled Diagram (1)" class="alignnone size-full wp-image-105" height="406" src="https://chanjinhao.files.wordpress.com/2018/11/untitled-diagram-1.png" width="686"&gt;&lt;/p&gt;
&lt;p&gt;It'll make more sense when the flow is explained bottom up, from the infrastructure layer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[Infrastructure layer (Data Plane)]{style="text-decoration:underline;"}&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is where your physical switches are. The packets from the network, be it intranet or internet, flows through these switches. Conventionally, a dedicated software will be running on each of the switches, deciding what do with the each packet that passes through them.&lt;/p&gt;
&lt;p&gt;Now, instead of the switches making the decision, the control is passed to the Control layer. This means that the switches will have to query the SDN Controller about what action to take for each packet.&lt;/p&gt;
&lt;p&gt;But it's not that dumb to query the controller for every single packet. The SDN Switch has a table which stores a set of rules as to what action to perform for which packet. Only when a packet does not match any rows on the table, does the SDN Switch query the controller.&lt;/p&gt;
&lt;p&gt;The SDN Switch gets the information from the SDN Controller via Southbound protocols, such as Openflow. (We'll cover that later)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[Control layer (Control Plane)]{style="text-decoration:underline;"}&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The SDN Controller acts as the brains of the system. You can think of it as the CPU, where it brokers requests from the hardware to the application, vice-versa.&lt;/p&gt;
&lt;p&gt;The applications are able to push their desired changes down to the controller, where the controller disseminates the changes down to the SDN Switches via Openflow.&lt;/p&gt;
&lt;p&gt;One scenario might be a change in firewall rules done on a firewall application. This change is then push down to the SDN Controller, and down to the SDN Switches.&lt;/p&gt;
&lt;p&gt;An example of an SDN Controller is &lt;a href="https://github.com/floodlight/floodlight"&gt;Floodlight &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[&lt;strong&gt;Application layer&lt;/strong&gt;]{style="text-decoration:underline;"}&lt;/p&gt;
&lt;p&gt;The application layer where all your applications sit. Before SDN, they used to sit on the physical switch itself. That made it tedious to execute updates or changes to the software on the switch when you have multiple switches.&lt;/p&gt;
&lt;p&gt;With SDN, these applications are taken out of the switch, and resides elsewhere. These applications can also be virtualized via a concept known as Network Functions Virtualization (NFV). NFV is just another way of describing virtualizing Networking Software, such as firewalls and IDS systems.&lt;/p&gt;
&lt;p&gt;North-Bound API (OpenDayLight)&lt;/p&gt;
&lt;p&gt;South-Bound API (Openflow)&lt;/p&gt;
&lt;h1&gt;Benefits of a SDN&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;In the past, your network topology was defined by your physical switches. Now that the applications have been extracted out the switches, your network topology is effectively defined by your software (hence the name Software Defined Network).&lt;/p&gt;
&lt;p&gt;This gives you more control the of switches, and the ease of configuring them.&lt;/p&gt;
&lt;p&gt;One draw back of SDN is the introduction of a single point of failure. Although it does give you more granular security by controlling each SDN Switch, the bottle neck lies in the SDN Controller.&lt;/p&gt;</content><category term="SDN"></category></entry><entry><title>How HTTPS Works</title><link href="/how-https-works.html" rel="alternate"></link><published>2018-11-18T22:36:00+00:00</published><updated>2018-11-18T22:36:00+00:00</updated><author><name>jinhaochan</name></author><id>tag:None,2018-11-18:/how-https-works.html</id><summary type="html">&lt;h2&gt;How does HTTPS work?&lt;/h2&gt;
&lt;p&gt;We all know to use a HTTPS site instead of a HTTP, because it is more secure. We roughly know that the messages sent to and fro the client and server are encrypted, so any snooping person wouldn't know the contents, but how does it all …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;How does HTTPS work?&lt;/h2&gt;
&lt;p&gt;We all know to use a HTTPS site instead of a HTTP, because it is more secure. We roughly know that the messages sent to and fro the client and server are encrypted, so any snooping person wouldn't know the contents, but how does it all work?&lt;/p&gt;
&lt;p&gt;This post is motivated by Google's announcement that it is going to label all HTTP sites as insecure. HTTP sites are those that do not implement any encryption, and all your passwords and traffic are in plain text. The question should be, why do HTTP sites even exist anymore...&lt;/p&gt;
&lt;h2&gt;The HTTP in HTTPS&lt;/h2&gt;
&lt;p&gt;HTTP traffic is how the client talks to the server. Its the language that is spoken when transferring information over the internet.&lt;/p&gt;
&lt;p&gt;Below is an example of a HTTP traffic of a &lt;code&gt;GET&lt;/code&gt; request sent to the server. It is sent when a user keys in his credentials, and clicks onto the login button.&lt;/p&gt;
&lt;p&gt;[code lang=text]&lt;br&gt;
GET /bin/login?user=dumb+user&amp;amp;pw=12345&amp;amp;action=login HTTP/1.1&lt;br&gt;
Accept: image/gif, image/jpeg, */*&lt;br&gt;
Referer: http://127.0.0.1:8000/login.html&lt;br&gt;
Accept-Language: en-us&lt;br&gt;
Accept-Encoding: gzip, deflate&lt;br&gt;
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)&lt;br&gt;
Host: 127.0.0.1:8000&lt;br&gt;
Connection: Keep-Alive&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;Because there is no encryption, all the contents are in plain text, including the username and password. By using a traffic inspection tool like WireShark, it takes little to no effort to analyze and pick out information like this.&lt;/p&gt;
&lt;h2&gt;The S in HTTPS&lt;/h2&gt;
&lt;p&gt;So we want to encrypt the traffic so that it is not in plain text, including all our passwords and contents we sent and recieve.&lt;/p&gt;
&lt;p&gt;HTTPS (HTTP Secure) is simply HTTP wrapped up in SSL/TLS.&lt;/p&gt;
&lt;p&gt;SSL is the predecessor of TLS, and both SSL 2.0 and 3.0 have been deprecated by the IETF (Internet Engineering Task Force, which is a community that develops and promotes protocols and standards pertaining to TCP/IP). As such, it is safer to disable SSL, and leave TLS and the default option for your browsers.&lt;/p&gt;
&lt;p&gt;The being said, SSL/TLS does not does the actual encryption. It is only a handshake protocol that happens between the client and the server.&lt;/p&gt;
&lt;p&gt;During the handshake, the following steps are taken:&lt;/p&gt;
&lt;p&gt;1) Hello&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The client initiates the request by sending a &lt;code&gt;ClientHello&lt;/code&gt;, which contains the information needed by the server to connect to the client via SSL, such as the cipher suites the client supports, and the SSL versions it supports.
    &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;The server then responds with a &lt;code&gt;ServerHello&lt;/code&gt;, which contains similar information, and with the decision to use which cipher suite and SSL version to use&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2) Certificate Verification&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The server now has to prove it's identity to the client, and it does so by an SSL certificate
    &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An SSL certificate is a file that contains information about the server. This includes domain name, server name or hostname, organization name, location, the server's public key and certificate validity.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The client either verifies the certificate with a CA, or implicitly trusts the certificate (Clicking on the button "Trust Anyway")&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3) Key Exchange&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Once the client trusts the server, and the cipher suites have been chosen, the client generates a symmetric key to be used for encryption and decryption.
    &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The symmetric key is then encrypted using the server's public key, an sent over to the server. (Asymmetric encryption is used to encrypt the symmetric key to be used. Encrypt-ception!)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The following messages sent and recieved by the client and the server are thus encrypted/decrypted by this symmetric key&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;HTTP sends everything in plain text. We then use SSL/TLS to encrypt the plain text traffic, to prevent people from snooping in on our information.&lt;/p&gt;
&lt;p&gt;We briefly described the processes involved in setting up the SSL/TLS connection, which includes the initiation, certificate verification, and key exchange.&lt;/p&gt;
&lt;p&gt;Happy surfing!&lt;/p&gt;</content><category term="HTTPS"></category></entry><entry><title>Kernel Module Signing</title><link href="/kernel-module-signing.html" rel="alternate"></link><published>2018-11-11T22:35:00+00:00</published><updated>2018-11-11T22:35:00+00:00</updated><author><name>jinhaochan</name></author><id>tag:None,2018-11-11:/kernel-module-signing.html</id><summary type="html">&lt;h1&gt;Linux Kernel Signing&lt;/h1&gt;
&lt;h2&gt;Kernel Tainting&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;When dealing with offensive secuirty in the Linux space, we typically concern ourselves with kernel tainting. A kernel taint occurs when an unsigned module is loaded into the Linux kernel, which may potentially be used for malicious purposes.&lt;/p&gt;
&lt;p&gt;A kernel taint does not always mean …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Linux Kernel Signing&lt;/h1&gt;
&lt;h2&gt;Kernel Tainting&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;When dealing with offensive secuirty in the Linux space, we typically concern ourselves with kernel tainting. A kernel taint occurs when an unsigned module is loaded into the Linux kernel, which may potentially be used for malicious purposes.&lt;/p&gt;
&lt;p&gt;A kernel taint does not always mean that something bad has happened to your machine, it just means that the machine's state has been unoffically modified. (Think of it as a warrantly for a device such as an Xbox. If you unoffically modify the hardware, its considered tainted, and the warranty is voided).&lt;/p&gt;
&lt;p&gt;Some actions that may cause a kernel taint are:&lt;/p&gt;
&lt;p&gt;[code lang=text]&lt;br&gt;
- The use of a proprietary (or non-GPL-compatible) kernel module—this is the most common cause of tainted kernels and usually results from loading proprietary NVIDIA or AMD video drivers&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The use of staging drivers, which are part of the kernel source code but are not fully tested&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The use of out-of-tree modules that are not included with the Linux kernel source code&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Forcible loading or unloading of a kernel module (such as forcibly inserting a module not built for the current version of the kernel)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The use of an SMP (multiprocessor) kernel on certain unsupported uniprocessor CPUs, primarily older AMD Athlon processors&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Overriding of the ACPI DSDT, sometimes needed to correct for power-management bugs (see here for details)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Certain critical error conditions, such as machine check exceptions and kernel oopses&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Certain serious bugs in the system firmware (BIOS, UEFI) which the kernel must work around&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[/code]&lt;/p&gt;
&lt;p&gt;&lt;a href="https://unix.stackexchange.com/questions/118116/what-is-a-tainted-kernel-in-linux"&gt;Source from Stackoverflow&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Each of these actions will produce a certain flag that will be useful for debugging purposes by the vendor or sys admin.&lt;/p&gt;
&lt;p&gt;When you insert a module that's unsigned, a message will be logged that says&lt;/p&gt;
&lt;p&gt;&lt;code&gt;%s module verification failed: signature and/or required key missing - tainting kernel&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This can be found in the kernel source code here: &lt;a href="https://elixir.bootlin.com/linux/latest/source/kernel/module.c#L3691"&gt;tainted message printing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In order to not taint the kernel, we must sign the module.&lt;/p&gt;
&lt;h2&gt;Kernel Module Signing&lt;/h2&gt;
&lt;hr&gt;
&lt;h4&gt;Recap on public-private keys&lt;/h4&gt;
&lt;p&gt;Before we talk about kernel module signing, lets briefly recap on public-private key encryption&lt;/p&gt;
&lt;p&gt;&lt;img alt="Public-Private key usage" src="https://i-technet.sec.s-msft.com/dynimg/IC19080.gif"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://technet.microsoft.com/en-us/library/aa998077(v=exchg.65).aspx"&gt;Source from Microsoft&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When I want to sign a module, I sign it using my private key. Anyone can use my public key to verify the signature. If another malicious software claims to be my module, the don't have my private key, and using my public key will thus result in a key mismatch.&lt;/p&gt;
&lt;p&gt;As opposed to encryption, where I use your public key to lock a message, and only you have your private key to unlock it.&lt;/p&gt;
&lt;p&gt;Signing ensures integrity, Encryption ensures confidentiality. (The last one in CIA being availability, but this is assuming the contents are always available)&lt;/p&gt;
&lt;h4&gt;Back to signing kernel modules&lt;/h4&gt;
&lt;p&gt;If you wanna read deeper, go to this post here: &lt;a href="http://cs.dartmouth.edu/~bx/blog/2015/10/02/a-history-of-linux-kernel-module-signing.html"&gt;A History of Linux Kernel Module Signing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I'll be talking about the main ideas.&lt;/p&gt;
&lt;p&gt;A general implementation of module signing is as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Developer builds module&lt;/li&gt;
&lt;li&gt;Developer hashes the module or parts of the module and signs the hash using their private key. The signature is embedded together with the module&lt;/li&gt;
&lt;li&gt;User retrieves the signed version of the module&lt;/li&gt;
&lt;li&gt;User hashes the same parts of the module that the developer hashed and checks that the hash they created matches the hash signed with the developer’s public key&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Over the years, different signing mechanism have came (and gone)&lt;/p&gt;
&lt;h4&gt;First version&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Signature&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;stored&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;ELF&lt;/span&gt; &lt;span class="n"&gt;section&lt;/span&gt; &lt;span class="n"&gt;named&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="n"&gt;module_sig&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;Only&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;sections&lt;/span&gt; &lt;span class="n"&gt;whose&lt;/span&gt; &lt;span class="k"&gt;names&lt;/span&gt; &lt;span class="n"&gt;contain&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt; &lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;but&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;are&lt;/span&gt; &lt;span class="n"&gt;hashed&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;[code lang=text]&lt;br&gt;
1 for (i = 1; i &amp;lt; hdr-&amp;gt;e_shnum; i++) {&lt;br&gt;
2 name = secstrings+sechdrs[i].sh_name;&lt;br&gt;
3&lt;br&gt;
4 /* We only care about sections with "text" or&lt;br&gt;
5 "data" in their names */&lt;br&gt;
6 if ((strstr(name, "text") == NULL) &amp;amp;&amp;amp;&lt;br&gt;
7 (strstr(name, "data") == NULL))&lt;br&gt;
8 continue;&lt;br&gt;
9 /* avoid the ".rel.*" sections too. */&lt;br&gt;
10 if (strstr(name, ".rel.") != NULL)&lt;br&gt;
11 continue;&lt;br&gt;
12 /* add contents of section to signature */&lt;br&gt;
13 ...&lt;br&gt;
14 }&lt;br&gt;
[/code]&lt;/p&gt;
&lt;h4&gt;Second version&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Performs&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;large&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;ELF&lt;/span&gt; &lt;span class="n"&gt;metadata&lt;/span&gt; &lt;span class="n"&gt;sanity&lt;/span&gt; &lt;span class="n"&gt;checks&lt;/span&gt; &lt;span class="k"&gt;before&lt;/span&gt; &lt;span class="n"&gt;validating&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;signature&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Signature&lt;/span&gt; &lt;span class="n"&gt;itself&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;stored&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;module_sig&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt; &lt;span class="n"&gt;section&lt;/span&gt; &lt;span class="n"&gt;just&lt;/span&gt; &lt;span class="k"&gt;like&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="k"&gt;first&lt;/span&gt; &lt;span class="k"&gt;version&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;data&lt;/span&gt; &lt;span class="n"&gt;section&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt; &lt;span class="k"&gt;are&lt;/span&gt; &lt;span class="n"&gt;hashed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Corresponding&lt;/span&gt; &lt;span class="n"&gt;section&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="k"&gt;are&lt;/span&gt; &lt;span class="n"&gt;hashed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Relocation&lt;/span&gt; &lt;span class="n"&gt;section&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;entries&lt;/span&gt; &lt;span class="n"&gt;along&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="k"&gt;any&lt;/span&gt; &lt;span class="n"&gt;symbols&lt;/span&gt; &lt;span class="n"&gt;they&lt;/span&gt; &lt;span class="n"&gt;reference&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt; &lt;span class="n"&gt;hashed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Third Version&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;Module&lt;/span&gt; &lt;span class="nv"&gt;signature&lt;/span&gt; &lt;span class="nv"&gt;is&lt;/span&gt; &lt;span class="nv"&gt;wrapped&lt;/span&gt; &lt;span class="nv"&gt;around&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;notes&lt;/span&gt; &lt;span class="nv"&gt;section&lt;/span&gt; `&lt;span class="nv"&gt;SHT_NOTE&lt;/span&gt;`, &lt;span class="nv"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;named&lt;/span&gt; `.&lt;span class="nv"&gt;module&lt;/span&gt;.&lt;span class="nv"&gt;sig&lt;/span&gt;`
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;Everything&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;Second&lt;/span&gt; &lt;span class="nv"&gt;version&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;empty&lt;/span&gt; &lt;span class="nv"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;allocatable&lt;/span&gt; &lt;span class="nv"&gt;sections&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Second&lt;/span&gt; &lt;span class="nv"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;first&lt;/span&gt; &lt;span class="nv"&gt;version&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nv"&gt;not&lt;/span&gt; &lt;span class="nv"&gt;hash&lt;/span&gt; &lt;span class="nv"&gt;empty&lt;/span&gt; &lt;span class="nv"&gt;and&lt;/span&gt; &lt;span class="nv"&gt;allocatable&lt;/span&gt; &lt;span class="nv"&gt;sections&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Fourth version and beyond&lt;/h4&gt;
&lt;p&gt;Lets take a deeper look into this version, as its the version thats most widely used for most kernels today.&lt;/p&gt;
&lt;p&gt;The source code for kernel version 4.17 can be found here: &lt;a href="https://elixir.bootlin.com/linux/v4.17/source/kernel/module.c#L3659"&gt;4.17 Source code&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The function in question is &lt;code&gt;load_module&lt;/code&gt;, which is called whenever you insmod a module.&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;load_module&lt;/code&gt;, we see that we call &lt;code&gt;module_sig_check&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;[code lang=text]&lt;br&gt;
/* Allocate and load the module: note that size of section 0 is always&lt;br&gt;
zero, and we rely on this for optional sections. */&lt;br&gt;
static int load_module(struct load_info *info, const char __user *uargs,&lt;br&gt;
int flags)&lt;br&gt;
{&lt;br&gt;
struct module *mod;&lt;br&gt;
long err;&lt;br&gt;
char *after_dashes;&lt;/p&gt;
&lt;p&gt;err = module_sig_check(info, flags);&lt;br&gt;
if (err)&lt;br&gt;
goto free_copy;&lt;/p&gt;
&lt;p&gt;...&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;Looking at the &lt;code&gt;module_sig_check&lt;/code&gt; code, it calls &lt;code&gt;mod_verify_signature&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;[code lang=text]&lt;br&gt;
static int module_sig_check(struct load_info *info, int flags)&lt;br&gt;
{&lt;br&gt;
int err = -ENOKEY;&lt;br&gt;
const unsigned long markerlen = sizeof(MODULE_SIG_STRING) - 1;&lt;br&gt;
const void *mod = info-&amp;gt;hdr;&lt;/p&gt;
&lt;p&gt;/*&lt;br&gt;
* Require flags == 0, as a module with version information&lt;br&gt;
* removed is no longer the module that was signed&lt;br&gt;
*/&lt;br&gt;
if (flags == 0 &amp;amp;&amp;amp;&lt;br&gt;
info-&amp;gt;len &amp;gt; markerlen &amp;amp;&amp;amp;&lt;br&gt;
memcmp(mod + info-&amp;gt;len - markerlen, MODULE_SIG_STRING, markerlen) == 0) {&lt;br&gt;
/* We truncate the module to discard the signature */&lt;br&gt;
info-&amp;gt;len -= markerlen;&lt;br&gt;
err = mod_verify_sig(mod, &amp;amp;info-&amp;gt;len);&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;if (!err) {&lt;br&gt;
info-&amp;gt;sig_ok = true;&lt;br&gt;
return 0;&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;/* Not having a signature is only an error if we're strict. */&lt;br&gt;
if (err == -ENOKEY &amp;amp;&amp;amp; !sig_enforce)&lt;br&gt;
err = 0;&lt;/p&gt;
&lt;p&gt;return err;&lt;br&gt;
}&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;Take note that &lt;code&gt;mod_verify_sig&lt;/code&gt; has to return &lt;code&gt;0&lt;/code&gt; for it to call &lt;code&gt;info-&amp;amp;gt;sig_ok = true&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Finally, we look a code snippet of &lt;code&gt;mod_verify_sig&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;[code lang=text]&lt;br&gt;
struct module_signature {&lt;br&gt;
u8 algo; /* Public-key crypto algorithm [0] */&lt;br&gt;
u8 hash; /* Digest algorithm [0] */&lt;br&gt;
u8 id_type; /* Key identifier type [PKEY_ID_PKCS7] */&lt;br&gt;
u8 signer_len; /* Length of signer's name [0] */&lt;br&gt;
u8 key_id_len; /* Length of key identifier [0] */&lt;br&gt;
u8 __pad[3];&lt;br&gt;
__be32 sig_len; /* Length of signature data */&lt;br&gt;
};&lt;/p&gt;
&lt;p&gt;/*&lt;br&gt;
* Verify the signature on a module.&lt;br&gt;
*/&lt;br&gt;
int mod_verify_sig(const void *mod, unsigned long *_modlen)&lt;br&gt;
{&lt;br&gt;
struct module_signature ms;&lt;br&gt;
size_t modlen = *_modlen, sig_len;&lt;/p&gt;
&lt;p&gt;pr_devel("==&amp;gt;%s(,%zu)\n", __func__, modlen);&lt;/p&gt;
&lt;p&gt;if (modlen &amp;lt;= sizeof(ms))&lt;br&gt;
return -EBADMSG;&lt;/p&gt;
&lt;p&gt;memcpy(&amp;amp;ms, mod + (modlen - sizeof(ms)), sizeof(ms));&lt;br&gt;
modlen -= sizeof(ms);&lt;/p&gt;
&lt;p&gt;sig_len = be32_to_cpu(ms.sig_len);&lt;br&gt;
if (sig_len &amp;gt;= modlen)&lt;br&gt;
return -EBADMSG;&lt;br&gt;
modlen -= sig_len;&lt;br&gt;
*_modlen = modlen;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;[/code]&lt;/p&gt;
&lt;p&gt;We see that at the end of the module, we have two pieces of information:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Module signature struct, which stores information about the module signature&lt;/li&gt;
&lt;li&gt;The signature itself&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Cracking it&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;I have no idea how to crack it, but if anyone finds a flaw in this and prevents kernel taint, it means that they can insert whatever malicious modules they like without tainting the kernel.&lt;/p&gt;
&lt;p&gt;Without a kernel taint, forensics and incident responders would be duped.&lt;/p&gt;</content><category term="Kernel Module"></category></entry><entry><title>Kernel Modules in Linux</title><link href="/kernel-modules-in-linux.html" rel="alternate"></link><published>2018-10-29T22:31:00+00:00</published><updated>2018-10-29T22:31:00+00:00</updated><author><name>jinhaochan</name></author><id>tag:None,2018-10-29:/kernel-modules-in-linux.html</id><summary type="html">&lt;p&gt;The Linux kernel is an open source operating system, as compared to propitiatory ones like Windows, or MacOS.&lt;/p&gt;
&lt;p&gt;The entire source code of the Linux kernel can be found here: &lt;a href="https://elixir.bootlin.com/linux/latest/source"&gt;Source Code&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;TLDR of a Linux kernel is that it's made up of many different modules.&lt;/p&gt;
&lt;p&gt;The bare Linux kernel …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The Linux kernel is an open source operating system, as compared to propitiatory ones like Windows, or MacOS.&lt;/p&gt;
&lt;p&gt;The entire source code of the Linux kernel can be found here: &lt;a href="https://elixir.bootlin.com/linux/latest/source"&gt;Source Code&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;TLDR of a Linux kernel is that it's made up of many different modules.&lt;/p&gt;
&lt;p&gt;The bare Linux kernel without any modules is amazingly small (Arch Linux, which is notorious for coming with minimal packages installed, has a base size of only 800MB. Compare that to your Windows OS, which requires 20GB)&lt;/p&gt;
&lt;p&gt;Linux kernel modules are (relatively) small pieces of code that can be inserted and unloaded from the kernel.&lt;/p&gt;
&lt;p&gt;This makes the kernel very configurable and open for customization, because anyone can write a kernel module and insert it into the kernel, giving it new custom functions and commands.&lt;/p&gt;
&lt;p&gt;Kernel modules can be loaded by calling &lt;code&gt;insmod&lt;/code&gt; and removed by calling &lt;code&gt;rmmod&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Note the distinction between kernel modules and kernel drivers. A kernel driver is a subset of a kernel module, and the driver is a piece of code that talks to some hardware (Sound speaker driver, USB driver etc). A kernel module is a generic description of any code that can be inserted into the kernel.&lt;/p&gt;
&lt;p&gt;In this post, I'm going to give a crash course for writing and compiling a kernel module.&lt;/p&gt;
&lt;p&gt;There are two components for writing a kernel module:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The C file, which consists of the source code of the kernel module&lt;/li&gt;
&lt;li&gt;The Makefile, which specifies a number of parameters when building your module, including; which compiler to use, where to get the libraries from and what kind of object to produce&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Lets talk about the C file first&lt;/p&gt;
&lt;h2&gt;C file&lt;/h2&gt;
&lt;p&gt;Below is a sample code of a C file that compiles to a kernel module&lt;/p&gt;
&lt;p&gt;[code lang=text]&lt;br&gt;
// Required&lt;br&gt;
#include &amp;lt;linux/init.h&amp;gt;&lt;br&gt;
#include &amp;lt;linux/module.h&amp;gt;&lt;br&gt;
#include &amp;lt;linux/kernel.h&amp;gt;&lt;/p&gt;
&lt;p&gt;// Optional&lt;br&gt;
MODULE_LICENSE("GPL");&lt;/p&gt;
&lt;p&gt;// Optional&lt;br&gt;
int myint = 3;&lt;br&gt;
module_param(myint, int, 0);&lt;br&gt;
MODULE_PARM_DESC(myint, "Value of my integer");&lt;/p&gt;
&lt;p&gt;// Required&lt;br&gt;
static int __init mymodule_init(void){&lt;br&gt;
printk(KERN_INFO "Init module. Number is %d!\n", int);&lt;br&gt;
return 0;&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;// Required&lt;br&gt;
static void __exit mymodule_exit(void){&lt;br&gt;
printk(KERN_INFO "Exit module. Number is %d\n", int);&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;// Required&lt;br&gt;
module_init(mymodule_init);&lt;br&gt;
module_exit(mymodule_exit);&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;I've put some tags in the code to denote if those are optional or not. Lets go through each of them:&lt;/p&gt;
&lt;p&gt;[code lang=text]&lt;br&gt;
// Required&lt;br&gt;
#include &amp;lt;linux/init.h&amp;gt;&lt;br&gt;
#include &amp;lt;linux/module.h&amp;gt;&lt;br&gt;
#include &amp;lt;linux/kernel.h&amp;gt;&lt;/p&gt;
&lt;p&gt;//Optional&lt;br&gt;
#include &amp;lt;linux/moduleparam.h&amp;gt;&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;These are required for building any kernel module files. For a program as simple as this, these 3 headers are the bare minimum.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;#include&lt;/code&gt; is only included if your module accepts parameters&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;[code lang=text]&lt;br&gt;
// Optional&lt;br&gt;
MODULE_LICENSE("GPL");&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;If you want to do things the "right" and proper way, this should be required, but you can compile the kernel module without it.&lt;/p&gt;
&lt;p&gt;However, there are some kernel functions that require this licensed to be defined, before you can call them. (&lt;code&gt;kallsyms&lt;/code&gt; is one of them)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;[code lang=text]&lt;br&gt;
// Optional&lt;br&gt;
int myint = 3;&lt;br&gt;
module_param(myint, int, 0);&lt;br&gt;
MODULE_PARM_DESC(myint, "Value of my integer");&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;This code block here is for receiving inputs from the user during &lt;code&gt;insmod&lt;/code&gt;. If no inputs are specified, the default value becomes 3.&lt;/p&gt;
&lt;p&gt;An example would be &lt;code&gt;insmod  myint=5&lt;/code&gt;, which will then set the value of &lt;code&gt;myint&lt;/code&gt; to 5&lt;/p&gt;
&lt;p&gt;The last value of &lt;code&gt;module_param(myint, int, 0);&lt;/code&gt; describes the permissions of the file created under &lt;code&gt;/sys/module/p2/parameters/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MODULE_PARM_DESC(myint, "Value of my integer");&lt;/code&gt; just describes the parameter&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;[code lang=text]&lt;br&gt;
// Required&lt;br&gt;
static int __init mymodule_init(void){&lt;br&gt;
printk(KERN_INFO "Init module. Number is %d!\n", int);&lt;br&gt;
return 0;&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;// Required&lt;br&gt;
static void __exit mymodule_exit(void){&lt;br&gt;
printk(KERN_INFO "Exit module. Number is %d\n", int);&lt;br&gt;
}&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;These two code blocks are absolutely required in a kernel module.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;__init&lt;/code&gt; tells the module what to do on &lt;code&gt;insmod&lt;/code&gt;, and &lt;code&gt;__exit&lt;/code&gt; tells tells it what to do on &lt;code&gt;rmmod&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Notice that &lt;code&gt;__init&lt;/code&gt; returns an integer, while &lt;code&gt;__exit&lt;/code&gt; returns a void.&lt;/p&gt;
&lt;p&gt;The integer returned by &lt;code&gt;__init&lt;/code&gt; tells us if &lt;code&gt;insmod&lt;/code&gt; has been successful or not.&lt;/p&gt;
&lt;p&gt;From the code inside, when you run &lt;code&gt;insmod&lt;/code&gt;, you will print a message in &lt;code&gt;dmesg&lt;/code&gt; that says &lt;code&gt;"Init module. Number is %d&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And when you &lt;code&gt;rmmod&lt;/code&gt; the module, it will print &lt;code&gt;Exit module. Number is %d&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;[code lang=text]&lt;br&gt;
// Required&lt;br&gt;
module_init(mymodule_init);&lt;br&gt;
module_exit(mymodule_exit);&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;Finally, these are required as well.&lt;br&gt;
It overrides &lt;code&gt;module_init&lt;/code&gt; and &lt;code&gt;module_exit&lt;/code&gt; functions with your &lt;code&gt;mymodule_init&lt;/code&gt; and &lt;code&gt;mymodule_exit&lt;/code&gt; modules&lt;/p&gt;
&lt;h2&gt;Makefile&lt;/h2&gt;
&lt;p&gt;Once you're done with the C program, we can move on to the Makefile.&lt;/p&gt;
&lt;p&gt;The make file for this toy program is extreme simple, but once you move on to larger, more complicated kernel modules, your Makefile will similary blow up in size&lt;/p&gt;
&lt;p&gt;[code lang=text]&lt;br&gt;
obj-m+=mymodule.o&lt;/p&gt;
&lt;p&gt;all:&lt;br&gt;
make -C /lib/modules/\$(shell uname -r)/build/ M=\$(PWD) modules&lt;br&gt;
clean:&lt;br&gt;
make -C /lib/modules/\$(shell uname -r)/build/ M=\$(PWD) clean&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;The whole contents of a make file are very arcane, and you can read up the full list here: &lt;a href="http://www.cs.colby.edu/maxwell/courses/tutorials/maketutor/"&gt;A Simple Makefile Tutorial&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I'll just go through things which are essential&lt;/p&gt;
&lt;p&gt;[code lang=text]&lt;br&gt;
obj-m+=mymodule.o&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;This tells the make file what object name to output. Take note that the name &lt;code&gt;mymodule.o&lt;/code&gt; should have exactly the same name as your C file.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;[code lang=text]&lt;br&gt;
all:&lt;br&gt;
make -C /lib/modules/\$(shell uname -r)/build/ M=\$(PWD) modules&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;This specifies where to get your libraries from when making your project.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;-C&lt;/code&gt; flag tells it to change directory to the folder containing the libraries. In this case, it is your kernel source code, since it's a kernel module you're building&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;M&lt;/code&gt; variable (not flag) tells the make file where your original source code is, so it can grab the libraries specified in &lt;code&gt;-C&lt;/code&gt;, and build the files specified in &lt;code&gt;M=&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When you type the command &lt;code&gt;make&lt;/code&gt;, by default, you are calling &lt;code&gt;make all&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;[code lang=text]&lt;br&gt;
clean:&lt;br&gt;
make -C /lib/modules/\$(shell uname -r)/build/ M=\$(PWD) clean&lt;br&gt;
[/code]&lt;/p&gt;
&lt;p&gt;The clean command cleans up your working directory, by deleting all object files, and intermediate files.&lt;/p&gt;
&lt;p&gt;Essentially, this reverts everything back to only having your C source code file.&lt;/p&gt;
&lt;p&gt;To invoke the clean command, run &lt;code&gt;make clean&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;That's it&lt;/h1&gt;
&lt;p&gt;This is an extremely dumbed down, tldr version of how to write a kernel module.&lt;/p&gt;
&lt;p&gt;It's way more complex than this, but hopefully it'll serve as a stepping stone to start out!&lt;/p&gt;</content></entry></feed>