<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress.com" created="2019-09-27 14:36"-->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>Code of The Day</title>
	<link>http://chanjinhao.com</link>
	<description></description>
	<pubDate>Fri, 27 Sep 2019 14:36:50 +0000</pubDate>
	<language></language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://wordpress.com/</wp:base_site_url>
	<wp:base_blog_url>http://chanjinhao.com</wp:base_blog_url>

	<wp:author><wp:author_id>60281671</wp:author_id><wp:author_login><![CDATA[jinhaochan]]></wp:author_login><wp:author_email><![CDATA[jinhao_@hotmail.com]]></wp:author_email><wp:author_display_name><![CDATA[Chan Jin Hao]]></wp:author_display_name><wp:author_first_name><![CDATA[Chan]]></wp:author_first_name><wp:author_last_name><![CDATA[Jin Hao]]></wp:author_last_name></wp:author>

	<wp:category><wp:term_id>7215</wp:term_id><wp:category_nicename>book-review</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Book Review]]></wp:cat_name>
</wp:category>
	<wp:category><wp:term_id>2426</wp:term_id><wp:category_nicename>c</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[C#]]></wp:cat_name>
</wp:category>
	<wp:category><wp:term_id>112614</wp:term_id><wp:category_nicename>c2</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[C2]]></wp:cat_name>
</wp:category>
	<wp:category><wp:term_id>21818323</wp:term_id><wp:category_nicename>data-science</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Data Science]]></wp:cat_name>
</wp:category>
	<wp:category><wp:term_id>1816</wp:term_id><wp:category_nicename>hacking</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Hacking]]></wp:cat_name>
</wp:category>
	<wp:category><wp:term_id>610</wp:term_id><wp:category_nicename>linux</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Linux]]></wp:cat_name>
</wp:category>
	<wp:category><wp:term_id>7426</wp:term_id><wp:category_nicename>networking</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Networking]]></wp:cat_name>
</wp:category>
	<wp:category><wp:term_id>832</wp:term_id><wp:category_nicename>python</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Python]]></wp:cat_name>
</wp:category>
	<wp:category><wp:term_id>801</wp:term_id><wp:category_nicename>security</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Security]]></wp:cat_name>
</wp:category>
	<wp:category><wp:term_id>1</wp:term_id><wp:category_nicename>uncategorized</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name>
</wp:category>
	<wp:tag><wp:term_id>72058391</wp:term_id><wp:tag_slug>activation-functions</wp:tag_slug><wp:tag_name><![CDATA[Activation Functions]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>498173576</wp:term_id><wp:tag_slug>adversarial-validation</wp:tag_slug><wp:tag_name><![CDATA[Adversarial Validation]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>3919217</wp:term_id><wp:tag_slug>aslr</wp:tag_slug><wp:tag_name><![CDATA[ASLR]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>2128715</wp:term_id><wp:tag_slug>async</wp:tag_slug><wp:tag_name><![CDATA[Async]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1539217</wp:term_id><wp:tag_slug>await</wp:tag_slug><wp:tag_name><![CDATA[Await]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>2075170</wp:term_id><wp:tag_slug>big-data</wp:tag_slug><wp:tag_name><![CDATA[Big Data]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>60424</wp:term_id><wp:tag_slug>bioinformatics</wp:tag_slug><wp:tag_name><![CDATA[Bioinformatics]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>7215</wp:term_id><wp:tag_slug>book-review</wp:tag_slug><wp:tag_name><![CDATA[Book Review]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>2426</wp:term_id><wp:tag_slug>c</wp:tag_slug><wp:tag_name><![CDATA[C#]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>112614</wp:term_id><wp:tag_slug>c2</wp:tag_slug><wp:tag_name><![CDATA[C2]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>219993</wp:term_id><wp:tag_slug>capacity</wp:tag_slug><wp:tag_name><![CDATA[Capacity]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>19808</wp:term_id><wp:tag_slug>cgi</wp:tag_slug><wp:tag_name><![CDATA[cgi]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>644379051</wp:term_id><wp:tag_slug>codexercise</wp:tag_slug><wp:tag_name><![CDATA[codexercise]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1971068</wp:term_id><wp:tag_slug>command-and-control</wp:tag_slug><wp:tag_name><![CDATA[Command and Control]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>9873322</wp:term_id><wp:tag_slug>count-feature</wp:tag_slug><wp:tag_name><![CDATA[Count Feature]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>76917337</wp:term_id><wp:tag_slug>coursera</wp:tag_slug><wp:tag_name><![CDATA[Coursera]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>709199</wp:term_id><wp:tag_slug>csrf</wp:tag_slug><wp:tag_name><![CDATA[CSRF]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>120123151</wp:term_id><wp:tag_slug>cyber-kill-chain</wp:tag_slug><wp:tag_name><![CDATA[Cyber kill chain]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>679074769</wp:term_id><wp:tag_slug>data-exfiltartion</wp:tag_slug><wp:tag_name><![CDATA[data exfiltartion]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>60224957</wp:term_id><wp:tag_slug>data-exfiltration</wp:tag_slug><wp:tag_name><![CDATA[data exfiltration]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1875776</wp:term_id><wp:tag_slug>decision-tree</wp:tag_slug><wp:tag_name><![CDATA[Decision Tree]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>17846</wp:term_id><wp:tag_slug>dns</wp:tag_slug><wp:tag_name><![CDATA[DNS]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>213223</wp:term_id><wp:tag_slug>dnssec</wp:tag_slug><wp:tag_name><![CDATA[DNSSEC]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>508153664</wp:term_id><wp:tag_slug>domain-fronting</wp:tag_slug><wp:tag_name><![CDATA[Domain Fronting]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>146736798</wp:term_id><wp:tag_slug>domain-generation-algorithm</wp:tag_slug><wp:tag_name><![CDATA[Domain Generation Algorithm]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>669152</wp:term_id><wp:tag_slug>drop-out</wp:tag_slug><wp:tag_name><![CDATA[drop out]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>675336033</wp:term_id><wp:tag_slug>exploding-gradients</wp:tag_slug><wp:tag_name><![CDATA[Exploding Gradients]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>17698846</wp:term_id><wp:tag_slug>feature-engineering</wp:tag_slug><wp:tag_name><![CDATA[Feature Engineering]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>6421838</wp:term_id><wp:tag_slug>gradient-descent</wp:tag_slug><wp:tag_name><![CDATA[Gradient Descent]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>164265</wp:term_id><wp:tag_slug>https</wp:tag_slug><wp:tag_name><![CDATA[HTTPS]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1621756</wp:term_id><wp:tag_slug>icmp</wp:tag_slug><wp:tag_name><![CDATA[ICMP]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>5610719</wp:term_id><wp:tag_slug>k-means-clustering</wp:tag_slug><wp:tag_name><![CDATA[K means clustering]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>14675858</wp:term_id><wp:tag_slug>kaggle</wp:tag_slug><wp:tag_name><![CDATA[Kaggle]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>311958</wp:term_id><wp:tag_slug>kernel-module</wp:tag_slug><wp:tag_name><![CDATA[Kernel Module]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>610</wp:term_id><wp:tag_slug>linux</wp:tag_slug><wp:tag_name><![CDATA[Linux]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>5183432</wp:term_id><wp:tag_slug>lstm</wp:tag_slug><wp:tag_name><![CDATA[LSTM]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>40978</wp:term_id><wp:tag_slug>machine-learning</wp:tag_slug><wp:tag_name><![CDATA[Machine learning]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>86833954</wp:term_id><wp:tag_slug>mininet</wp:tag_slug><wp:tag_name><![CDATA[Mininet]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>432182</wp:term_id><wp:tag_slug>mitre</wp:tag_slug><wp:tag_name><![CDATA[MITRE]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>432386</wp:term_id><wp:tag_slug>optimizers</wp:tag_slug><wp:tag_name><![CDATA[Optimizers]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>6510748</wp:term_id><wp:tag_slug>overfitting</wp:tag_slug><wp:tag_name><![CDATA[Overfitting]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>8086584</wp:term_id><wp:tag_slug>pass-the-hash</wp:tag_slug><wp:tag_name><![CDATA[Pass the hash]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>157155029</wp:term_id><wp:tag_slug>process-injection</wp:tag_slug><wp:tag_name><![CDATA[Process Injection]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>9628</wp:term_id><wp:tag_slug>proxy</wp:tag_slug><wp:tag_name><![CDATA[Proxy]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>832</wp:term_id><wp:tag_slug>python</wp:tag_slug><wp:tag_name><![CDATA[Python]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>5858755</wp:term_id><wp:tag_slug>random-forest</wp:tag_slug><wp:tag_name><![CDATA[Random Forest]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>15228</wp:term_id><wp:tag_slug>readings</wp:tag_slug><wp:tag_name><![CDATA[Readings]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1336144</wp:term_id><wp:tag_slug>regularization</wp:tag_slug><wp:tag_name><![CDATA[regularization]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1719112</wp:term_id><wp:tag_slug>rnn</wp:tag_slug><wp:tag_name><![CDATA[RNN]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>271299</wp:term_id><wp:tag_slug>sdn</wp:tag_slug><wp:tag_name><![CDATA[SDN]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>26976787</wp:term_id><wp:tag_slug>secure-boot</wp:tag_slug><wp:tag_name><![CDATA[Secure Boot]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>191775</wp:term_id><wp:tag_slug>smap</wp:tag_slug><wp:tag_name><![CDATA[SMAP]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>9550283</wp:term_id><wp:tag_slug>smep</wp:tag_slug><wp:tag_name><![CDATA[SMEP]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>2006795</wp:term_id><wp:tag_slug>sni</wp:tag_slug><wp:tag_name><![CDATA[SNI]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>58396</wp:term_id><wp:tag_slug>snort</wp:tag_slug><wp:tag_name><![CDATA[Snort]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1669124</wp:term_id><wp:tag_slug>text-processing</wp:tag_slug><wp:tag_name><![CDATA[Text processing]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1936528</wp:term_id><wp:tag_slug>the-culture-code</wp:tag_slug><wp:tag_name><![CDATA[The Culture Code]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>4207734</wp:term_id><wp:tag_slug>uefi</wp:tag_slug><wp:tag_name><![CDATA[UEFI]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>261685</wp:term_id><wp:tag_slug>upnp</wp:tag_slug><wp:tag_name><![CDATA[UPnP]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>593370546</wp:term_id><wp:tag_slug>vanishing-gradients</wp:tag_slug><wp:tag_name><![CDATA[Vanishing Gradients]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>9426213</wp:term_id><wp:tag_slug>vc-dimension</wp:tag_slug><wp:tag_name><![CDATA[VC Dimension]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>5586905</wp:term_id><wp:tag_slug>web-beacons</wp:tag_slug><wp:tag_name><![CDATA[Web Beacons]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>800</wp:term_id><wp:tag_slug>windows</wp:tag_slug><wp:tag_name><![CDATA[Windows]]></wp:tag_name>
</wp:tag>
	<wp:term><wp:term_id>644379068</wp:term_id><wp:term_taxonomy>nav_menu</wp:term_taxonomy><wp:term_slug><![CDATA[primary]]></wp:term_slug><wp:term_name><![CDATA[Primary]]></wp:term_name>
</wp:term>

	<generator>http://wordpress.com/</generator>

<image>
	<url>https://chanjinhao.files.wordpress.com/2019/04/cropped-800px-motorola_6800_assembly_language.png?w=32</url>
	<title>Code of The Day</title>
	<link>http://chanjinhao.com</link>
	<width>32</width>
	<height>32</height>
</image> 
	
	<item>
		<title>Contact</title>
		<link>http://chanjinhao.com/contact/</link>
		<pubDate>Tue, 10 Jul 2018 09:52:46 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">https://chanjinhao.wordpress.com/?page_id=2</guid>
		<description></description>
		<content:encoded><![CDATA[[contact-form][contact-field label="Name" type="name" required="1"/][contact-field label="Email" type="email" required="1"/][contact-field label="Comment" type="textarea" required="1"/][/contact-form]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2</wp:post_id>
		<wp:post_date>2018-07-10 09:52:46</wp:post_date>
		<wp:post_date_gmt>2018-07-10 09:52:46</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>contact</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;i:0;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>switch_like_status</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;i:0;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_g_feedback_shortcode_d19880efda6c951cf284409705cf9fd7503e0938</wp:meta_key>
			<wp:meta_value><![CDATA[[contact-field label="Name" type="name" required="1"/][contact-field label="Email" type="email" required="1"/][contact-field label="Comment" type="textarea" required="1"/]]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_g_feedback_shortcode_atts_d19880efda6c951cf284409705cf9fd7503e0938</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:2:"to";s:19:"jinhao_@hotmail.com";s:7:"subject";s:25:"[Code of The Day] Contact";s:12:"show_subject";s:2:"no";s:6:"widget";i:0;s:2:"id";i:2;s:18:"submit_button_text";s:6:"Submit";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Printing Subsets in a List</title>
		<link>http://chanjinhao.com/2018/07/10/the-journey-begins/</link>
		<pubDate>Tue, 10 Jul 2018 09:52:45 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">https://chanjinhao.wordpress.com/?p=3</guid>
		<description></description>
		<content:encoded><![CDATA[<b><u> Problem Statement </u></b>

Given a list of distinct items (or a set), print out all of its subset lists.

Input:

<code> [1, 2, 3, 4] </code>

Output:

<code>:empty set:
1
1,2
1,3
1,4
1,2,3
1,2,4
1,3,4
1,2,3,4
2
2,3
2,4
2,3,4
3
3,4
4</code>

<b><u> Proposed Solution </u></b>

For each given list, I would need to figure out how many set of subsets there are. In this case, the total number of subsets for a given list is <code>2^n</code>, where <code>n</code> is the total number of items in the list.

The reason it is <code>2^n</code> is because: For each item in the list, you have 2 possible choices to take; Append an item to it, or don't. And since you have <code>n</code> items, you have a total of <code>2^n</code> choices.

After figuring out how many total subsets there are, that can be the terminating condition in a recursive solution, something like

<pre>
<code>
if len(answer) == int(math.pow(2,len(myList))):
        return answer
</code>
</pre>

In each step of the code, we need to clone the list into two to model them as the two potential choices; adding an item, or not adding an item. We add an item to each element in one list (adding an item), and preserve the original list (not adding an item), and join the two results together

Example:

<code>Given List = [1, 2]

Step 1: Add 1

Initial set = {} (models choice of adding)
Cloned set = {} (models choice of not adding)

Resulting set that adds: {1}
Resulting set that does not add: {}

Result = {},{1}

Step 2: Add 2

Initial set = {},{1} (models choice of adding)
Cloned set = {},{1} (models choice of not adding)

Resulting set that adds: {2}, {1,2}
Resulting set that does not add: {}, {1}

Result = {}, {1}, {2}, {1,2}</code>

We can see that taking the union of sets that add, and sets that do not add will give us the total subsets. The above is the pseudocode for the main body of code for our solution. Given that we have an idea of what the terminating condition will be like, we can model this as a recursive solution.

In each recursion, we should

1. Check if total number of items in the set is = <code>2^(length of list)</code>
2. Clone the given set
3. Add the item to one of the set
4. Take the union of the original set and the modified set
5. Go back to step 1

Translated to python3,

<pre>
<code>
def printPattern(givenList, result, totalSubsets):
        if len(result) == totalSubsets:
                return result

        # models not adding
        clonedResult = copy.deepcopy(result)

        itemToAdd = givenList[0]

        # omititng the item we just added in the next recursion
        newList = givenList[1:]

        # adding an item to each item in the list
        for item in result:
                item.append(itemToAdd)

        # taking the union of both the results
        result += clonedResult

        return printPattern(newList, result, totalSubsets)
</code>
</pre>

Read here to understand why I used deepcopy: <a href="https://stackoverflow.com/questions/2612802/how-to-clone-or-copy-a-list" target="_blank">How to clone or copy a list?</a>

That's it!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3</wp:post_id>
		<wp:post_date>2018-07-10 09:52:45</wp:post_date>
		<wp:post_date_gmt>2018-07-10 09:52:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-journey-begins</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="codexercise"><![CDATA[codexercise]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;i:0;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>switch_like_status</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;i:0;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[19858652687]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Core Design Principles</title>
		<link>http://chanjinhao.com/2018/07/12/core-design-principles/</link>
		<pubDate>Thu, 12 Jul 2018 09:08:59 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">https://chanjinhao.wordpress.com/?p=20</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="https://www.youtube.com/watch?v=llGgO74uXMI">Core Design Principles for Software Developers by Venkat Subramaniam</a>

Devoxx is a conference directed towards the Java, Android and HTML5 community.

Some points that are language agnostic, and can be applied universally are summarized below:
<ol>
	<li><strong>Good code can be changed without much hassle.</strong></li>
	<li>It is always impossible to get it right the first time.</li>
	<li>Be unemotional in coding.</li>
	<li>People who are dangerous to work with (So you shouldn't become them): People who can't follow instructions, and people who only follow instructions.</li>
	<li><strong>Take time to review code. (You can learn, and you can improve the design)</strong></li>
	<li>Simplicity is hard. Strive to achieve that.</li>
	<li>Simple keeps you focused (Imperative vs Declarative)</li>
	<li>Write code to solve real problems. (Don't code without knowing what it should do)</li>
	<li>Complexity (Inherent vs Accidental). Inherent Complexity comes from the problem. Accidental Complexity comes from the solution.</li>
	<li>Simple != Familiar (just because you know what it does, doesn't mean its simple)</li>
	<li><strong>Good Design is one that hides Inherent complexity, and eliminates Accidental Complexity</strong></li>
	<li><strong>YAGNIy (You Aren't Going To Need It (yet)) Don't implement things that you don't need yet. Do the important things first.</strong></li>
	<li>Cost of implementing now &gt; Cost of implementing later = Postpone</li>
	<li>Cost of implementing now = Cost of implementing later = Postpone</li>
	<li>Cost of implementing now &lt; Cost of implementing later = Do it now</li>
	<li><strong>Have a Good Automated Testing. This prevents fear of postponing</strong></li>
	<li>Cohesion is a code that does one thing and one thing only. This makes it easier for change.</li>
	<li>Similar code stays together. Dissimilar code stays away</li>
	<li>Coupling is what you depend on. Try to see if you can remove coupling. (You can't remove all dependencies, so make them loose)</li>
	<li>Knock out before you Mock out</li>
	<li><strong>Good Design has High Cohesion and Low Coupling</strong></li>
	<li>DRY (Don't repeat yourself) (Don't duplicate code, and effort)</li>
	<li>Every piece of knowledge in a system should have a single unambiguous authoritative representation</li>
	<li>CPD (Copy Paste Detector to find duplicated code)</li>
	<li>Don't write overly long functions and methods</li>
	<li>How long is a long method? SLAP (Single Level of Abstraction Principle)</li>
	<li><strong>SLAP: What was the level of abstraction of your function</strong></li>
	<li><strong>Don't comment what, comment why</strong></li>
	<li>Open Closed Principle: A software module should be open for extension, but close for modification</li>
	<li>Use DRY and YAGNI often</li>
</ol>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>20</wp:post_id>
		<wp:post_date>2018-07-12 09:08:59</wp:post_date>
		<wp:post_date_gmt>2018-07-12 09:08:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>core-design-principles</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1531386542]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[19927601605]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>How Netflix Thinks of DevOps</title>
		<link>http://chanjinhao.com/2018/07/13/how-netflix-thinks-of-devops/</link>
		<pubDate>Fri, 13 Jul 2018 07:02:09 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">https://chanjinhao.wordpress.com/?p=22</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="https://www.youtube.com/watch?v=UTKIT6STSVM" target="_blank" rel="noopener">Link to the video of how Netflix thinks about DevOps(Hint: They don't)</a>

<a href="https://netflix.github.io/" target="_blank" rel="noopener">Netflix Github Page</a>

Instead, what they do focus on is a lot about culture, which is really be what every company should be focusing on. In this era, for better or for worse, we as humans have become more "Me"-centric. How we actualize the vision of ourselves, and how much the company supports that actualization is an important factor influencing the decision of choosing where to work.

I digress. Below are the summary points of the video of what Netflix does. It's entirely non-DevOps related, and entirely cultural.
<ol>
	<li>Don't build systems that say NO to developers and engineers.
<ul>
	<li>In some companies, there's the concept of a "Need-To-Know-Basis", both on data access, and system access. There is absolutely no reason to do so, after all, we all have the same vision the company has (If not, why are you even there?). By denying access to both data and systems, you're essentially telling your engineers: "This is not your problem. You have no business to be looking at this. Focus only on what you're hired to do".</li>
	<li>In addition to breaking engineering serendipity and spontaneity, you're inducing a lot of overhead for policy crafting, determining who has access to what, and enforcing those rules.</li>
</ul>
</li>
	<li>Freedom and Responsibility
<ul>
	<li>Hire smart people, and get out of their way. Let them do what they were hired to do, and trust that they would do it. The engineers should have the freedom to choose and architect solutions they see best. The company should not restrain the engineer in the worst way possible; restrain their engineering choices.</li>
</ul>
</li>
	<li>Trading [X] for Innovation
<ul>
	<li>Where [X] is your core business concern. For Netflix, it was uptime of their services, and trading off some concerns for uptime to invest in innovation was one of their strategies. Think about what [X] is in your company, and instead of obsessing over the optimization of [X], ensure that an equal (if not more) effort is spent in innovation.</li>
	<li>The by-product of innovation also optimizes [X], and should not be seen as an activity to do "only if you have free time". That should be the main job you're doing: Innovation.</li>
</ul>
</li>
	<li>Cut down on Processes and Procedures (P&amp;P)
<ul>
	<li>These "safety guardrails" do nothing but induce more administrative overhead. The opposite of introducing P&amp;Ps is to cultivate more trust. Trust that your employees are doing the correct and right thing, instead of making them document everything and request permission.</li>
	<li>Having trust implicitly means delegating authority to them, and that means no P&amp;Ps to request unnecessary permission.</li>
</ul>
</li>
	<li>Context
<ul>
	<li>Make sure the people you are working with have a quality and constant flow of context of the business, and business decisions. Being too caught up in your technical mumbo-jumbo and into the rabbit hole can lead you to lose sight of the bigger picture. Context of the business, and exactly why you are doing what you're doing should be constantly reinforced.</li>
</ul>
</li>
	<li>Required Standard
<ul>
	<li>Not "No required coding standards.", but rather no required tech stack requirements. Don't enforce tools to use, don't enforce tech stack to use. Instead, enable your engineers to choose what they want.</li>
</ul>
</li>
	<li>Silos/Walls/Fences Should be torn down
<ul>
	<li>As if this isn't obvious enough. Know your internal dependencies and consumers. Know exactly what is it they do and want, and know exactly what is expected of you. Knowing what each team does reduces the need for guessing, and cuts the cost of wrong anticipation.</li>
</ul>
</li>
	<li>Guesses/Instinct/Tradition
<ul>
	<li>Don't rely on instinct. Back it up with quantitative data. Don't fall victim to tradition. Always challenge for a better alternative.</li>
</ul>
</li>
	<li>Finally, Culture
<ul>
	<li>Know what culture you have. The 8 points above are an example of what culture is. To give an example of a counter-culture:
<ul>
	<li>I build tightly controlled systems, and only allow relevant engineers to access the system.</li>
	<li>I tell the engineers exactly what to do, and rob them from their freedom.</li>
	<li>I forsake innovation, and focus only on KPIs.</li>
	<li>I introduce numerous P&amp;Ps, because I don't trust my engineers to do the right thing.</li>
	<li>I don't focus on the Why enough, and only how the How and What</li>
	<li>I restrict my engineers to use a predefined tech stack, because change is bad, and we only support such technology.</li>
	<li>I silo my teams, and everything internal to one team is a "Need-To-Know" basis to another team</li>
	<li>It has always been done this why, so don't ask why. If it ain't broke, don't fix it.</li>
</ul>
</li>
	<li>Make your comapny culture well-known, and when you ask every engineer what the culture is, they should be able to tell it to you right away. If you have differing cultures, and groups of people optimizing for different things, you'll end up with a lot of problems. Internal cohesion falls apart, and different groups will work towards different goals. This will tear the company from inside out. Pass on brilliant people if they do not fit into your culture.</li>
</ul>
</li>
</ol>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>22</wp:post_id>
		<wp:post_date>2018-07-13 07:02:09</wp:post_date>
		<wp:post_date_gmt>2018-07-13 07:02:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>how-netflix-thinks-of-devops</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1531465332]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[19959224684]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Bioinformatics</title>
		<link>http://chanjinhao.com/2018/07/18/bioinformatics/</link>
		<pubDate>Wed, 18 Jul 2018 16:03:02 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">https://chanjinhao.wordpress.com/?p=24</guid>
		<description></description>
		<content:encoded><![CDATA[I've been doing this Coursera Specialization called Bioinformatics <a href="https://www.coursera.org/specializations/bioinformatics">(Link to course page)</a>

The course shows us how to apply computational solutions to non-computational, but highly complex problems. The complexity of Bioinformatics comes from the huge amount of data (huge meaning billions), and how different permutations and combinations of those data points produce vastly difference outcomes.

The data points in question are called <b>Nucleotides,  </b>which form the basis of <strong>DNA</strong>. (<a href="https://www.youtube.com/watch?v=zwibgNGe4aY">Check out the videos here for a quick crash course in DNA and stuff</a>). A lot of the problems are solved using Pattern-Finding algorithms, with a huge emphasis on Big-O and optimization over time. Given a huge collection of Nucleotides, we want to find patterns in them to tell us interesting stories. An example would be trying to find a pattern within the DNA that translates to producing the protein that regulates your sleep cycle.

Some of the Computer Science concepts used in the course include Graph Theory (Euler Cycles, Paths, DeBruijn) and Matrix Manipulations (Laplace Rule of Succession). Aside from those, there are other complex solutions that are specific to Bioinformatics (Motif Finding, Profile Generation, Mass Spectrum Consistency).

The choice of language I chose to was Python<strong>3</strong> (emphasis on 3) mainly due to flexibility and familiarity. I believe my life would have been much easier if I adopted data science packages such as Numpy and Pandas for large data manipulations.

The coding problems were fun, and extremely challenging, which was what I was looking for. I've been building Web applications, Java applications, Kernel modules and a little bit of Mobile Programming, all of which had very similar applications: Building an end-product for consumers. Bioinformatics on the other hand, showed me a whole new set of problems which required me to take a very different thought approach.

It showed me that Python can not only be used for scripting to automate mundane tasks, or build a web framework like Django. Instead, it can also be used to find mutations in your DNA, or how to sequence antibiotics, which is all pretty darn cool.

I've completed the first course: <strong>Finding Hidden Messages in DNA (Bioinformatics I)</strong>, and i'm finishing up with the second course: <strong>Genome Sequencing (Bioinformatics II)</strong>. There are 7 courses in total, but I don't think i'll be doing all of them. Those two courses alone were enough to satisfy my curiosity in finding out other uses of Python.

My codes that I wrote are on my Github page here: <a href="https://github.com/Charmanderander/bioinfo">Bioinformatics</a>

I must admit, its not very clean or optimized code, but only because I did it in one iteration. In actual practice, code is meant to be destroyed and rewritten, because the first iteration gives you the idea, and the subsequent ones optimizes over it.

I get lazy sometimes :)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>24</wp:post_id>
		<wp:post_date>2018-07-18 16:03:02</wp:post_date>
		<wp:post_date_gmt>2018-07-18 16:03:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>bioinformatics</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="bioinformatics"><![CDATA[Bioinformatics]]></category>
		<category domain="post_tag" nicename="coursera"><![CDATA[Coursera]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1531929784]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[20143472156]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>About</title>
		<link>http://chanjinhao.com/about/</link>
		<pubDate>Mon, 29 Oct 2018 13:57:13 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">https://chanjinhao.wordpress.com/?page_id=31</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>I plan to learn a new skill each year, and this year, i'll be focusing on Data Science and Machine learning</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Over here, you'll find me writing about stuff I found interesting and over the course of learning about Machine Learning</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you want to read my non-technical ramblings, here over to my other blog here, although it isn't as updated as this blog: <a href="https://jayhayche.wordpress.com/">https://jayhayche.wordpress.com/</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Feel free to leave a comment, or challenge my ideas and assumptions in any of my posts. I deeply appreciate any feedback from you.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I hope you find the content equally interesting, and hopefully helpful too!</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>31</wp:post_id>
		<wp:post_date>2018-10-29 13:57:13</wp:post_date>
		<wp:post_date_gmt>2018-10-29 13:57:13</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>about</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_customize_changeset_uuid</wp:meta_key>
			<wp:meta_value><![CDATA[621d9a2b-00b0-4b81-953a-e3aab315032a]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Kernel Modules in Linux</title>
		<link>http://chanjinhao.com/2018/10/29/kernel-modules-in-linux/</link>
		<pubDate>Mon, 29 Oct 2018 14:31:41 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?p=39</guid>
		<description></description>
		<content:encoded><![CDATA[The Linux kernel is an open source operating system, as compared to propitiatory ones like Windows, or MacOS.

The entire source code of the Linux kernel can be found here: <a href="https://elixir.bootlin.com/linux/latest/source">Source Code</a>.

TLDR of a Linux kernel is that it's made up of many different modules.

The bare Linux kernel without any modules is amazingly small (Arch Linux, which is notorious for coming with minimal packages installed, has a base size of only 800MB. Compare that to your Windows OS, which requires 20GB)

Linux kernel modules are (relatively) small pieces of code that can be inserted and unloaded from the kernel.

This makes the kernel very configurable and open for customization, because anyone can write a kernel module and insert it into the kernel, giving it new custom functions and commands.

Kernel modules can be loaded by calling <code>insmod</code> and removed by calling <code>rmmod</code>

Note the distinction between kernel modules and kernel drivers. A kernel driver is a subset of a kernel module, and the driver is a piece of code that talks to some hardware (Sound speaker driver, USB driver etc). A kernel module is a generic description of any code that can be inserted into the kernel.

In this post, I'm going to give a crash course for writing and compiling a kernel module.

There are two components for writing a kernel module:

<ol>
<li>The C file, which consists of the source code of the kernel module</li>
<li>The Makefile, which specifies a number of parameters when building your module, including; which compiler to use, where to get the libraries from and what kind of object to produce</li>
</ol>

Lets talk about the C file first

<h2>C file</h2>

Below is a sample code of a C file that compiles to a kernel module

[code lang=text]
// Required
#include &lt;linux/init.h&gt;
#include &lt;linux/module.h&gt;
#include &lt;linux/kernel.h&gt;

// Optional
MODULE_LICENSE(&quot;GPL&quot;);

// Optional
int myint = 3;
module_param(myint, int, 0);
MODULE_PARM_DESC(myint, &quot;Value of my integer&quot;);

// Required
static int __init mymodule_init(void){
printk(KERN_INFO &quot;Init module. Number is %d!\n&quot;, int);
return 0;
}

// Required
static void __exit mymodule_exit(void){
printk(KERN_INFO &quot;Exit module. Number is %d\n&quot;, int);
}

// Required
module_init(mymodule_init);
module_exit(mymodule_exit);
[/code]

I've put some tags in the code to denote if those are optional or not. Lets go through each of them:

[code lang=text]
// Required
#include &lt;linux/init.h&gt;
#include &lt;linux/module.h&gt;
#include &lt;linux/kernel.h&gt;

//Optional
 #include &lt;linux/moduleparam.h&gt;
[/code]

These are required for building any kernel module files. For a program as simple as this, these 3 headers are the bare minimum.

<code>#include</code> is only included if your module accepts parameters

<hr />

[code lang=text]
// Optional
MODULE_LICENSE(&quot;GPL&quot;);
[/code]

If you want to do things the "right" and proper way, this should be required, but you can compile the kernel module without it.

However, there are some kernel functions that require this licensed to be defined, before you can call them. (<code>kallsyms</code> is one of them)

<hr />

[code lang=text]
// Optional
int myint = 3;
module_param(myint, int, 0);
MODULE_PARM_DESC(myint, &quot;Value of my integer&quot;);
[/code]

This code block here is for receiving inputs from the user during <code>insmod</code>. If no inputs are specified, the default value becomes 3.

An example would be <code>insmod  myint=5</code>, which will then set the value of <code>myint</code> to 5

The last value of <code>module_param(myint, int, 0);</code> describes the permissions of the file created under <code>/sys/module/p2/parameters/</code>

<code>MODULE_PARM_DESC(myint, "Value of my integer");</code> just describes the parameter

<hr />

[code lang=text]
// Required
static int __init mymodule_init(void){
printk(KERN_INFO &quot;Init module. Number is %d!\n&quot;, int);
return 0;
}

// Required
static void __exit mymodule_exit(void){
printk(KERN_INFO &quot;Exit module. Number is %d\n&quot;, int);
}
[/code]

These two code blocks are absolutely required in a kernel module.

<code>__init</code> tells the module what to do on <code>insmod</code>, and <code>__exit</code> tells tells it what to do on <code>rmmod</code>

Notice that <code>__init</code> returns an integer, while <code>__exit</code> returns a void.

The integer returned by <code>__init</code> tells us if <code>insmod</code> has been successful or not.

From the code inside, when you run <code>insmod</code>, you will print a message in <code>dmesg</code> that says <code>"Init module. Number is %d</code>

And when you <code>rmmod</code> the module, it will print <code>Exit module. Number is %d</code>

<hr />

[code lang=text]
// Required
module_init(mymodule_init);
module_exit(mymodule_exit);
[/code]

Finally, these are required as well.
It overrides <code>module_init</code> and <code>module_exit</code> functions with your <code>mymodule_init</code> and <code>mymodule_exit</code> modules

<h2>Makefile</h2>

Once you're done with the C program, we can move on to the Makefile.

The make file for this toy program is extreme simple, but once you move on to larger, more complicated kernel modules, your Makefile will similary blow up in size

[code lang=text]
obj-m+=mymodule.o

all:
 make -C /lib/modules/$(shell uname -r)/build/ M=$(PWD) modules
clean:
 make -C /lib/modules/$(shell uname -r)/build/ M=$(PWD) clean
[/code]

The whole contents of a make file are very arcane, and you can read up the full list here: <a href="http://www.cs.colby.edu/maxwell/courses/tutorials/maketutor/">A Simple Makefile Tutorial</a>

I'll just go through things which are essential

[code lang=text]
obj-m+=mymodule.o
[/code]

This tells the make file what object name to output. Take note that the name <code>mymodule.o</code> should have exactly the same name as your C file.

<hr />

[code lang=text]
all:
 make -C /lib/modules/$(shell uname -r)/build/ M=$(PWD) modules
[/code]

This specifies where to get your libraries from when making your project.

The <code>-C</code> flag tells it to change directory to the folder containing the libraries. In this case, it is your kernel source code, since it's a kernel module you're building

The <code>M</code> variable (not flag) tells the make file where your original source code is, so it can grab the libraries specified in <code>-C</code>, and build the files specified in <code>M=</code>.

When you type the command <code>make</code>, by default, you are calling <code>make all</code>

<hr />

[code lang=text]
clean:
 make -C /lib/modules/$(shell uname -r)/build/ M=$(PWD) clean
[/code]

The clean command cleans up your working directory, by deleting all object files, and intermediate files.

Essentially, this reverts everything back to only having your C source code file.

To invoke the clean command, run <code>make clean</code>

<h1>That's it</h1>

This is an extremely dumbed down, tldr version of how to write a kernel module.

It's way more complex than this, but hopefully it'll serve as a stepping stone to start out!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>39</wp:post_id>
		<wp:post_date>2018-10-29 22:31:41</wp:post_date>
		<wp:post_date_gmt>2018-10-29 14:31:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>kernel-modules-in-linux</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[23705566469]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[60281671]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>geo_public</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1540823509]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Python Tips and Tricks</title>
		<link>http://chanjinhao.com/2018/11/04/python-tips-and-tricks/</link>
		<pubDate>Sun, 04 Nov 2018 14:32:53 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?p=43</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Summary of Python tips, tricks, and to-dos</h2>

These pointers are what I picked up from the book <code>Python Tricks: The Book</code>

The book itself is a summary, and here i'll be doing a summary of a summary.

Python is great because of its flexibility, but that itself could potentially be a double edged sword. It can  be so easy to abuse and write really messy code, yet the program still runs fine.

Lets talk about the points made in the book. I only picked out points that I feel that are useful and that I have very little exposure to. Don't get me wrong, all the points in the book are great, just some greater than others.

<h2>Assertions</h2>

If the asserted condition returns true, nothing happens.
If the asserted condition returns false, <code>AssertionError</code> exception is raised.

[code lang=text]
def price_after_discount(0ld_price, discount):
    new_price = 0ld_price * discount
    assert 0 &lt;= new_price &lt;= old_price
[/code]

This block of code applies a discount the an item. We assert that the new price is greater than zero, and not more than the old price.

Assert is different from a regular exception in that it's meant for unrecoverable errors. Recoverable errors are things like <code>File not found</code>, where you can fix it (by putting the file where it should be) and try to run the program again. Asserts are meant for internal sanity checking.

Don't use Assert for data validation, because it can be optimized away.

[code lang=text]
def delete_product(prod_id, user):
    assert user.is_admin() 
    assert store.has_product(prod_id) &#039;Unknown product&#039;
    store.get_product(prod_id).delete()
[/code]

When you optimize away asserts, we remove checking if the user is admin, or if the store has the product.

<h2>Context Managers</h2>

When you do OO in python and you create classes to use, you can set context managers that dictate what happens when you enter and exit the code.

This is done by defining <code>__enter__</code> and <code>__exit__</code> functions

[code lang=text]
class ManagedFile:
    def __init__(self, name):
        self.name = name

    def __enter__(self):
        self.file = open(self.name, &#039;w&#039;)
        return self.file

    def __exit__(self, exc_type, exc_val, exc_tb):
        if self.file:
            self.file.close()

[/code]

<code>__enter__</code> is called when the execution enters the context of the statement, and <code>__exit__</code> is called when it leaves the context.

<h2>Underscores and Dunders</h2>

On naming the variables in python, each name has a different meaning:

<ol>
<li>SingleLeadingUnderscore: <code>_var</code>

Purely conventional, this tells the reader that the variable is only meant for use internal to the function.</p></li>
<li><p>SingleTrailingUnderscore: <code>var_</code>

Purely conventional, putting an underscore at the back prevents naming conflicts with Python's keywords</p></li>
<li><p>DoubleLeadingUnderscore: <code>__var</code>

When double underscores are infront, Python name-mangles the variable, and puts the class name in front of it.

[code lang=text]
class Test: def __init__(self):
   self.foo = 11
   self._bar = 23
   self.__baz = 42
[/code]

When you look at the attributes of object <code>Test</code>, we see that <code>__baz</code> has become <code>_Test__baz</code>

[code lang=text]
&gt;&gt;&gt; t = Test()
&gt;&gt;&gt; dir(t)
[&#039;_Test__baz&#039;, &#039;__class__&#039;, &#039;__delattr__&#039; ... ]
[/code]

This is done to protect the variable from being overridden in subclasses that extends from the parent class</p></li>
<li><p>DoubleLeadingandTrailingUnderscore: <code>__var__</code>

Leading and trailing underscores are left untouched by Python. They are reserved for special usage in Python, such as <code>__init__</code> and <code>__call__</code></p></li>
<li><p>SingleUnderscore: <code>_</code>

Meant to represent a variable that is temporary and insignificant

[code lang=text]
for _ in range(5):
   print(&quot;Hello World)
[/code]

<code>_</code> also represents the last value of the Python interpreter session</p></li>
</ol>

<h2>String Formatting</h2>

<p>Old method: <code>"Hello, %s" % name</code>

New method: <code>"Hello, {}".format(name)</code>

The new method is more powerful, because the order in <code>format</code> doesn't matter

<code>'Hey {name}, there is a 0x{errno:x} error!'.format(errno=errno, name=name)</code>

<h2>Python Functions</h2>

Python's functions are first class objects.

What this means is that they can be assigned to variables, stored in data structures, and passed as arguements

[code lang=text]
&gt;&gt;&gt; funcs = [bark, str.lower, str.capitalize]
&gt;&gt;&gt; funcs 
[&lt;function yell at 0x10ff96510&gt;, &lt;method &#039;lower&#039; of &#039;str&#039; objects&gt;, &lt;method &#039;capitalize&#039; of &#039;str&#039; objects&gt;]
[/code]

<h2>Lambdas</h2>

Lambdas declare small anonymous functions. It's a declarative way of programming

[code lang=text]
&gt;&gt;&gt; add = lambda x, y: x + y
&gt;&gt;&gt; add(5, 3)
8
[/code]

The syntax: <code>lambda x, y</code> are the inputs. <code>x + y</code> is the action to carry out and return.

A more complete example:

[code lang=text]
&gt;&gt;&gt; tuples = [(1, &#039;d&#039;), (2, &#039;b&#039;), (4, &#039;a&#039;), (3, &#039;c&#039;)]
&gt;&gt;&gt; sorted(tuples, key=lambda x: x[1])
[(4, &#039;a&#039;), (2, &#039;b&#039;), (3, &#039;c&#039;), (1, &#039;d&#039;)]
[/code]

The tuple is passed into the lambda function, and it returns the second element, which is assigned to key. The output is then sorted according to the second value.

<h2>Decorators</h2>

Decorators let you modify the behavior of the callee, without modifying the callee's code itself.

Some common use case for decorators are:

<ol>
<li>Logging</li>
<li>User authentication</li>
</ol>

[code lang=text]
def uppercase(func):
    def wrapper():
        original_result = func()
        modified_result = original_result.upper()
        return modified_result
    return wrapper

@uppercase
def greet():
    return &#039;Hello!&#039;

&gt;&gt;&gt; greet()
&#039;HELLO!&#039;
[/code]

When we put the decorator on <code>greet()</code>, we are passing the function to our decorator function.

The output is then gotten from the decorator

Decorators are done bottom to top

[code lang=text]
@strong
@emphasis
def greet():
   return &#039;Hello!
[/code]

<code>emphasis</code> is executed first, before <code>strong</code>

Decorators can also accept arguments by using <code>args</code> and <code>kwargs</code>. The arguments are gotten from the original function, and passed to the decorators.

[code lang=text]
def proxy(func):
    def wrapper(*args, **kwargs):
        return func(*args, **kwargs)
    return wrapper
[/code]

<h2>*args and **kwargs</h2>

<code>*args</code> and <code>**kwargs</code> are optional arguments to a function.

[code lang=text]
def foo(required, *args, **kwargs):
    print(required)
    if args:
        print(args)
    if kwargs:
        print(kwargs)

&gt;&gt;&gt; foo() TypeError:
&quot;foo() missing 1 required positional arg: &#039;required&#039;&quot;

&gt;&gt;&gt; foo(&#039;hello&#039;)
hello

&gt;&gt;&gt; foo(&#039;hello&#039;, 1, 2, 3)
hello (1, 2, 3)

&gt;&gt;&gt; foo(&#039;hello&#039;, 1, 2, 3, key1=&#039;value&#039;, key2=999)
hello (1, 2, 3) {&#039;key1&#039;: &#039;value&#039;, &#039;key2&#039;: 999}
[/code]

<code>*args</code> collects extra positional arguments
<code>**kwargs</code> collects extra keywords as a dictionary

<h2>Writing your own exception class</h2>

[code lang=text]
class NameTooShortError(ValueError):
    pass

def validate(name):
    if len(name) &lt; 10::
        raise NameTooShortError(name)
[/code]

<h2>References, Shallow Copying and Deep Copying</h2>

<h4>References</h4>

[code lang=text]
new_list = original_list
new_dict = original_dict
new_set = original_set
[/code]

This just creates references, and any modifications done to <code>original_</code> will also modify <code>new_</code>

[code lang=text]
&gt;&gt;&gt; xs 
[[1, 2, 3], [4, 5, 6], [7, 8, 9]]
&gt;&gt;&gt; ys 
[[1, 2, 3], [4, 5, 6], [7, 8, 9]]

&gt;&gt;&gt; xs.append(&quot;Hello&quot;)

&gt;&gt;&gt; xs 
[[1, 2, 3], [4, 5, 6], [7, 8, 9], &quot;Hello&quot;]
&gt;&gt;&gt; ys 
[[1, 2, 3], [4, 5, 6], [7, 8, 9], &quot;Hello&quot;]
[/code]

<h4>Shallow Copying</h4>

[code lang=text]
new_list = list(original_list)
new_dict = dict(original_dict)
new_set = set(original_set)
[/code]

This makes a new list, but the children objects in the list are not copied.

[code lang=text]
&gt;&gt;&gt; xs 
[[1, 2, 3], [4, 5, 6], [7, 8, 9]]
&gt;&gt;&gt; ys 
[[1, 2, 3], [4, 5, 6], [7, 8, 9]]

&gt;&gt;&gt; xs.append(&quot;Hello&quot;)

&gt;&gt;&gt; xs 
[[1, 2, 3], [4, 5, 6], [7, 8, 9], &quot;Hello&quot;]
&gt;&gt;&gt; ys 
[[1, 2, 3], [4, 5, 6], [7, 8, 9]]

&gt;&gt;&gt; xs[1][0] = &quot;X&quot;

&gt;&gt;&gt; xs 
[[1, 2, 3], [&#039;X&#039;, 5, 6], [7, 8, 9], &quot;Hello&quot;]
&gt;&gt;&gt; ys 
[[1, 2, 3], [&#039;X&#039;, 5, 6], [7, 8, 9]]

[/code]

<h4>Deep Copying</h4>

[code lang=text]
new_list = copy.deepcopy(original_list)
new_dict = copy.deepcopy(original_dict)
new_set = copy.deepcopy(original_set)
[/code]

This creates an entirely new instance, and copies all the children too.

[code lang=text]
&gt;&gt;&gt; xs 
[[1, 2, 3], [4, 5, 6], [7, 8, 9]]
&gt;&gt;&gt; ys 
[[1, 2, 3], [4, 5, 6], [7, 8, 9]]

&gt;&gt;&gt; xs.append(&quot;Hello&quot;)

&gt;&gt;&gt; xs 
[[1, 2, 3], [4, 5, 6], [7, 8, 9], &quot;Hello&quot;]
&gt;&gt;&gt; ys 
[[1, 2, 3], [4, 5, 6], [7, 8, 9]]

&gt;&gt;&gt; xs[1][0] = &quot;X&quot;

&gt;&gt;&gt; xs 
[[1, 2, 3], [&#039;X&#039;, 5, 6], [7, 8, 9], &quot;Hello&quot;]
&gt;&gt;&gt; ys 
[[1, 2, 3], [4, 5, 6], [7, 8, 9]]

[/code]

<h2>Generators</h2>

Generators generate values JIT (Just In Time). This is opposed to making a list, and iterating through it.

[code lang=text]
genexpr = (&#039;Hello&#039; for i in range(3))

&gt;&gt;&gt; next(genexpr) 
&#039;Hello&#039; 

&gt;&gt;&gt; next(genexpr) 
&#039;Hello&#039; 

&gt;&gt;&gt; next(genexpr) 
&#039;Hello&#039; 

&gt;&gt;&gt; next(genexpr) 
StopIteration
[/code]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>43</wp:post_id>
		<wp:post_date>2018-11-04 22:32:53</wp:post_date>
		<wp:post_date_gmt>2018-11-04 14:32:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>python-tips-and-tricks</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="python"><![CDATA[Python]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[23912964707]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[60281671]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>geo_public</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1541350429]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://chanjinhao.com/2018/10/30/61/</link>
		<pubDate>Tue, 30 Oct 2018 14:31:44 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">https://chanjinhao.wordpress.com/2018/10/30/61/</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>61</wp:post_id>
		<wp:post_date>2018-10-30 22:31:44</wp:post_date>
		<wp:post_date_gmt>2018-10-30 14:31:44</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>61</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="primary"><![CDATA[Primary]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[post_type]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[31]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[page]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Side Projects</title>
		<link>http://chanjinhao.com/portfolio/fullstack-website/</link>
		<pubDate>Tue, 30 Oct 2018 14:38:46 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/portfolio/fullstack-website/</guid>
		<description></description>
		<content:encoded><![CDATA[When I'm not busy at work churning out ideas and code, I'll be dabbling around with other technologies.

My goals whenever I try out a new technology, is to not only learn how it works, but to be proficient enough to create a simple product.

Here are some of the things I've made!

<span style="text-decoration:underline;"><strong>Full Stack Web Application</strong></span>

This web app was made for fun as a joke between friends.

The stack I used was Django, Bootstrap, and Postgres. It is hosted on Heroku.

It allows users to login via Facebook, and write posts to suggest challenges to my friends

<a href="https://stormy-caverns-87920.herokuapp.com/" target="_blank" rel="noopener">https://stormy-caverns-87920.herokuapp.com/</a>

<strong><span style="text-decoration:underline;">Android Mobile Game</span></strong>

I decided to dabble around with writing a mobile application, and came up with a simple game, where players had to tap either Left or Right, depending on the instruction shown on the screen.

I successfully published it on the App Store, and it currently has a 4 Star Review (By 2 people. It's mean to be a joke). However, it is currently unavailable on the App store, as there was some settings that need to be changed, and I decided it wasn't worth the effort.

If anyone wants me to republish it, let me know!

<a href="https://github.com/Charmanderander/Tapper" target="_blank" rel="noopener">https://github.com/Charmanderander/Tapper</a>

<strong><span style="text-decoration:underline;">Telegram Bot for Guitar Chords</span></strong>

Do you play the guitar? Ever wanted chords to a song now, but feeling too lazy to browse your mobile phone to search for chords, and even if you find a link, it's poorly optimized for the mobile screen, resulting in you not being able to see the entire chords in one line?

If so, use this bot!

When you send it a name, it searches and crawls <a href="https://www.ultimate-guitar.com/" target="_blank" rel="noopener">https://www.ultimate-guitar.com/</a> for the song, and returns you the chords in a readable format!

The bot is currently not running, because I can't find a more permanent place to host it other than my Raspberry Pi.

<a href="https://github.com/Charmanderander/telegramBot" target="_blank" rel="noopener">https://github.com/Charmanderander/telegramBot</a>

<strong><span style="text-decoration:underline;">Automated LumberJack Game on Telegram</span></strong>

Playing around with C#, I built a Windows executable program to automatically play the LumberJack game on Telegram.

It uses a basic form of image recognition to find the play zone, and send commands based on the current position of the Lumber Jack

<a href="https://github.com/Charmanderander/LumberHack" target="_blank" rel="noopener">https://github.com/Charmanderander/LumberHack</a>

&nbsp;

... More to come!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>64</wp:post_id>
		<wp:post_date>2018-10-30 22:38:46</wp:post_date>
		<wp:post_date_gmt>2018-10-30 14:38:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>fullstack-website</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>jetpack-portfolio</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[23742159610]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Fullstack Website</title>
		<link>http://chanjinhao.com/?post_type=jetpack-portfolio&#038;p=65</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?post_type=jetpack-portfolio&#038;p=65</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>65</wp:post_id>
		<wp:post_date>2018-10-30 22:38:52</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>jetpack-portfolio</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[60281671]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://chanjinhao.com/2018/10/30/70/</link>
		<pubDate>Tue, 30 Oct 2018 14:55:41 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">https://chanjinhao.wordpress.com/2018/10/30/70/</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>70</wp:post_id>
		<wp:post_date>2018-10-30 22:55:41</wp:post_date>
		<wp:post_date_gmt>2018-10-30 14:55:41</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>70</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>2</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="primary"><![CDATA[Primary]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[post_type]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[64]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[jetpack-portfolio]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Kaggle Data Science</title>
		<link>http://chanjinhao.com/datascience/</link>
		<pubDate>Wed, 31 Oct 2018 14:11:53 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?page_id=95</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>I'm branching out my learning into Data Science, mostly from Kaggle.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You'll find my Kaggle kernels here.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Predicting Taxi Fare</h2>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p><a href="https://www.kaggle.com/c/new-york-city-taxi-fare-prediction">https://www.kaggle.com/c/new-york-city-taxi-fare-prediction</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Notebook: <a href="https://github.com/jinhaochan/TaxiFare/blob/master/Taxi%20Fares.ipynb">https://github.com/jinhaochan/TaxiFare/blob/master/Taxi%20Fares.ipynb</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>RMSE: 3.88522 </strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Model: XGBoost</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In this problem, I was supposed to predict taxi fares in NYC. It can be modeled as a regression problem.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There was a lot of data cleaning to do, with many odd numbered features such as passenger size, and coordinates on the water.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Without the airport features, my model has an RMSE of 4.14398. After adding in those features, it drastically dropped to&nbsp;3.88522. Those are some really strong features!</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Movie Sentiment Analysis</h2>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p><a href="https://www.kaggle.com/c/movie-review-sentiment-analysis-kernels-only">https://www.kaggle.com/c/movie-review-sentiment-analysis-kernels-only</a><a href="https://www.kaggle.com/earthshaker/lstm-cnn-glove-bidirectional-gru-aggregation"></a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Notebook: <a href="https://github.com/Charmanderander/SentimentAnalysis/blob/master/sentanalysis.ipynb">https://github.com/jinhaochan/SentimentAnalysis/blob/master/sentanalysis.ipynb</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Accuracy: 0.65095</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Model: Ensemble by Voting</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In this problem, we were given a collection of phrases, which were broken down from sentences. Instead of predicting the sentiment for each sentence, we had to predict the sentiment for each phrase.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The pre-processing steps I did were</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Lower casing</li><li>Removing non alphabets</li><li>Lemmatization</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>The final output for each phrase was then chosen by voting from all the models.</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>LSTM</li><li>CNN</li><li>Glove Transfer-Learning with Bidirectional GRU</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Interestingly enough, Glove + CNN performs poorer than just CNN. This may be because the word vectors trained in Glove were in a different context (i.e. not Movie Sentiment Analysis)</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Predicting Future Sales</h2>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p><a href="https://www.kaggle.com/c/competitive-data-science-predict-future-sales">https://www.kaggle.com/c/competitive-data-science-predict-future-sales</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Notebook: <a href="https://github.com/Charmanderander/salesforcast/blob/master/saleforecast.ipynb">https://github.com/jinhaochan/salesforcast/blob/master/saleforecast.ipynb</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>RMSE:  1.16462 </strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Model: LSTM + GRU</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In this competition, we had to predict what the next month's sale was for each item for each shop.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The data given to us was daily sales for each item, so we had to do some data aggregation to convert it to a monthly sales value.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We were given 33 months of training data, so I modeled it to a time series problem.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For training, months 0 - 32 was the training data, and month 33 was the target value.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For testing, months 1 - 33 was the testing data, and we need to predict the values for month 34.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The model I used was a 2 layer GRU using a dropout layer of 0.3<br></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>95</wp:post_id>
		<wp:post_date>2018-10-31 22:11:53</wp:post_date>
		<wp:post_date_gmt>2018-10-31 14:11:53</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>datascience</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_c4251e35f734331a0a8fbec91ff6b2a9</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_d857e0963c9816393bf79bf3a6b37ddc</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_2eaa8b0a214549ceaa49b87c21fde5ea</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_9b2810efcaa063cbe7d007ba53f50f59</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_8470387429939d3e0d9266bd7c507a55</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_5cd44418db13c5bec82b0573da8746eb</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_3292fe55a5cd240c774229c9036a01d0</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_224db50ac468b913c2aeb6b287938f86</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_305dbcb853a284f05f2551a150619c16</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_65c6b4b36dd282adec01d75eb6fe2e12</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_8730c1a021638233752f0682131fd232</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_c0d84c2488d06d76646470a4ffff3f7a</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://chanjinhao.com/2018/10/31/98/</link>
		<pubDate>Wed, 31 Oct 2018 14:12:55 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">https://chanjinhao.wordpress.com/2018/10/31/98/</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>98</wp:post_id>
		<wp:post_date>2018-10-31 22:12:55</wp:post_date>
		<wp:post_date_gmt>2018-10-31 14:12:55</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>98</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>3</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="primary"><![CDATA[Primary]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[post_type]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[95]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[page]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cropped-13244125_10156918551720464_2088271169506181130_o</title>
		<link>http://chanjinhao.com/cropped-13244125_10156918551720464_2088271169506181130_o/</link>
		<pubDate>Wed, 31 Oct 2018 14:14:22 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2018/10/cropped-13244125_10156918551720464_2088271169506181130_o.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>100</wp:post_id>
		<wp:post_date>2018-10-31 22:14:22</wp:post_date>
		<wp:post_date_gmt>2018-10-31 14:14:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>cropped-13244125_10156918551720464_2088271169506181130_o</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2018/10/cropped-13244125_10156918551720464_2088271169506181130_o.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/10/cropped-13244125_10156918551720464_2088271169506181130_o.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:182;s:6:"height";i:182;s:4:"file";s:133:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/10/cropped-13244125_10156918551720464_2088271169506181130_o.jpg";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:29113;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Untitled Diagram (1)</title>
		<link>http://chanjinhao.com/2018/12/23/software-defined-networking-sdn/untitled-diagram-1/</link>
		<pubDate>Tue, 06 Nov 2018 02:02:52 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2018/11/untitled-diagram-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>105</wp:post_id>
		<wp:post_date>2018-11-06 10:02:52</wp:post_date>
		<wp:post_date_gmt>2018-11-06 02:02:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>untitled-diagram-1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>103</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2018/11/untitled-diagram-1.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/11/untitled-diagram-1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:686;s:6:"height";i:406;s:4:"file";s:95:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/11/untitled-diagram-1.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:32422;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>frontpage_diagram</title>
		<link>http://chanjinhao.com/2018/12/30/setting-up-your-own-ids/frontpage_diagram/</link>
		<pubDate>Wed, 07 Nov 2018 11:39:32 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2018/11/frontpage_diagram.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>108</wp:post_id>
		<wp:post_date>2018-11-07 19:39:32</wp:post_date>
		<wp:post_date_gmt>2018-11-07 11:39:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>frontpage_diagram</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>107</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2018/11/frontpage_diagram.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/11/frontpage_diagram.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:577;s:6:"height";i:124;s:4:"file";s:94:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/11/frontpage_diagram.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:14061;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>project_floodlight</title>
		<link>http://chanjinhao.com/2018/12/30/setting-up-your-own-ids/project_floodlight/</link>
		<pubDate>Wed, 07 Nov 2018 11:39:34 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2018/11/project_floodlight.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>109</wp:post_id>
		<wp:post_date>2018-11-07 19:39:34</wp:post_date>
		<wp:post_date_gmt>2018-11-07 11:39:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>project_floodlight</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>107</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2018/11/project_floodlight.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:277;s:6:"height";i:200;s:4:"file";s:95:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/11/project_floodlight.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:1418;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/11/project_floodlight.png]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>snort</title>
		<link>http://chanjinhao.com/2018/12/30/setting-up-your-own-ids/snort/</link>
		<pubDate>Wed, 07 Nov 2018 11:39:36 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2018/11/snort.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>110</wp:post_id>
		<wp:post_date>2018-11-07 19:39:36</wp:post_date>
		<wp:post_date_gmt>2018-11-07 11:39:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>snort</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>107</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2018/11/snort.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/11/snort.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1000;s:6:"height";i:1000;s:4:"file";s:82:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/11/snort.jpg";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"1";s:8:"keywords";a:0:{}}s:8:"filesize";i:52651;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Non-Kaggle</title>
		<link>http://chanjinhao.com/non-kaggle/</link>
		<pubDate>Wed, 31 Oct 2018 13:43:36 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?page_id=264</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Here, you'll find Data science projects that work on data sets not from Kaggle.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Detecting Botnet traffic</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Dataset: <a href="https://mcfp.weebly.com/the-ctu-13-dataset-a-labeled-dataset-with-botnet-normal-and-background-traffic.html">https://mcfp.weebly.com/the-ctu-13-dataset-a-labeled-dataset-with-botnet-normal-and-background-traffic.html</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Notebook: <a href="https://github.com/Charmanderander/BotnetDetection/blob/master/NetFlow-Botnet.ipynb">https://github.com/jinhaochan/BotnetDetection/blob/master/NetFlow-Botnet.ipynb</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In this data set, we were given traffic of both Botnet and normal traffic. I built a classifier to determine if a given traffic is anomalous or not.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I used the NetFlow data, and their features to build my model. I removed all source and destination information, as I wanted my classifier to learn solely on network behavioral data. And also, in reality, all the source and destination information will be different, so there is no use for my model to learn them.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In this problem, the data set was hugely unbalanced. I had significantly smaller set of Botnet traffic. To deal with this, I upsampled the amount of Botnet traffic.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Also, I had to find a balance between precision and recall. In detecting Botnet traffic, having a low precision and high recall is more desirable, as the cost of precision is cheap. It is more important for me to catch every single traffic that is a Botnet.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>264</wp:post_id>
		<wp:post_date>2018-10-31 21:43:36</wp:post_date>
		<wp:post_date_gmt>2018-10-31 13:43:36</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>non-kaggle</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Kernel Module Signing</title>
		<link>http://chanjinhao.com/2018/11/11/kernel-module-signing/</link>
		<pubDate>Sun, 11 Nov 2018 14:35:31 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?p=46</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Linux Kernel Signing</h1>

<h2>Kernel Tainting</h2>

<hr />

When dealing with offensive secuirty in the Linux space, we typically concern ourselves with kernel tainting. A kernel taint occurs when an unsigned module is loaded into the Linux kernel, which may potentially be used for malicious purposes.

A kernel taint does not always mean that something bad has happened to your machine, it just means that the machine's state has been unoffically modified. (Think of it as a warrantly for a device such as an Xbox. If you unoffically modify the hardware, its considered tainted, and the warranty is voided).

Some actions that may cause a kernel taint are:

[code lang=text]
- The use of a proprietary (or non-GPL-compatible) kernel module—this is the most common cause of tainted kernels and usually results from loading proprietary NVIDIA or AMD video drivers

- The use of staging drivers, which are part of the kernel source code but are not fully tested

- The use of out-of-tree modules that are not included with the Linux kernel source code

- Forcible loading or unloading of a kernel module (such as forcibly inserting a module not built for the current version of the kernel)

- The use of an SMP (multiprocessor) kernel on certain unsupported uniprocessor CPUs, primarily older AMD Athlon processors

- Overriding of the ACPI DSDT, sometimes needed to correct for power-management bugs (see here for details)

- Certain critical error conditions, such as machine check exceptions and kernel oopses

- Certain serious bugs in the system firmware (BIOS, UEFI) which the kernel must work around

[/code]

<a href="https://unix.stackexchange.com/questions/118116/what-is-a-tainted-kernel-in-linux">Source from Stackoverflow</a>

Each of these actions will produce a certain flag that will be useful for debugging purposes by the vendor or sys admin.

When you insert a module that's unsigned, a message will be logged that says

<code>%s module verification failed: signature and/or required key missing - tainting kernel</code>

This can be found in the kernel source code here: <a href="https://elixir.bootlin.com/linux/latest/source/kernel/module.c#L3691">tainted message printing</a>

In order to not taint the kernel, we must sign the module.

<h2>Kernel Module Signing</h2>

<hr />

<h4>Recap on public-private keys</h4>

Before we talk about kernel module signing, lets briefly recap on public-private key encryption

<img src="https://i-technet.sec.s-msft.com/dynimg/IC19080.gif" alt="Public-Private key usage" />

<a href="https://technet.microsoft.com/en-us/library/aa998077(v=exchg.65).aspx">Source from Microsoft</a>

When I want to sign a module, I sign it using my private key. Anyone can use my public key to verify the signature. If another malicious software claims to be my module, the don't have my private key, and using my public key will thus result in a key mismatch.

As opposed to encryption, where I use your public key to lock a message, and only you have your private key to unlock it.

Signing ensures integrity, Encryption ensures confidentiality. (The last one in CIA being availability, but this is assuming the contents are always available)

<h4>Back to signing kernel modules</h4>

If you wanna read deeper, go to this post here: <a href="http://cs.dartmouth.edu/~bx/blog/2015/10/02/a-history-of-linux-kernel-module-signing.html">A History of Linux Kernel Module Signing</a>

I'll be talking about the main ideas.

A general implementation of module signing is as follows:

<ol>
<li>Developer builds module</li>
<li>Developer hashes the module or parts of the module and signs the hash using their private key. The signature is embedded together with the module</li>
<li>User retrieves the signed version of the module</li>
<li>User hashes the same parts of the module that the developer hashed and checks that the hash they created matches the hash signed with the developer’s public key</li>
</ol>

Over the years, different signing mechanism have came (and gone)

<h4>First version</h4>

<pre><code>- Signature is stored in an ELF section named `“module_sig”`
- Only the contents of sections whose names contain the string “text” or “data” (but not “.rel.”) are hashed
</code></pre>

[code lang=text]
 1 for (i = 1; i &lt; hdr-&gt;e_shnum; i++) {
 2     name = secstrings+sechdrs[i].sh_name;
 3 
 4     /* We only care about sections with &quot;text&quot; or
 5        &quot;data&quot; in their names */
 6     if ((strstr(name, &quot;text&quot;) == NULL) &amp;&amp;
 7         (strstr(name, &quot;data&quot;) == NULL))
 8         continue;
 9     /* avoid the &quot;.rel.*&quot; sections too. */
10     if (strstr(name, &quot;.rel.&quot;) != NULL)
11         continue;
12     /* add contents of section to signature */
13     ...
14 }
[/code]

<h4>Second version</h4>

<pre><code>- Performs a large set of ELF metadata sanity checks before validating the signature
- Signature itself is stored in a “.module_sig” section just like in first version
- Code, data section contents are hashed. Corresponding section headers are hashed. Relocation section headers and entries along with any symbols they reference get hashed.
</code></pre>

<h4>Third Version</h4>

<pre><code>- Module signature is wrapped around the notes section `SHT_NOTE`, and named `.module.sig`
- Everything in Second version + empty and allocatable sections (Second and first version do not hash empty and allocatable sections)
</code></pre>

<h4>Fourth version and beyond</h4>

Lets take a deeper look into this version, as its the version thats most widely used for most kernels today.

The source code for kernel version 4.17 can be found here: <a href="https://elixir.bootlin.com/linux/v4.17/source/kernel/module.c#L3659">4.17 Source code</a>

The function in question is <code>load_module</code>, which is called whenever you insmod a module.

In <code>load_module</code>, we see that we call <code>module_sig_check</code>

[code lang=text]
/* Allocate and load the module: note that size of section 0 is always
   zero, and we rely on this for optional sections. */
static int load_module(struct load_info *info, const char __user *uargs,
               int flags)
{
    struct module *mod;
    long err;
    char *after_dashes;

    err = module_sig_check(info, flags);
    if (err)
        goto free_copy;

    ...
[/code]

Looking at the <code>module_sig_check</code> code, it calls <code>mod_verify_signature</code>

[code lang=text]
static int module_sig_check(struct load_info *info, int flags)
{
    int err = -ENOKEY;
    const unsigned long markerlen = sizeof(MODULE_SIG_STRING) - 1;
    const void *mod = info-&gt;hdr;

    /*
     * Require flags == 0, as a module with version information
     * removed is no longer the module that was signed
     */
    if (flags == 0 &amp;&amp;
        info-&gt;len &gt; markerlen &amp;&amp;
        memcmp(mod + info-&gt;len - markerlen, MODULE_SIG_STRING, markerlen) == 0) {
        /* We truncate the module to discard the signature */
        info-&gt;len -= markerlen;
        err = mod_verify_sig(mod, &amp;info-&gt;len);
    }

    if (!err) {
        info-&gt;sig_ok = true;
        return 0;
    }

    /* Not having a signature is only an error if we&#039;re strict. */
    if (err == -ENOKEY &amp;&amp; !sig_enforce)
        err = 0;

    return err;
}
[/code]

Take note that <code>mod_verify_sig</code> has to return <code>0</code> for it to call <code>info-&amp;gt;sig_ok = true</code>

Finally, we look a code snippet of <code>mod_verify_sig</code>

[code lang=text]
struct module_signature {
    u8  algo;       /* Public-key crypto algorithm [0] */
    u8  hash;       /* Digest algorithm [0] */
    u8  id_type;    /* Key identifier type [PKEY_ID_PKCS7] */
    u8  signer_len; /* Length of signer&#039;s name [0] */
    u8  key_id_len; /* Length of key identifier [0] */
    u8  __pad[3];
    __be32  sig_len;    /* Length of signature data */
};

/*
 * Verify the signature on a module.
 */
int mod_verify_sig(const void *mod, unsigned long *_modlen)
{
    struct module_signature ms;
    size_t modlen = *_modlen, sig_len;

    pr_devel(&quot;==&gt;%s(,%zu)\n&quot;, __func__, modlen);

    if (modlen &lt;= sizeof(ms))
        return -EBADMSG;

    memcpy(&amp;ms, mod + (modlen - sizeof(ms)), sizeof(ms));
    modlen -= sizeof(ms);

    sig_len = be32_to_cpu(ms.sig_len);
    if (sig_len &gt;= modlen)
        return -EBADMSG;
    modlen -= sig_len;
    *_modlen = modlen;

    ...

[/code]

We see that at the end of the module, we have two pieces of information:

<ol>
<li>Module signature struct, which stores information about the module signature</li>
<li>The signature itself</li>
</ol>

<h2>Cracking it</h2>

<hr />

I have no idea how to crack it, but if anyone finds a flaw in this and prevents kernel taint, it means that they can insert whatever malicious modules they like without tainting the kernel.

Without a kernel taint, forensics and incident responders would be duped.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>46</wp:post_id>
		<wp:post_date>2018-11-11 22:35:31</wp:post_date>
		<wp:post_date_gmt>2018-11-11 14:35:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>kernel-module-signing</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="kernel-module"><![CDATA[Kernel Module]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[60281671]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>geo_public</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[24148848931]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1541947875]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>How HTTPS Works</title>
		<link>http://chanjinhao.com/2018/11/18/how-https-works/</link>
		<pubDate>Sun, 18 Nov 2018 14:36:51 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?p=48</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>How does HTTPS work?</h2>

We all know to use a HTTPS site instead of a HTTP, because it is more secure. We roughly know that the messages sent to and fro the client and server are encrypted, so any snooping person wouldn't know the contents, but how does it all work?

This post is motivated by Google's announcement that it is going to label all HTTP sites as insecure. HTTP sites are those that do not implement any encryption, and all your passwords and traffic are in plain text. The question should be, why do HTTP sites even exist anymore...

<h2>The HTTP in HTTPS</h2>

HTTP traffic is how the client talks to the server. Its the language that is spoken when transferring information over the internet.

Below is an example of a HTTP traffic of a <code>GET</code> request sent to the server. It is sent when a user keys in his credentials, and clicks onto the login button.

[code lang=text]
GET /bin/login?user=dumb+user&amp;pw=12345&amp;action=login HTTP/1.1
Accept: image/gif, image/jpeg, */*
Referer: http://127.0.0.1:8000/login.html
Accept-Language: en-us
Accept-Encoding: gzip, deflate
User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)
Host: 127.0.0.1:8000
Connection: Keep-Alive
[/code]

Because there is no encryption, all the contents are in plain text, including the username and password. By using a traffic inspection tool like WireShark, it takes little to no effort to analyze and pick out information like this.

<h2>The S in HTTPS</h2>

So we want to encrypt the traffic so that it is not in plain text, including all our passwords and contents we sent and recieve.

HTTPS (HTTP Secure) is simply HTTP wrapped up in SSL/TLS.

SSL is the predecessor of TLS, and both SSL 2.0 and 3.0 have been deprecated by the IETF (Internet Engineering Task Force, which is a community that develops and promotes protocols and standards pertaining to TCP/IP). As such, it is safer to disable SSL, and leave TLS and the default option for your browsers.

The being said, SSL/TLS does not does the actual encryption. It is only a handshake protocol that happens between the client and the server.

During the handshake, the following steps are taken:

1) Hello

<ul>
<li>The client initiates the request by sending a <code>ClientHello</code>, which contains the information needed by the server to connect to the client via SSL, such as the cipher suites the client supports, and the SSL versions it supports.</p></li>
<li><p>The server then responds with a <code>ServerHello</code>, which contains similar information, and with the decision to use which cipher suite and SSL version to use</p></li>
</ul>

<p>2) Certificate Verification

<ul>
<li>The server now has to prove it's identity to the client, and it does so by an SSL certificate</p></li>
<li><p>An SSL certificate is a file that contains information about the server. This includes domain name, server name or hostname, organization name, location, the server's public key and certificate validity.</p></li>
<li><p>The client either verifies the certificate with a CA, or implicitly trusts the certificate (Clicking on the button "Trust Anyway")</p></li>
</ul>

<p>3) Key Exchange

<ul>
<li>Once the client trusts the server, and the cipher suites have been chosen, the client generates a symmetric key to be used for encryption and decryption.</p></li>
<li><p>The symmetric key is then encrypted using the server's public key, an sent over to the server. (Asymmetric encryption is used to encrypt the symmetric key to be used. Encrypt-ception!)</p></li>
<li><p>The following messages sent and recieved by the client and the server are thus encrypted/decrypted by this symmetric key</p></li>
</ul>

<h2>Conclusion</h2>

<p>HTTP sends everything in plain text. We then use SSL/TLS to encrypt the plain text traffic, to prevent people from snooping in on our information.

We briefly described the processes involved in setting up the SSL/TLS connection, which includes the initiation, certificate verification, and key exchange.

Happy surfing!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>48</wp:post_id>
		<wp:post_date>2018-11-18 22:36:51</wp:post_date>
		<wp:post_date_gmt>2018-11-18 14:36:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>how-https-works</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="https"><![CDATA[HTTPS]]></category>
		<category domain="category" nicename="networking"><![CDATA[Networking]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[60281671]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>geo_public</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1542570817]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[24399328649]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>C# Pass By Value</title>
		<link>http://chanjinhao.com/2018/11/25/c-pass-by-value/</link>
		<pubDate>Sun, 25 Nov 2018 14:37:51 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?p=51</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Pass by Value vs Reference</h2>

<h3>Pass by value</h3>

<hr />

When we pass call a function, we sometimes pass in some values for the function to use. Typically, it would look like this

<code>(parameters)</code>

or

<code>void swapValues(int x, int y)</code>

When we pass a value to the function <code>swapValue()</code>, we are passing it by value.

What this means is that, a new memory region is allocated from the stack for the new parameters <code>x</code> and <code>y</code>, and the value of that memory region is set to the value that was passed to it.

I'll write a post on what happens in the memory region when a function is called in the future (dealing with  functions stack frame allocation etc). But for now, when we call a function, it is allocated a function stack frame, with all its variables and paramters contained within the frame.

Let's look at the following code block

[code lang=text]
public static void Main()
{
    int x = 10;
    int y = 20;

    swapValues(10, 20);
}


void swapValues(int x, int y)
{
    int temp;

    temp = x;
    x = y;
    y = temp;
}
[/code]

When <code>Main()</code> calls <code>swapValues()</code>, a new stack frame is allocated just for <code>swapValues()</code> to store all its local variables, and parameters passed into it. The stack frame will be the new memory region for the two paramters <code>x</code> and <code>y</code>, and assigns them to the values that was passed to them, which are <code>10</code> and <code>20</code>.

Because it's a new memory region, whatever changes that are done in the function <code>swapValues()</code> will only affect the newly allocated memory regions of <code>x</code> and <code>y</code> in the stack frame of <code>swapValues()</code>.

That is to say, the values of <code>x</code> and <code>y</code> in the <code>Main</code> function stack frame will be left untouched!

This kind of defeats the purpose of the function...

So how do we fix it?

<h3>Pass by Reference</h3>

<hr />

Let's tweak the code above slightly to make it pass by reference

[code lang=text]
public static void Main()
{
    int x = 10;
    int y = 20;

    swapValues(10, 20);
}


void swapValues(ref int x, ref int y)
{
    int temp;

    temp = x;
    x = y;
    y = temp;
}
[/code]

The only difference is adding the keyword <code>ref</code> in front of the function parameters, which tell the function to reference to the objects passed in. This means that whatever work that is done in <code>swapValues()</code> will work directly on the values in <code>Main()</code>

The difference between passing by value and passing by reference is shown below

<ul>
<li>Passing by value: Allocates memory space on the stack frame and assigns it the value of the object that were passed into the function</p></li>
<li><p>Passing by reference: Does not allocate memory space on the stack frame, uses the object that was passed in directly</p></li>
</ul>

<p>In this case, whatever changes done to <code>x</code> and <code>y</code> in the function <code>swapValues()</code> will directly modify the values inside the stack frame of <code>Main()</code>!

<h3>Reference Objects</h3>

<hr />

<h3>Modifying the reference object part 1</h3>

Now heres the tricky part. Some objects are reference objects, which is to say they are pointers to begin with. An example would be a string in C, or an array object.

[code lang=text]
public static void Main()
{
    int[] myArrayMain = new int[] {1, 2, 3, 4, 5};

    editArray(myArrayMain);
}


void editArray(int[] myArrayParam)
{
     myArrayParam[0] = 7;
}
[/code]

The above code will changes <code>myArrayMain</code> to <code>{0, 2, 3, 4, 5}</code>

When we call the function <code>editArray()</code>, we create a new stack frame for <code>editArray()</code> to hold its local variables and paramters. Because <code>myArrayParam</code> is a reference object, we create a pointer on the stack frame to hold any value that is passed into <code>myArrayParam</code>.

We are passing in <code>myArrayMain</code>, which is a reference object. That means, the value of <code>myArrayMain</code> is an address, which points to the first element in the array.

When we pass <code>myArrayMain</code> to <code>myArrayParam</code>, we are assigning <code>myArrayParam</code> to the value of the <code>myArrayMain</code>, which is an address that points to the first element of <code>myArrayMain</code>!

Memory pointer layout:

<code>myArrayParam</code> --&gt; <code>myArrayMain</code> --&gt; <code>memory of first element in myArrayMain (1)</code>

So any changes made to <code>myArrayParam</code> in <code>editArray()</code> will be propagated to the <code>myArrayMain</code>

<h3>Modifying the reference object part 2</h3>

Now what happens when we change <code>editArray()</code> to create a new array? Will <code>myArrayMain</code> be overwritten?

[code lang=text]
public static void Main()
{
    int[] myArrayMain = new int[] {1, 2, 3, 4, 5};

    editArray(myArrayMain);
}


void editArray(int[] myArrayParam)
{
     myArrayParam[0] = new int[] {6, 7, 8, 9, 10};
}
[/code]

Nope. <code>myArrayMain</code> will still remain as <code>{1, 2, 3, 4, 5}</code>

When we call <code>myArrayParam[0] = new int[] {6, 7, 8, 9, 10};</code>, we are repointing <code>myArrayParam</code> to something else. This breaks the memory pointer layout above

[code lang=text]
myArrayParam --&gt; myArrayMain --&gt; memory of first element in myArrayMain (1)

becomes

myArrayParam --&gt; memory of first element in myArrayParam (6)

myArrayMain --&gt; memory of first element in myArrayMain (1)
[/code]

<h3>Modifying the reference object part 3</h3>

Lets look at the final attempt. This time, we call <code>ref</code> on the array that is passed in

[code lang=text]
public static void Main()
{
    int[] myArrayMain = new int[] {1, 2, 3, 4, 5};

    editArray(myArrayMain);
}


void editArray(ref int[] myArrayParam)
{
     myArrayParam[0] = new int[] {6, 7, 8, 9, 10};
}
[/code]

Remember that when we call <code>ref</code>, in the stack frame of <code>editArray()</code>, no new memory is allocted, and the original <code>myArrayMain</code> is used.

The memory pointer layout is now

[code lang=text]
myArrayParam --&gt; memory of first element in myArrayMain (1)

myArrayMain --&gt; memory of first element in myArrayMain (1)
[/code]

Both <code>myArrayParam</code> and <code>myArrayMain</code> now point to the first element in <code>myArrayMain</code>

So when the code block is ran, <code>myArrayMain</code> will change to <code>{6, 7, 8, 9, 10}</code>!

<h3>Conclusion</h3>

<hr />

Phew! That was a long and confusing read, so here's a TLDR:

<ul>
<li>C# passes by value</li>
<li>When a function is called, a stack frame is allocated for local and parameter variables</li>
<li>The parameter variables are assigned to the value that was passed in</li>
<li>No memory in the stack frame is allocated for parameters that are prefixed with <code>ref</code>, but are accessed directly from the caller function</li>
<li>Arrays are reference objects</li>
<li>The values they hold are the memory space of the first element in the array</li>
</ul>

Thanks for reading!!

Further reading: http://www.yoda.arachsys.com/csharp/parameters.html Excellent page!!!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>51</wp:post_id>
		<wp:post_date>2018-11-25 22:37:51</wp:post_date>
		<wp:post_date_gmt>2018-11-25 14:37:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>c-pass-by-value</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C#]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[60281671]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>geo_public</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1543158469]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[24633985860]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Culture Code</title>
		<link>http://chanjinhao.com/2018/12/02/the-culture-code/</link>
		<pubDate>Sun, 02 Dec 2018 14:38:53 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?p=53</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Culture Code</h2>

I've just finsihed reading <a href="https://www.amazon.com/Culture-Code-Secrets-Highly-Successful/dp/0525492461">The Culture Code</a>, and it was a really good book. Good books are those that either introduces new ideas, or reintroduces known ideas to be relevant.

In this book, he explores what are the cultural values that make up successful team. 3 cultural values were identified, and they are:

<ol>
<li>Provide Psychological Safety</li>
<li>Embrace Vulnerability</li>
<li>Create Purpose</li>
</ol>

<h3>Psychological Safety</h3>

<hr />

Psychological safety means that person feels safe. Not physically safe (physical safety is assumed to be present, by law), but mentally safe.

Safe to sound out ideas, safe to make mistakes, safe to question assumptions.

By providing a safe environment for the employees to work in, they can perform at their best.

Some actions to provide psychological safety are:

<ol>
<li>Overcommunicate your listening

Let the person know that his ideas are valued, and he is being listened to. Avoid interrupting the person when he is talking. Seek to understand, and not just listen.</p></li>
<li><p>Embrace the messenger

Bringing bad news is tough, and you should appreciate the person who is willing to do it. Don't shoot the messenger, he is doing everyone a favour by telling the bad news. If he didn't care, he wouldn't even tell. By telling, it shows that he cares, so care for him too.</p></li>
<li><p>Overdo Thank-Yous

Let the person know how appreciative you are. Even if you are his leader, thank him for allowing you to coach him. When things are going right, thank the person. When things are going wrong, thank the person. Thank the least significant person. By thanking the person, we let him feel that he is valued.</p></li>
<li><p>Eliminate bad apples

The bad apples lead to the broken window theory. A single person with bad behaviour encourages others to follow suit. Eliminate the bad behaviour, or eliminate the person. No one is to be a dickhead.</p></li>
<li><p>Create Safe, Collison rich places

A collison rich place is one that meetings can happen spontaneously. Serendipity is what they call it. Lunch corner that encourage people to hang out together instead of eating at their desk. Game corners that allow people to have fun together. Physical proximity plays a big part in cooperative behaviour.</p></li>
<li><p>Make sure everyone has a voice

Simple enough. Make sure everyone is able to voice out their opinions. No idea/opinion is a stupid idea/opinion. Whats worse than having bad ideas, is having no ideas.</p></li>
<li><p>Avoid the sandwich feedback

The idea of the sandwich feedback is to lessen the impact of the negative feedback, but thats really full of shit. Separate your feedbacks into two portions, Good feedback, and then Bad feedback. That's it.</p></li>
<li><p>Have fun together

Duh.</p></li>
</ol>

<h3>Embrace Vulnerability</h3>

<hr />

<p>We're all not as smart as we think we are, and the sooner your team realizes that, the quicker they will grow. If everyone acknowledges they suck, everyone will want to learn. If the team constantly exudes the air of false confidence, no one will dare to exhibit fallibility, and that will cause a huge crack in team dynamics

Even if you're a leader, make your vulnerabilities known (Not personal or character vulnerabilities, but professional ones). Admit to what you don't know, and your subordinates will respect you more, else they will (and they will), think that you're an arrogant ass.

Everyone secretly feels vulnerable, and when you show yourself to be vulnerable, this gives an opportunity for them to relate to you. "Oh hey, you don't know what's going on too! Let's learn together!"

Some actions to embrace vulnerability are:

<ol>
<li>Make sure the leader is the first to be vulnerable

Only when the leader shows that it's okay to be vulnerable, will his subordinates follow suit. If they leader projects the image that vulnerability is unacceptable, no one would show it.

3 questions leaders should ask: What should I continue doing, what am I not doing enough, how can I enable you.</p></li>
<li><p>Overcommunicate Expectations

Make sure everyone knows their roles well, and exactly what is expected of them. Only with defined roles can someone identify what their lacking to fulfill those roles and meet those expectations. If someone doesn't know where he's going, then he doesn't what he needs to improve on.</p></li>
<li><p>Feedback Feedback Feedback

Let the team know how well they are doing, how badly they are doing. Use methods such as AARs (After Action Reviews) to elicit feedback, and to give feedback. Sample questions are: What were the intended results, what were the actual results, what caused the results, what will we do same, what will we do different, what have we learnt.

Feedback should be entirely professional, and never personal.</p></li>
<li><p>Embrace the discomfort

Vulnerability is something personal, and bringing it out to public can be quiet uncomfortable, but entirely necessary. Only by letting everyone know, will there be an opportunity for feedback and growth.</p></li>
</ol>

<h3>Create Purpose</h3>

<hr />

<p>Create a story for the team to be part of. Create something that is greater than the self, and people would sacrifce themselves for it. If there is no greater purpose and only self interest, the team cannot function optimally.

Some actions to create purpose are:

<ol>
<li>Be extremely clear about your priorities

What are we about? Where are we headed? Everyone must know about this, and it shoulden't be enigmatic and unclear. An unclear story leads to unclear actions.</p></li>
<li><p>The purpose of proficiency, and the purpose of creativity

Proficiency is needed for repeatable tasks, Creativity is needed for new tasks. Identify within the group which teams are for proficiency, which teams are for creativity.</p></li>
<li><p>Embrace the use of catchphrases

Even if they sound cheesy, but the work. A company motto that is easy to remember and simple to understand builds an identiy that the teams can assume. "Talk Less, Do More", "Work Hard, Be Nice"</p></li>
<li><p>Use artifacts

To build a convincing story, you sometimes need physical artifacts to bring out the realism in it. The Navy Seals display the battle gears of KIA operators, Pixar displays their Oscars. Showcase something significant to the company that sets the backdrop for the story.</p></li>
<li><p>Focus on barsetting behaviours

<p>Writing clean code, using source control and other behaviours that are consider best practices. When the team focuses on those behaviours, it becomes part of the identity that the team can assume. "Our team does xxx behaviours!" It's like a culture of excellence that originates from being part of the team.</p></li>
</ol>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>53</wp:post_id>
		<wp:post_date>2018-12-02 22:38:53</wp:post_date>
		<wp:post_date_gmt>2018-12-02 14:38:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-culture-code</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="readings"><![CDATA[Readings]]></category>
		<category domain="post_tag" nicename="the-culture-code"><![CDATA[The Culture Code]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[60281671]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>geo_public</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[24883754778]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1543780517]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Async and Await in C#</title>
		<link>http://chanjinhao.com/2018/12/09/async-and-await-in-c/</link>
		<pubDate>Sun, 09 Dec 2018 14:40:01 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?p=55</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Async and Await in C</h2>

<code>async</code> and <code>await</code> are used when we are doing asynchronous programming. Why we would want to do asynchronous programming, is due to performance issues. When we have two unrelated tasks that are in the program, and one task takes a long time to process, it should not be holding up the other task.

We use Asynchronous programming to hand over program controls to ensure that no one process is holding up the entire program.

<code>async</code> and <code>await</code> are used together to make a program asynchronous.

Below is a simple example to make a program asynchronous

[code lang=text]
static void Main(string[] args)
{
    DoSomething();
    Console.WriteLine(&quot;Control to Main!&quot;);
    Console.ReadLine();
}

public static async void DoSomething()
{
    await Delay();
    Console.WriteLine(&quot;Control back to Method!&quot;);
}

async static Task Delay()
{
    await Task.Delay(5000);
}
[/code]

The output on the console:

[code lang=text]
Control to Main!
&lt;after a 5 second delay&gt;
Control back to Method!
[/code]

You first have to declare the method asynchronous with <code>async</code>

<code>async static Task Delay()</code>

Next, we put the keyword <code>await</code> beside the command that will take a long time.

What <code>await</code> does is this
   - It awaits for the command to be completed
   - While it is awaiting, it passes control back up to the caller
   - After the command is completed, the control is passed back to the callee

If we look at the code, the program first calls <code>DoSomething()</code>, which calls <code>await Delay()</code>, which then executes <code>await Task.Delay(5000);</code>

When <code>await Task.Delay(5000);</code> is executed, <code>Delay()</code> passes control back up to the caller, which is <code>DoSomething()</code>

Because <code>DoSomething()</code> is awaiting <code>Delay()</code>, it passes control back up again to <code>Main()</code>, which then executes <code>Console.WriteLine("Control to Main!");</code>

After <code>await Task.Delay(5000);</code> is completed, it returns to <code>DoSomething()</code>, which executes <code>Console.WriteLine("Control back to Method!");</code>, and finally returns to <code>Main()</code>

Another example is given below

[code lang=text]
async Task&lt;int&gt; AccessTheWebAsync()
{ 
    HttpClient client = new HttpClient();

   Task&lt;string&gt; getStringTask = client.GetStringAsync(&quot;http://msdn.microsoft.com&quot;);

   // You can do work here that doesn&#039;t rely on the string from GetStringAsync.
   DoIndependentWork();

   string urlContents = await getStringTask;
   //The thing is that this returns an int to a method that has a return type of Task&lt;int&gt;
   return urlContents.Length;
}
[/code]

Here, <code>Task getStringTask = client.GetStringAsync("http://msdn.microsoft.com");</code> is called, followed by <code>DoIndependentWork();</code>.

We next call <code>string urlContents = await getStringTask;</code>, which awaits on <code>getStringTask</code>. There are two possible scenerios here

<ol>
<li>After <code>DoIndependentWork()</code> is completed, <code>Task getStringTask = client.GetStringAsync("http://msdn.microsoft.com");</code> is completed as well, and <code>getStringTask</code> is fully initialized. In this case, there is no control being passed back to the caller of <code>AccessTheWebAsync()</code>, and the program just runs through.</li>
<li>After <code>DoIndependentWork()</code> is completed, <code>Task getStringTask = client.GetStringAsync("http://msdn.microsoft.com");</code> NOT completed, and <code>getStringTask</code> is NOT initialized. In this case, there control is passed back to the caller of <code>AccessTheWebAsync()</code> for execution. Only after <code>getStringTask</code> has been initialized, will the program pass back control to  <code>AccessTheWebAsync()</code></li>
</ol>

And for obvious reasons, <code>async</code> cannot be a modifier on the <code>Main</code> method, because it is the root caller.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>55</wp:post_id>
		<wp:post_date>2018-12-09 22:40:01</wp:post_date>
		<wp:post_date_gmt>2018-12-09 14:40:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>async-and-await-in-c</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="async"><![CDATA[Async]]></category>
		<category domain="post_tag" nicename="await"><![CDATA[Await]]></category>
		<category domain="category" nicename="c"><![CDATA[C#]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[60281671]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>geo_public</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[25194793107]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1544368040]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>untitled</title>
		<link>http://chanjinhao.com/untitled/</link>
		<pubDate>Fri, 23 Nov 2018 06:24:32 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2018/11/untitled.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>134</wp:post_id>
		<wp:post_date>2018-11-23 14:24:32</wp:post_date>
		<wp:post_date_gmt>2018-11-23 06:24:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>untitled</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2018/11/untitled.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/11/untitled.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:108;s:6:"height";i:488;s:4:"file";s:85:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/11/untitled.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:5331;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>training_data</title>
		<link>http://chanjinhao.com/training_data/</link>
		<pubDate>Fri, 23 Nov 2018 08:57:36 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2018/11/training_data.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>135</wp:post_id>
		<wp:post_date>2018-11-23 16:57:36</wp:post_date>
		<wp:post_date_gmt>2018-11-23 08:57:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>training_data</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2018/11/training_data.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/11/training_data.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:886;s:6:"height";i:529;s:4:"file";s:90:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/11/training_data.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:19658;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>presentation1</title>
		<link>http://chanjinhao.com/presentation1/</link>
		<pubDate>Fri, 23 Nov 2018 09:10:31 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2018/11/presentation1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>136</wp:post_id>
		<wp:post_date>2018-11-23 17:10:31</wp:post_date>
		<wp:post_date_gmt>2018-11-23 09:10:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>presentation1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2018/11/presentation1.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/11/presentation1.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:960;s:6:"height";i:720;s:4:"file";s:90:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/11/presentation1.jpg";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:26073;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>weightmatrix</title>
		<link>http://chanjinhao.com/weightmatrix/</link>
		<pubDate>Fri, 23 Nov 2018 09:29:36 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2018/11/weightmatrix.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>137</wp:post_id>
		<wp:post_date>2018-11-23 17:29:36</wp:post_date>
		<wp:post_date_gmt>2018-11-23 09:29:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>weightmatrix</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2018/11/weightmatrix.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/11/weightmatrix.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:960;s:6:"height";i:720;s:4:"file";s:89:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/11/weightmatrix.jpg";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:25970;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>weightmatrix1</title>
		<link>http://chanjinhao.com/weightmatrix1/</link>
		<pubDate>Fri, 23 Nov 2018 09:30:08 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2018/11/weightmatrix1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>138</wp:post_id>
		<wp:post_date>2018-11-23 17:30:08</wp:post_date>
		<wp:post_date_gmt>2018-11-23 09:30:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>weightmatrix1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2018/11/weightmatrix1.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/11/weightmatrix1.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:834;s:6:"height";i:425;s:4:"file";s:90:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/11/weightmatrix1.jpg";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"1";s:8:"keywords";a:0:{}}s:8:"filesize";i:50267;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>presentation11</title>
		<link>http://chanjinhao.com/presentation11/</link>
		<pubDate>Fri, 23 Nov 2018 09:30:43 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2018/11/presentation11.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>139</wp:post_id>
		<wp:post_date>2018-11-23 17:30:43</wp:post_date>
		<wp:post_date_gmt>2018-11-23 09:30:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>presentation11</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2018/11/presentation11.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/11/presentation11.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:634;s:6:"height";i:616;s:4:"file";s:91:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/11/presentation11.jpg";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"1";s:8:"keywords";a:0:{}}s:8:"filesize";i:45772;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>gradient_descent_method</title>
		<link>http://chanjinhao.com/gradient_descent_method/</link>
		<pubDate>Wed, 28 Nov 2018 11:48:04 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2018/11/gradient_descent_method.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>165</wp:post_id>
		<wp:post_date>2018-11-28 19:48:04</wp:post_date>
		<wp:post_date_gmt>2018-11-28 11:48:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>gradient_descent_method</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2018/11/gradient_descent_method.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/11/gradient_descent_method.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:643;s:6:"height";i:446;s:4:"file";s:100:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/11/gradient_descent_method.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:116747;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>512px-gradient_descent-svg</title>
		<link>http://chanjinhao.com/512px-gradient_descent-svg/</link>
		<pubDate>Wed, 28 Nov 2018 11:49:29 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2018/11/512px-gradient_descent-svg.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>166</wp:post_id>
		<wp:post_date>2018-11-28 19:49:29</wp:post_date>
		<wp:post_date_gmt>2018-11-28 11:49:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>512px-gradient_descent-svg</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2018/11/512px-gradient_descent-svg.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/11/512px-gradient_descent-svg.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:512;s:6:"height";i:549;s:4:"file";s:103:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/11/512px-gradient_descent-svg.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:37667;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>saddle_point-svg</title>
		<link>http://chanjinhao.com/saddle_point-svg/</link>
		<pubDate>Wed, 28 Nov 2018 12:00:57 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2018/11/saddle_point-svg.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>167</wp:post_id>
		<wp:post_date>2018-11-28 20:00:57</wp:post_date>
		<wp:post_date_gmt>2018-11-28 12:00:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>saddle_point-svg</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2018/11/saddle_point-svg.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/11/saddle_point-svg.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:984;s:6:"height";i:768;s:4:"file";s:93:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/11/saddle_point-svg.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:271778;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>mtimFxh</title>
		<link>http://chanjinhao.com/2018/12/16/kaggle-boiler-plate/mtimfxh/</link>
		<pubDate>Fri, 30 Nov 2018 02:27:55 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2018/12/mtimfxh.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>170</wp:post_id>
		<wp:post_date>2018-11-30 10:27:55</wp:post_date>
		<wp:post_date_gmt>2018-11-30 02:27:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>mtimfxh</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>93</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2018/12/mtimfxh.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/12/mtimfxh.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:714;s:6:"height";i:280;s:4:"file";s:84:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/12/mtimfxh.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:13406;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>movingaverage</title>
		<link>http://chanjinhao.com/movingaverage/</link>
		<pubDate>Mon, 03 Dec 2018 11:53:58 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2018/12/movingaverage.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>178</wp:post_id>
		<wp:post_date>2018-12-03 19:53:58</wp:post_date>
		<wp:post_date_gmt>2018-12-03 11:53:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>movingaverage</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2018/12/movingaverage.gif</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/12/movingaverage.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:749;s:6:"height";i:549;s:4:"file";s:90:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/12/movingaverage.gif";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:16171;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>multi-layer_neural_network-vector</title>
		<link>http://chanjinhao.com/multi-layer_neural_network-vector/</link>
		<pubDate>Mon, 03 Dec 2018 11:56:52 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2018/12/multi-layer_neural_network-vector.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>179</wp:post_id>
		<wp:post_date>2018-12-03 19:56:52</wp:post_date>
		<wp:post_date_gmt>2018-12-03 11:56:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>multi-layer_neural_network-vector</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2018/12/multi-layer_neural_network-vector.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/12/multi-layer_neural_network-vector.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:8:"filesize";i:7629;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>multi-layer_neural_network-vector1</title>
		<link>http://chanjinhao.com/multi-layer_neural_network-vector1/</link>
		<pubDate>Mon, 03 Dec 2018 11:57:23 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2018/12/multi-layer_neural_network-vector1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>180</wp:post_id>
		<wp:post_date>2018-12-03 19:57:23</wp:post_date>
		<wp:post_date_gmt>2018-12-03 11:57:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>multi-layer_neural_network-vector1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2018/12/multi-layer_neural_network-vector1.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/12/multi-layer_neural_network-vector1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:8:"filesize";i:7629;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>multi-layer_neural_network-vector2</title>
		<link>http://chanjinhao.com/multi-layer_neural_network-vector2/</link>
		<pubDate>Mon, 03 Dec 2018 11:57:52 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2018/12/multi-layer_neural_network-vector2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>181</wp:post_id>
		<wp:post_date>2018-12-03 19:57:52</wp:post_date>
		<wp:post_date_gmt>2018-12-03 11:57:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>multi-layer_neural_network-vector2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2018/12/multi-layer_neural_network-vector2.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/12/multi-layer_neural_network-vector2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1147;s:6:"height";i:1024;s:4:"file";s:111:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/12/multi-layer_neural_network-vector2.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:102079;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>1_zy1qfb9affzz66yxxoi2aw</title>
		<link>http://chanjinhao.com/1_zy1qfb9affzz66yxxoi2aw/</link>
		<pubDate>Mon, 10 Dec 2018 02:35:04 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2018/12/1_zy1qfb9affzz66yxxoi2aw.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>189</wp:post_id>
		<wp:post_date>2018-12-10 10:35:04</wp:post_date>
		<wp:post_date_gmt>2018-12-10 02:35:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>1_zy1qfb9affzz66yxxoi2aw</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2018/12/1_zy1qfb9affzz66yxxoi2aw.gif</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/12/1_zy1qfb9affzz66yxxoi2aw.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:581;s:6:"height";i:580;s:4:"file";s:101:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/12/1_zy1qfb9affzz66yxxoi2aw.gif";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:97221;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Kaggle Boiler Plate</title>
		<link>http://chanjinhao.com/2018/12/16/kaggle-boiler-plate/</link>
		<pubDate>Sun, 16 Dec 2018 13:33:18 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?p=93</guid>
		<description></description>
		<content:encoded><![CDATA[<p>I've been playing around with Kaggle competitions for a while, and there are usually quite a few steps to perform.</p>
<p>I've compiled a list of them below, in sequential order. These are by no means hard and fast rules, but simple heuristics to follow!</p>
<p>I've added links here and there to guide you a long.</p>
<h1>Importing your libraries</h1>
<hr />
<p>You're gonna have to import the usual <code>pandas</code> and <code>sklearn</code> to do your dataframe manipulations, and machine learning stuff.</p>
<p>Aside from those, you'll likely be importing other stuff that are relevant in transforming your data.</p>
<h1>Reading in training data and testing data</h1>
<hr />
<p>When you first start the project, the first thing you want to do is to read in the data. It's usually named <code>train.csv</code> and probably contains a few million lines.</p>
<p>You most probably won't be able to read in all the data at once, so you're gonna have to read in just a few lines to get a preview.</p>
<p><code>df_train = pd.read_csv("train.csv", nrows=1000000)</code></p>
<p>Of course when you're doing the actual training of the model, you're going to have to read in the whole thing!</p>
<p>We also read in the test set, usually called <code>test.csv</code>. The reason why we're reading in the test set, is so that when we perform feature creation and data massaging, we can do it both on the test and train data.</p>
<h1>Visualizing data</h1>
<hr />
<p>You're going to want to visualize the data you've read in to analyze for any outliers, or obvious trends that can be helpful in feature creation.</p>
<p>For univariate analysis, I usually apply barchart, or histogram, while for bivariate analysis, I'll apply a scatter plot.</p>
<h3>Univariate Analysis</h3>
<p><a href="https://www.kaggle.com/residentmario/univariate-plotting-with-pandas" target="_blank" rel="noopener">https://www.kaggle.com/residentmario/univariate-plotting-with-pandas</a></p>
<h3>Bivariate Analysis</h3>
<p><a href="https://www.kaggle.com/residentmario/bivariate-plotting-with-pandas" target="_blank" rel="noopener">https://www.kaggle.com/residentmario/bivariate-plotting-with-pandas</a></p>
<h1>Cleaning data</h1>
<hr />
<p>After visualizing your data, you'll more or less know the upper or lower bounds, outliers, and whats considered to be normal.</p>
<p>You must now remove those values that lie outside those normal ranges. There are a common data abnormalities which are:</p>
<ol>
<li>Outliers</li>
<li>Missing values</li>
</ol>
<p>Some examples are: Taxi fares with negative values, coordinates that plot on the ocean, Null or NaN values, and many more.</p>
<p>You want to be cleaning your data BEFORE training your model. If not, there will be unnecessary noise. You'll end up with a few lesser rows than your original training set.</p>
<p>However, DO NOT CLEAN YOUR TESTING SET. The testing set is supposed to be untouched, aside from feature engineering.</p>
<h1>Feature Engineering</h1>
<hr />
<p>After looking at your data, you will definitely need to engineer some features on your own. Doing this allows you to find features that correlated more strongly with the value you're predicting.</p>
<p>We have 2 types of data type: Continuous and Discrete, and each of the data types have to be handled differently when doing feature engineering</p>
<p>Continuous data runs in infinite ranges, while Discrete data are things that fall into categories.</p>
<p>Example of Continuous data are prices, age and temperature. Strings are also considered Continuous data</p>
<p>Examples of Discrete data are gender and types of cars.</p>
<h3>Continuous Data Feature Engineering</h3>
<p>For continuous data, we can bin the data into intervals.</p>
<p>An example would be age group, where individual ages might be too scattered, but by grouping them in multiples of 5s or 10s, you might get a better representation.</p>
<pre>[code lang="text"] 51-55 = Group 1 
56-60 = Group 2 
61-65 = Group 3 
[53, 55, 56, 59, 60, 61, 62, 64] = [1, 1, 2, 2, 2, 3, 3, 3] [/code]</pre>
<p>For strings, we need to extract out relevant data that can be represented in numeric form. One example is parsing of the dates. In your original data, you're given a datetime string, which isn't helpful at all. You'll want to engineer features such as the day of the week, the hour, month, year, or even the seconds. These numerical features are much more helpful as compared to a string value.</p>
<h3>Discrete Data Feature Engineering</h3>
<p>For discrete data, the categories in the data can be one-hot-encoded. The reason why we do that is because when we change the categories to numeric values, we don't want to accidentally imply meaning and hierarchy between the numbers.</p>
<p>For example if we have 5 different categories of cars, and we change them numerically to 0, 1, 2, 3, 4, the machine may end up learning that the 4th category is more important than the 0th category, based on the simple fact that 4 is greater than 0.</p>
<p>So to prevent this problem of false importance, we use one-hot-encoding. The idea of one-hot-encoding can be visually represented as such</p>
<p><img class="alignnone  wp-image-170" src="https://chanjinhao.files.wordpress.com/2018/12/mtimfxh.png?w=300" alt="" width="560" height="220" /></p>
<p>This way, the categories are represented as 1s and 0s, which minimizes the possibility of learning false importance.</p>
<p>We should take note that one-hot-encoding should be done on your train and test set combined. The reason why we want to do this is so we don't miss out data that is in the test and not in the train, vice-versa. If there is missing data, and we perform one-hot-encoding separately on the train and test, we will end up with missing columns, as one-hot-encoding does not generate them.</p>
<h3>Feature Interaction</h3>
<p>There is also Feature interaction, where two or more features are correlated or have interactions between each other. We can capture this interaction between two features by creating a new feature, which is a multiplication of these two correlated features.</p>
<h1>Splitting of Data</h1>
<hr />
<p>Once you've cleaned your data and created your features, you can now start training your model! But before you do that, you first need to split your data in a train and test set. This is for performing a validation test to evaluate your model.</p>
<p><code>X_train, X_test, y_train, y_test = train_test_split(df_train, y, test_size=0.2)</code></p>
<p>Where <code>y</code> is your target value to predict.</p>
<p>The way you use these values are:</p>
<ol>
<li><code>X_train</code> and <code>y_train</code> for training the model</li>
<li>Feed <code>X_test</code> to your model</li>
<li>Evaluate the output with <code>y_test</code></li>
</ol>
<h1>Scaling Data</h1>
<hr />
<p>Because not all of your data will be in the same scale, we have to normalize them all to be of the same scale.</p>
<p>For example, the scale for age can range from 0-90, while a pay range can go from 2000 - 10,000. This is bad for machine learning, because the model might attribute a hidden (but wrong) meaning to this difference in range.</p>
<p>0 - 90 has a small range, while 2000 - 10,000 has a larger range.</p>
<p>How we scale this is by using sklearn packages such as MinMax scaling.</p>
<p>A potential problem to scaling is having data leakage, where we learn some attributes from the testing data set into the training dataset.</p>
<p>How we overcome the problem of data leakage is to perform fit-transform on the training set, and only perform transform on your testing set</p>
<h1>Training</h1>
<hr />
<p>You got to first identify if you're solving a classification or a regression problem, and a supervised or unsupervised problem.</p>
<p><code>sklearn</code> provides a wide range of models for you to pick from.</p>
<p>Models for Supervised learning in <code>sklearn</code>: <a href="http://scikit-learn.org/stable/supervised_learning.html" target="_blank" rel="noopener">http://scikit-learn.org/stable/supervised_learning.html</a></p>
<p>Models for Unsupervised learning in <code>sklearn</code>: <a href="http://scikit-learn.org/stable/unsupervised_learning.html" target="_blank" rel="noopener">http://scikit-learn.org/stable/unsupervised_learning.html</a></p>
<p>There's an overpowered model right now called XGBoost, but I highly recommend using it AFTER you've played around with other models. This is to allow you to have an understanding of how other models work, because XGBoost is definitely not a silver bullet.</p>
<p>Installing XGBoost is a little bit tricky, because its an external library.</p>
<p>If you're using Windows, these are the steps I followed: <a href="https://www.ibm.com/developerworks/community/blogs/jfp/entry/Installing_XGBoost_For_Anaconda_on_Windows?lang=en" target="_blank" rel="noopener">https://www.ibm.com/developerworks/community/blogs/jfp/entry/Installing_XGBoost_For_Anaconda_on_Windows?lang=en</a></p>
<p>And the Linux version:</p>
<pre>[code lang="text"]
$ pip install xgboost
$ git clone https://github.com/dmlc/xgboost# cd xgboost-master
$ make
$ cd python-package/
$ python setup.py install
[/code]</pre>
<p>You can now <code>import xgboost</code></p>
<p>See how much easier it is on Linux.</p>
<h1>Validation</h1>
<hr />
<p>Once your model is trained, you would need to validate the output with <code>y_test</code>. <code>y_test</code> contains the true values, while your model outputs a set of predicted values.</p>
<p>Again, <code>sklearn</code> provides a suite of tools for performing evaluation, depending on what model you were using: <a href="http://scikit-learn.org/stable/modules/model_evaluation.html" target="_blank" rel="noopener">http://scikit-learn.org/stable/modules/model_evaluation.html</a></p>
<p>If you get a bad score here, you'll want to revisit your feature engineering, or data cleaning again to see what you can do differently. Remember, more features != better model!</p>
<h1>Prediction</h1>
<hr />
<p>Pump in the testing set into your model you trained, and get a set of output values. There'll be no evaluation on your side here. Evaluation will be done by Kaggle once you submit them. This is essentially your answer to their problem.</p>
<h1>Writing to CSV</h1>
<hr />
<p>Kaggle usually provides a file called <code>sample_submission.csv</code> to show you the format with the competition requires for submission.</p>
<p>Transform your answers to fit into that model, then write the answers to CSV for submission</p>
<p><code>​​​​​df.to_csv("my_submission.csv", index=False)</code></p>
<p>I notice that you'll want to include <code>index=False</code> to exclude the row numbers in the dataframe</p>
<h1>Submit Your Entry</h1>
<hr />
<p>That's it! Go on and submit your entry to Kaggle, and see how you rank against other Kagglers. Don't be disheartened if you didn't perform well, it takes a few iterations to improve your model.</p>
<p>Also, don't be afraid to read up on other people's kernels to gain inspiration!</p>

<!-- wp:image -->
<figure class="wp-block-image"><img alt="" /></figure>
<!-- /wp:image -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>93</wp:post_id>
		<wp:post_date>2018-12-16 21:33:18</wp:post_date>
		<wp:post_date_gmt>2018-12-16 13:33:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>kaggle-boiler-plate</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="data-science"><![CDATA[Data Science]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1544996164]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[25526412520]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Software Defined Networking (SDN)</title>
		<link>http://chanjinhao.com/2018/12/23/software-defined-networking-sdn/</link>
		<pubDate>Sun, 23 Dec 2018 02:29:15 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?p=103</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>What is an SDN</h1>

<hr />

Software Defined Networking is a way of abstracting away the control logic of networking and packet switching away from the physical switches, and passing that control to a SDN Controller.

The main idea of this is to allow the control to perform decision making on what to do with the packets on the switches behalf.

<h1>Components and Architecture of a SDN</h1>

<hr />

<img class="alignnone size-full wp-image-105" src="https://chanjinhao.files.wordpress.com/2018/11/untitled-diagram-1.png" alt="Untitled Diagram (1)" width="686" height="406" />

It'll make more sense when the flow is explained bottom up, from the infrastructure layer.

<strong><span style="text-decoration:underline;">Infrastructure layer (Data Plane)</span></strong>

This is where your physical switches are. The packets from the network, be it intranet or internet, flows through these switches. Conventionally, a dedicated software will be running on each of the switches, deciding what do with the each packet that passes through them.

Now, instead of the switches making the decision, the control is passed to the Control layer. This means that the switches will have to query the SDN Controller about what action to take for each packet.

But it's not that dumb to query the controller for every single packet. The SDN Switch has a table which stores a set of rules as to what action to perform for which packet. Only when a packet does not match any rows on the table, does the SDN Switch query the controller.

The SDN Switch gets the information from the SDN Controller via Southbound protocols, such as Openflow. (We'll cover that later)

<strong><span style="text-decoration:underline;">Control layer (Control Plane)</span></strong>

The SDN Controller acts as the brains of the system. You can think of it as the CPU, where it brokers requests from the hardware to the application, vice-versa.

The applications are able to push their desired changes down to the controller, where the controller disseminates the changes down to the SDN Switches via Openflow.

One scenario might be a change in firewall rules done on a firewall application. This change is then push down to the SDN Controller, and down to the SDN Switches.

An example of an SDN Controller is <a href="https://github.com/floodlight/floodlight">Floodlight </a>

<span style="text-decoration:underline;"><strong>Application layer</strong></span>

The application layer where all your applications sit. Before SDN, they used to sit on the physical switch itself. That made it tedious to execute updates or changes to the software on the switch when you have multiple switches.

With SDN, these applications are taken out of the switch, and resides elsewhere. These applications can also be virtualized via a concept known as Network Functions Virtualization (NFV). NFV is just another way of describing virtualizing Networking Software, such as firewalls and IDS systems.

&nbsp;

North-Bound API (OpenDayLight)

South-Bound API (Openflow)

<h1>Benefits of a SDN</h1>

<hr />

In the past, your network topology was defined by your physical switches. Now that the applications have been extracted out the switches, your network topology is effectively defined by your software (hence the name Software Defined Network).

This gives you more control the of switches, and the ease of configuring them.

One draw back of SDN is the introduction of a single point of failure. Although it does give you more granular security by controlling each SDN Switch, the bottle neck lies in the SDN Controller.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>103</wp:post_id>
		<wp:post_date>2018-12-23 10:29:15</wp:post_date>
		<wp:post_date_gmt>2018-12-23 02:29:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>software-defined-networking-sdn</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="networking"><![CDATA[Networking]]></category>
		<category domain="post_tag" nicename="sdn"><![CDATA[SDN]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[25775692626]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1545548344]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>1_zy1qfb9affzz66yxxoi2aw1</title>
		<link>http://chanjinhao.com/1_zy1qfb9affzz66yxxoi2aw1/</link>
		<pubDate>Mon, 10 Dec 2018 02:35:45 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2018/12/1_zy1qfb9affzz66yxxoi2aw1.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>190</wp:post_id>
		<wp:post_date>2018-12-10 10:35:45</wp:post_date>
		<wp:post_date_gmt>2018-12-10 02:35:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>1_zy1qfb9affzz66yxxoi2aw1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2018/12/1_zy1qfb9affzz66yxxoi2aw1.gif</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/12/1_zy1qfb9affzz66yxxoi2aw1.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:581;s:6:"height";i:580;s:4:"file";s:102:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/12/1_zy1qfb9affzz66yxxoi2aw1.gif";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:97221;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>convolution_of_box_signal_with_itself2</title>
		<link>http://chanjinhao.com/convolution_of_box_signal_with_itself2/</link>
		<pubDate>Mon, 10 Dec 2018 07:33:53 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2018/12/convolution_of_box_signal_with_itself2.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>192</wp:post_id>
		<wp:post_date>2018-12-10 15:33:53</wp:post_date>
		<wp:post_date_gmt>2018-12-10 07:33:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>convolution_of_box_signal_with_itself2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2018/12/convolution_of_box_signal_with_itself2.gif</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/12/convolution_of_box_signal_with_itself2.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:468;s:6:"height";i:147;s:4:"file";s:115:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/12/convolution_of_box_signal_with_itself2.gif";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:84640;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>screen-shot-2016-07-24-at-11-25-13-pm</title>
		<link>http://chanjinhao.com/screen-shot-2016-07-24-at-11-25-13-pm/</link>
		<pubDate>Mon, 10 Dec 2018 07:46:06 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2018/12/screen-shot-2016-07-24-at-11-25-13-pm.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>193</wp:post_id>
		<wp:post_date>2018-12-10 15:46:06</wp:post_date>
		<wp:post_date_gmt>2018-12-10 07:46:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>screen-shot-2016-07-24-at-11-25-13-pm</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2018/12/screen-shot-2016-07-24-at-11-25-13-pm.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/12/screen-shot-2016-07-24-at-11-25-13-pm.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:127;s:6:"height";i:115;s:4:"file";s:114:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/12/screen-shot-2016-07-24-at-11-25-13-pm.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:5827;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>screen-shot-2016-07-24-at-11-25-13-pm1</title>
		<link>http://chanjinhao.com/screen-shot-2016-07-24-at-11-25-13-pm1/</link>
		<pubDate>Mon, 10 Dec 2018 07:46:44 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2018/12/screen-shot-2016-07-24-at-11-25-13-pm1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>194</wp:post_id>
		<wp:post_date>2018-12-10 15:46:44</wp:post_date>
		<wp:post_date_gmt>2018-12-10 07:46:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>screen-shot-2016-07-24-at-11-25-13-pm1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2018/12/screen-shot-2016-07-24-at-11-25-13-pm1.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/12/screen-shot-2016-07-24-at-11-25-13-pm1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:127;s:6:"height";i:115;s:4:"file";s:115:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/12/screen-shot-2016-07-24-at-11-25-13-pm1.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:5827;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>screen-shot-2016-07-24-at-11-25-24-pm</title>
		<link>http://chanjinhao.com/screen-shot-2016-07-24-at-11-25-24-pm/</link>
		<pubDate>Mon, 10 Dec 2018 07:46:46 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2018/12/screen-shot-2016-07-24-at-11-25-24-pm.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>195</wp:post_id>
		<wp:post_date>2018-12-10 15:46:46</wp:post_date>
		<wp:post_date_gmt>2018-12-10 07:46:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>screen-shot-2016-07-24-at-11-25-24-pm</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2018/12/screen-shot-2016-07-24-at-11-25-24-pm.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/12/screen-shot-2016-07-24-at-11-25-24-pm.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:74;s:6:"height";i:63;s:4:"file";s:114:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/12/screen-shot-2016-07-24-at-11-25-24-pm.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:3961;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>screen-shot-2016-07-24-at-11-25-13-pm2</title>
		<link>http://chanjinhao.com/screen-shot-2016-07-24-at-11-25-13-pm2/</link>
		<pubDate>Mon, 10 Dec 2018 07:47:21 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2018/12/screen-shot-2016-07-24-at-11-25-13-pm2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>196</wp:post_id>
		<wp:post_date>2018-12-10 15:47:21</wp:post_date>
		<wp:post_date_gmt>2018-12-10 07:47:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>screen-shot-2016-07-24-at-11-25-13-pm2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2018/12/screen-shot-2016-07-24-at-11-25-13-pm2.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/12/screen-shot-2016-07-24-at-11-25-13-pm2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:127;s:6:"height";i:115;s:4:"file";s:115:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/12/screen-shot-2016-07-24-at-11-25-13-pm2.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:5827;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>screen-shot-2016-07-24-at-11-25-24-pm1</title>
		<link>http://chanjinhao.com/screen-shot-2016-07-24-at-11-25-24-pm1/</link>
		<pubDate>Mon, 10 Dec 2018 07:48:17 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2018/12/screen-shot-2016-07-24-at-11-25-24-pm1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>197</wp:post_id>
		<wp:post_date>2018-12-10 15:48:17</wp:post_date>
		<wp:post_date_gmt>2018-12-10 07:48:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>screen-shot-2016-07-24-at-11-25-24-pm1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2018/12/screen-shot-2016-07-24-at-11-25-24-pm1.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/12/screen-shot-2016-07-24-at-11-25-24-pm1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:74;s:6:"height";i:63;s:4:"file";s:115:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/12/screen-shot-2016-07-24-at-11-25-24-pm1.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:3961;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>convolution_schematic</title>
		<link>http://chanjinhao.com/convolution_schematic/</link>
		<pubDate>Mon, 10 Dec 2018 07:52:58 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2018/12/convolution_schematic.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>198</wp:post_id>
		<wp:post_date>2018-12-10 15:52:58</wp:post_date>
		<wp:post_date_gmt>2018-12-10 07:52:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>convolution_schematic</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2018/12/convolution_schematic.gif</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/12/convolution_schematic.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:268;s:6:"height";i:196;s:4:"file";s:98:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/12/convolution_schematic.gif";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:32176;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>screen-shot-2016-08-05-at-11-03-00-pm</title>
		<link>http://chanjinhao.com/screen-shot-2016-08-05-at-11-03-00-pm/</link>
		<pubDate>Mon, 10 Dec 2018 07:58:36 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2018/12/screen-shot-2016-08-05-at-11-03-00-pm.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>200</wp:post_id>
		<wp:post_date>2018-12-10 15:58:36</wp:post_date>
		<wp:post_date_gmt>2018-12-10 07:58:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>screen-shot-2016-08-05-at-11-03-00-pm</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2018/12/screen-shot-2016-08-05-at-11-03-00-pm.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/12/screen-shot-2016-08-05-at-11-03-00-pm.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:342;s:6:"height";i:562;s:4:"file";s:114:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/12/screen-shot-2016-08-05-at-11-03-00-pm.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:102649;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>screen-shot-2016-08-07-at-6-18-19-pm</title>
		<link>http://chanjinhao.com/screen-shot-2016-08-07-at-6-18-19-pm/</link>
		<pubDate>Mon, 10 Dec 2018 08:11:11 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2018/12/screen-shot-2016-08-07-at-6-18-19-pm.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>201</wp:post_id>
		<wp:post_date>2018-12-10 16:11:11</wp:post_date>
		<wp:post_date_gmt>2018-12-10 08:11:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>screen-shot-2016-08-07-at-6-18-19-pm</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2018/12/screen-shot-2016-08-07-at-6-18-19-pm.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/12/screen-shot-2016-08-07-at-6-18-19-pm.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:748;s:6:"height";i:280;s:4:"file";s:113:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/12/screen-shot-2016-08-07-at-6-18-19-pm.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:100054;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>screen-shot-2016-08-10-at-3-38-39-am</title>
		<link>http://chanjinhao.com/screen-shot-2016-08-10-at-3-38-39-am/</link>
		<pubDate>Mon, 10 Dec 2018 08:43:29 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2018/12/screen-shot-2016-08-10-at-3-38-39-am.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>203</wp:post_id>
		<wp:post_date>2018-12-10 16:43:29</wp:post_date>
		<wp:post_date_gmt>2018-12-10 08:43:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>screen-shot-2016-08-10-at-3-38-39-am</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2018/12/screen-shot-2016-08-10-at-3-38-39-am.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/12/screen-shot-2016-08-10-at-3-38-39-am.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:494;s:6:"height";i:421;s:4:"file";s:113:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/12/screen-shot-2016-08-10-at-3-38-39-am.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:66489;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>screen-shot-2016-08-10-at-3-42-35-am</title>
		<link>http://chanjinhao.com/screen-shot-2016-08-10-at-3-42-35-am/</link>
		<pubDate>Mon, 10 Dec 2018 08:45:29 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2018/12/screen-shot-2016-08-10-at-3-42-35-am.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>204</wp:post_id>
		<wp:post_date>2018-12-10 16:45:29</wp:post_date>
		<wp:post_date_gmt>2018-12-10 08:45:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>screen-shot-2016-08-10-at-3-42-35-am</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2018/12/screen-shot-2016-08-10-at-3-42-35-am.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/12/screen-shot-2016-08-10-at-3-42-35-am.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:401;s:6:"height";i:201;s:4:"file";s:113:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/12/screen-shot-2016-08-10-at-3-42-35-am.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:38204;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>screen-shot-2016-08-08-at-2-26-09-am</title>
		<link>http://chanjinhao.com/screen-shot-2016-08-08-at-2-26-09-am/</link>
		<pubDate>Mon, 10 Dec 2018 08:49:33 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2018/12/screen-shot-2016-08-08-at-2-26-09-am.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>205</wp:post_id>
		<wp:post_date>2018-12-10 16:49:33</wp:post_date>
		<wp:post_date_gmt>2018-12-10 08:49:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>screen-shot-2016-08-08-at-2-26-09-am</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2018/12/screen-shot-2016-08-08-at-2-26-09-am.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/12/screen-shot-2016-08-08-at-2-26-09-am.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:748;s:6:"height";i:178;s:4:"file";s:113:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/12/screen-shot-2016-08-08-at-2-26-09-am.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:71267;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>screen-shot-2016-08-10-at-12-58-30-pm</title>
		<link>http://chanjinhao.com/screen-shot-2016-08-10-at-12-58-30-pm/</link>
		<pubDate>Mon, 10 Dec 2018 09:12:17 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2018/12/screen-shot-2016-08-10-at-12-58-30-pm.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>206</wp:post_id>
		<wp:post_date>2018-12-10 17:12:17</wp:post_date>
		<wp:post_date_gmt>2018-12-10 09:12:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>screen-shot-2016-08-10-at-12-58-30-pm</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2018/12/screen-shot-2016-08-10-at-12-58-30-pm.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/12/screen-shot-2016-08-10-at-12-58-30-pm.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:242;s:6:"height";i:255;s:4:"file";s:114:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/12/screen-shot-2016-08-10-at-12-58-30-pm.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:47360;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>conv_all</title>
		<link>http://chanjinhao.com/conv_all/</link>
		<pubDate>Mon, 10 Dec 2018 09:19:25 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2018/12/conv_all.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>207</wp:post_id>
		<wp:post_date>2018-12-10 17:19:25</wp:post_date>
		<wp:post_date_gmt>2018-12-10 09:19:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>conv_all</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2018/12/conv_all.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/12/conv_all.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:748;s:6:"height";i:424;s:4:"file";s:85:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/12/conv_all.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:216271;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>1-AZsSoXb8lc5N6mnhqX5JCg</title>
		<link>http://chanjinhao.com/1-azssoxb8lc5n6mnhqx5jcg/</link>
		<pubDate>Thu, 27 Dec 2018 04:38:45 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2018/12/1-AZsSoXb8lc5N6mnhqX5JCg.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>225</wp:post_id>
		<wp:post_date>2018-12-27 12:38:45</wp:post_date>
		<wp:post_date_gmt>2018-12-27 04:38:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>1-azssoxb8lc5n6mnhqx5jcg</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2018/12/1-AZsSoXb8lc5N6mnhqX5JCg.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:800;s:6:"height";i:305;s:4:"file";s:101:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/12/1-AZsSoXb8lc5N6mnhqX5JCg.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:45914;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/12/1-AZsSoXb8lc5N6mnhqX5JCg.png]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>1-whSa8rY4sgFQj1rEcWr8Ag</title>
		<link>http://chanjinhao.com/1-whsa8ry4sgfqj1recwr8ag/</link>
		<pubDate>Thu, 27 Dec 2018 04:38:47 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2018/12/1-whSa8rY4sgFQj1rEcWr8Ag.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>226</wp:post_id>
		<wp:post_date>2018-12-27 12:38:47</wp:post_date>
		<wp:post_date_gmt>2018-12-27 04:38:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>1-whsa8ry4sgfqj1recwr8ag</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2018/12/1-whSa8rY4sgFQj1rEcWr8Ag.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/12/1-whSa8rY4sgFQj1rEcWr8Ag.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:800;s:6:"height";i:369;s:4:"file";s:101:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/12/1-whSa8rY4sgFQj1rEcWr8Ag.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:44485;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>1-AZsSoXb8lc5N6mnhqX5JCg-1</title>
		<link>http://chanjinhao.com/1-azssoxb8lc5n6mnhqx5jcg-1/</link>
		<pubDate>Thu, 27 Dec 2018 04:39:09 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2018/12/1-AZsSoXb8lc5N6mnhqX5JCg-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>227</wp:post_id>
		<wp:post_date>2018-12-27 12:39:09</wp:post_date>
		<wp:post_date_gmt>2018-12-27 04:39:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>1-azssoxb8lc5n6mnhqx5jcg-1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2018/12/1-AZsSoXb8lc5N6mnhqX5JCg-1.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/12/1-AZsSoXb8lc5N6mnhqX5JCg-1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:800;s:6:"height";i:305;s:4:"file";s:103:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/12/1-AZsSoXb8lc5N6mnhqX5JCg-1.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:45914;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Setting Up Your Own IDS</title>
		<link>http://chanjinhao.com/2018/12/30/setting-up-your-own-ids/</link>
		<pubDate>Sun, 30 Dec 2018 11:49:40 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?p=107</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Mininet Floodlight Snort</h1>

In this post, we're going to be building our own IDS setup to play around with.

This setup can be used as a POC, or to just see how an IDS works. We're going to be using 3 technologies here.

<ol>
    <li>Mininet, which is a program to create your own virtual network on your host.</li>
    <li>Snort, which is an IDS program</li>
    <li>Floodlight, which is an SDN controller</li>
</ol>

[gallery ids="110,109,108" type="rectangular" link="none"]

<h2>The Setup</h2>

We're going to setup an SDN network with 5 hosts, with host 5 sniffing traffic on host 4 using Snort.

This project will have 3 malicious actors (h1, h2, h3), a victim machine (h4) and an IDS using Snort sniffer (h5)

We will configure the network such that the 5 hosts are connected to the a switch, and the switch is connected to Floodlight SDN Controller. h1, h2 and h3 will attack h4 with a DoS attack, and h5 will be able to pick it up using Snort rules.

<h2>Setting up floodlight</h2>

[code lang=text]
git://github.com/floodlight/floodlight.git
$ cd floodlight
$ git submodule init
$ git submodule update
$ ant

$ sudo mkdir /var/lib/floodlight
$ sudo chmod 777 /var/lib/floodlight
[/code]

After you've configured Floodlight, run it with:
<code>$ java -jar target/floodlight.jar</code>

Floodlight GUI will be running on http://localhost:8080/ui/pages/index.html

<h2>Setting up mininet</h2>

Clone and install:

[code lang=text]
$ git clone git://github.com/mininet/mininet
$ cd mininet
$ sudo ./util/install.sh -a
[/code]

Mininet is now installed.

Spawn your network with the command:

<code>$ sudo mn --topo single,5 --controller=remote,ip=127.0.0.1,port=6653</code>

Spawns a single layer network, with 5 hosts connected to a switch.

The switch is connected to a remote controller, which is the floodlight service you setup earlier.

<em>Note: your port specified in this command should be <code>6653</code> and not <code>8080</code>. <code>8080</code> is used for showing the UI, <code>6653</code> is used for communicating with your switch.</em>

If your floodlight service is running on another machine, configure the <code>ip</code> and <code>port</code> accordingly.

<h2>Setting up Snort (In Ubuntu)</h2>

Before installing Snort, you have to first install DAQ

Updating your apt

[code lang=text]
$ apt-get update -y
$ apt-get upgrade -y
[/code]

Installing dependencies
<code>$ apt-get install openssh-server ethtool build-essential libpcap-dev libpcre3-dev libdumbnet-dev bison flex zlib1g-dev liblzma-dev openssl libssl-dev</code>

Grabbing DAQ source (Change the value of the version to the lastest one)

[code lang=text]
$ wget https://www.snort.org/downloads/snort/daq-2.0.6.tar.gz
$ tar xvf daq-2.0.6.tar.gz
$ cd daq-2.0.6
[/code]

Configure and install DAQ

[code lang=text]
$ ./configure &amp;&amp; make &amp;&amp; make install
[/code]

Now that you've installed DAQ, you can proceed to install Snort

Grabbing Snort source (Change the value of the version to the lastest one)

[code lang=text]
$ wget https://www.snort.org/downloads/snort/snort-2.9.8.3.tar.gz
$ tar vzf snort-2.9.8.3.tar.gz
$ cd snort-2.9.8.3
[/code]

Configure and install Snort

[code lang=text]
$ ./configure --enable-sourcefire &amp;&amp; make &amp;&amp; make install
[/code]

Link the libraries

[code lang=text]
$ ldconfig
[/code]

Creating a symbolic link to Snort binary

[code lang=text]
$ ln -s /usr/local/bin/snort /usr/sbin/snort
[/code]

Test it out!
<code>$ snort -V</code>

After Snort is up and running, you will need to create directory structures for it

[code lang=text]
$ mkdir /etc/snort

$ mkdir /etc/snort/preproc_rules

$ mkdir /etc/snort/rules

$ mkdir /var/log/snort

$ mkdir /usr/local/lib/snort_dynamicrules

$ touch /etc/snort/rules/white_list.rules

$ touch /etc/snort/rules/black_list.rules

$ touch /etc/snort/rules/local.rules

$ chmod -R 5775 /etc/snort/

$ chmod -R 5775 /var/log/snort/

$ chmod -R 5775 /usr/local/lib/snort

[/code]

<h2>Configuring Snort Rules</h2>

Download Snort rules here https://www.snort.org/downloads

Edit your <code>snort.conf</code> accordingly to remove any preprocessors you don't have

If you're having trouble, <code>$ sudo find / -type f -name snort.conf</code>

Adding a rule in <code>snort.conf</code> to catch DoS by ICMP packets

<code>alert icmp any any -&amp;gt; any any (threshold: type both, track by_dst, count 70, seconds 10; msg: "DoS by ICMP detected"; sid:1001;)</code>

<h2>Mirroring port h4 to h5 and sniff using Snort</h2>

Command to mirror h4 traffic to h5
<code>mininet$ s1 ovs-vsctl -- set Bridge "s1" mirrors=@m -- --id=@s1-eth4 get Port s1-eth4 -- --id=@s1-eth5 get Port s1-eth5 -- --id=@m create Mirror name=e4toe5 select-dst-port=@s1-eth4 output-port=@s1-eth5</code>

Now all traffic that is flowing into h4 will be mirrored onto h5, where Snort is running.

<code>mininet$ xterm h5</code>

In the new terminal spawned for h5, run:

<code>h5$ ifconfig</code> to get the adapter name

<code>h5$ snort -i &amp;lt;Adapter name&amp;gt; -c &amp;lt;snort.conf location&amp;gt; &amp;amp;</code>

h5 is now sniffing traffic on h4

<h2>Starting the attack</h2>

<code>mininet$ h1 ping -f h4</code>

This launches a barrage of ICMP packets from h1 to h4, which will subsequently be detected by h5, who is sniffing h4.

h5 will then write an alert which you should see in <code>/var/log/snort/alert</code> the message <code>"DoS by ICMP detected"</code>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>107</wp:post_id>
		<wp:post_date>2018-12-30 19:49:40</wp:post_date>
		<wp:post_date_gmt>2018-12-30 11:49:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>setting-up-your-own-ids</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="mininet"><![CDATA[Mininet]]></category>
		<category domain="category" nicename="networking"><![CDATA[Networking]]></category>
		<category domain="post_tag" nicename="sdn"><![CDATA[SDN]]></category>
		<category domain="post_tag" nicename="snort"><![CDATA[Snort]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[25995720201]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1546172371]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Pass The Hash Attack</title>
		<link>http://chanjinhao.com/2019/01/06/pass-the-hash-attack/</link>
		<pubDate>Sun, 06 Jan 2019 02:45:12 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?p=114</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Passing the Hash attack is a way of logging on to the machine without knowing the actual password of the user. It uses the hash value for authentication, instead of the plain text passwords.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This attack vector is possible in Windows, due to how they store the passwords in their system&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3> How Windows stores your passwords in memory</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>The&nbsp;Local Security Authority Subsystem Service, LSASS.exe, is a process that runs in memory, and it is responsible for performing tasks such as:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Enforcing Security Policies</li><li>Handling Login Verification </li><li>Performing Password Changes</li><li>Generating Access Tokens</li><li>Writing to Windows Security Log</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>

LSASS.exe is a crucial component for running Windows, and a forceful termination of&nbsp;LSASS.exe&nbsp;will result in the Welcome screen losing its accounts, requiring a restart of the machine.

</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>After a user logs on to the system, a variety of credentials are generated and stored in LSASS.exe, which functions as a Single-Sign-On (SSO). The SSO is to allow quick and automated user authentication for resources. These credentials includes Kerberos Tickets, NTLM Hashes, LM Hashes and clear text passwords.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Because LSASS.exe is running in memory, it should be no surprise that all these credentials and hashes are stored in memory as well. This makes it a valuable target for attackers to steal credentials.</p>
<!-- /wp:paragraph -->

<!-- wp:quote {"className":"is-style-default"} -->
<blockquote class="wp-block-quote is-style-default"><p><em>If you discover that LSASS.exe is not in C:\Windows\System32, or that it is consuming more resources than necessary, that is a cause for concern.</em></p></blockquote>
<!-- /wp:quote -->

<!-- wp:heading {"level":3} -->
<h3>Extracting Password Hash from Memory</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Since  the password hashes are all stored in memory, all we have to do is to find techniques to extract the information. There are already many existing ways to do this, the most famous being the tool <a href="https://github.com/gentilkiwi/mimikatz/wiki">Mimikatz</a>&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>One way of doing this is to dump the LSASS.exe process from memory to disk by using tools such as&nbsp;ProcDump (Which is a Microsoft Signed Binary, so it won't trigger any red flags when executed).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>After you have dumped the password hashes, there are two attack scenarios that can happen:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Decrypt the password hashes to obtain the plaintext password<ul><li>The hashes are encrypted using the Windows API&nbsp;<strong>LsaProtectMemory</strong>.&nbsp; We can simply decrypt it by calling&nbsp;<strong>LsaUnprotectMemory</strong>.</li></ul></li><li>Don't decrypt the hash, and simply pass it to the authentication mechanism (Pass the Hash Attack)<ul><li>Inject the hash to LSASS.exe and open session with the injected hash.</li><li>Implement part of the NTLM protocol for the authentication with the hash and send commands over the network with protocols like SMB, WMI, etc.</li></ul></li></ol>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Detecting a Pass The Hash Attack using Windows Event Log</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>You can detect Pass the Hash attack by reviewing your Windows Event Security Log.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A Pass the Hash attack takes places with the NTLM authentication type, and it can be seen in the Event Log with the following features:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>NTLM connection takes place</li><li>Event ID 4624 (“<em>An account was successfully logged on</em>”)</li><li>Logon Type 3&nbsp;<em>(“A user or computer logged on to this computer from the network”</em>)</li><li>Authentication Package NTLM (or by logon process name NtLmSsp)</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>These features are indicative of an NTLM login process, but it does not mean that a Pass the Hash has taken place. Further analysis, such as user behavior, allowed logon techniques and privileges assigned can tell you more.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>114</wp:post_id>
		<wp:post_date>2019-01-06 10:45:12</wp:post_date>
		<wp:post_date_gmt>2019-01-06 02:45:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pass-the-hash-attack</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="hacking"><![CDATA[Hacking]]></category>
		<category domain="post_tag" nicename="pass-the-hash"><![CDATA[Pass the hash]]></category>
		<category domain="post_tag" nicename="windows"><![CDATA[Windows]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[26220088430]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1546746111]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Text Processing</title>
		<link>http://chanjinhao.com/2019/01/13/text-processing/</link>
		<pubDate>Sun, 13 Jan 2019 10:41:38 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?p=119</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>In this post, we're going to be exploring some typical methods for text processing for machine learning. When we're talking about machine learning with text, there are several areas of interest including&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Sentiment Analysis</li><li>Question Answering</li><li>Information Retrieval</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Before we do that, we must first understand that a machine learning model only takes in numerical values, or vectors, and not strings in the text. The problem now is how do we transform the collection of strings into vectors of numbers.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There are several pre-processing steps, and we'll take a look at them below.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Tokenization</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Tokenization is splitting up the sentence into to words or phrases.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There's Sentence Tokenizing, and Word Tokenizing, both of which are apparent in what they do. We'll mostly be using Word Tokenizing to split up a sentence in its constituent words. The example below uses NLTK's word_tokenize</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>from nltk.tokenize import word_tokenize &gt;&gt;&gt; string = "Hello! I am a sentence!" &gt;&gt;&gt; word_tokenize(string ) ['Hello', '!', 'I', 'am', 'a', 'sentence', '!']</code></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Normalization</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Once the sentence has been broken up into it's words, we need to normalize it, so as to remove any unwanted meaning attached to features like capitalization. This process transforms the words, and picks out useful features.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There are several common methods for normalization:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Lemmatization</li><li>Stemming</li><li>Capitalization</li><li>Special Characters</li><li>Stopwords</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Lemmatization and Stemming are pretty similar, where they both transform the words into their generalized forms. The difference is in how they change the word.</p>
<!-- /wp:paragraph -->

<!-- wp:table -->
<table class="wp-block-table"><tbody><tr><td></td><td>Lemmatization</td><td>Stemming</td></tr><tr><td>Studying</td><td>Study</td><td>Study</td></tr><tr><td>Studies</td><td>Study</td><td>Studi</td></tr></tbody></table>
<!-- /wp:table -->

<!-- wp:paragraph -->
<p>Stemming removes any suffixes, leaving behind it's inflected word. The outcome is not always desirable as you can see, cutting the -es from Studies. One common stemmer is the Porter stemmer, which reduces the words to its 'root' form.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Lemmatization on the other hand is smarter, and uses linguistics to reduce the word to it's base meaning. 'Studies' and 'Studying' both have the same base meaning of 'Study'. However, before you can apply lemmatization, you need to have a trained dictionary for that language to discover what is the base meaning. Luckily for us, the English language has many of such dictionaries.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Capitalization and Special Characters transformation is simply turning all the words into lowercase, and removing non-alphabet characters</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>&gt;&gt;&gt; sentence = sentence.lower() &gt;&gt;&gt; sentence = re.sub('[^a-zA-Z]',' ',sentence)</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Stopwords removal is a method for removing common stopwords in a text. Stopwords carry little to no meaning to them, and are sentimentally agnostic, hence they should be removed so as not to generate too much noise in our matrix. A list of common stopwords can be found in <a href="https://gist.github.com/sebleier/554280">NLTK's collection</a></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Transforming Tokens to Vectors</h3>
<!-- /wp:heading -->

<!-- wp:heading {"level":4} -->
<h4>Bag of Words</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Once we have our collection of pre-processed tokens, we now need to transform them into features, or numeric vectors for us to fit into our model</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A Bag of Words (BoW) model is one way to quantize the text into numerical information. It is also called Text Vectorization, because we're converting a sentence into a numerical vector.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>BoW captures the counts of the words in a sentence&nbsp;</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>John likes to watch movies. Mary likes movies too.

"John","likes","to","watch","movies","Mary","likes","movies","too"

{"John":1,"likes":2,"to":1,"watch":1,"movies":2,"Mary":1,"too":1}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The downside of BoW model is that we lose word order, which is important when it comes to sentiment analysis. The ordering of the words in a sentence can produce very different meanings</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>"not all apples are bad"</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>"all apples are not bad"</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The former implies that not every single apple is bad, but there can be bad ones. The latter implies that every single apple is not bad, which means there are no bad ones.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Also, BoW  counts are not normalized, which loses another feature of word importance. Words that occur very frequently such as stopwords hold little weight if they appear multiple times, and in every document. We want words that are rare, and occur less frequently. These words will have stronger features.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>TF-IDF</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>After we have the collection of words generated from BoW, we can count the frequency of the word, and the presence of the word in a given document. This  technique is called Term-Frequency - Inverse Document Frequency (TF-IDF) model. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This is calculated by counting the number of times the word appears in all documents (TF), and the number of documents this word appears in (DF). We take the inverse of DF (IDF), because we don't want words that appear too frequently in all documents. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A word with a high TF-IDF indicates a high term frequency, low document count. This highlights important issues in a document, but that are not shared across the whole corpus</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>N-Grams</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The BoW model grows linearly with each distinct vocabulary. With every new word added, the vector size increases by 1. This leads to an extremely spares and high dimension vector. To attempt to reduce the dimensions, we group words together into what we call N-grams, where N is the number of words in the group.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>N-grams are an improvement because it reduces the dimensionality of the vector, and it also captures context from the surrounding words.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Below shows a 2-gram representation of a sentence:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>John likes to watch movies. Mary likes movies too.

"John likes"
"likes to"
"to watch"
"watch movies"
"movies Mary"
"Mary likes"
"likes movies"
"movies too"</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>We should be careful however, in choosing the appropriate value of N. If we generate too much N-grams (N is small), we end up generating too much noise.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>After the N-gram collection is generated, we can future refine the selection with the heuristic:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Remove high and low frequency n-grams</li><li>High Frequency n-grams = Stop words</li><li>Low Frequency n-grams = Rare words</li><li>Keep medium frequency n-grams</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Training a Model with the Vectors</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Once we have pre-processed the sentences to tokens, and vectorized them into numerical values, we can use those vectors to train our models to answer our questions.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>119</wp:post_id>
		<wp:post_date>2019-01-13 18:41:38</wp:post_date>
		<wp:post_date_gmt>2019-01-13 10:41:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>text-processing</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="data-science"><![CDATA[Data Science]]></category>
		<category domain="post_tag" nicename="text-processing"><![CDATA[Text processing]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[26485213500]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1547384242]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>1-whSa8rY4sgFQj1rEcWr8Ag-1</title>
		<link>http://chanjinhao.com/1-whsa8ry4sgfqj1recwr8ag-1/</link>
		<pubDate>Thu, 27 Dec 2018 04:39:41 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2018/12/1-whSa8rY4sgFQj1rEcWr8Ag-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>228</wp:post_id>
		<wp:post_date>2018-12-27 12:39:41</wp:post_date>
		<wp:post_date_gmt>2018-12-27 04:39:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>1-whsa8ry4sgfqj1recwr8ag-1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2018/12/1-whSa8rY4sgFQj1rEcWr8Ag-1.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/12/1-whSa8rY4sgFQj1rEcWr8Ag-1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:800;s:6:"height";i:369;s:4:"file";s:103:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/12/1-whSa8rY4sgFQj1rEcWr8Ag-1.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:44485;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>2019</title>
		<link>http://chanjinhao.com/2019/01/01/2019/</link>
		<pubDate>Tue, 01 Jan 2019 09:32:15 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?p=233</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>This is a post that's not technical, but I feel that it's important for me to put this down here.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>2019 will be a year of learning and improvement. Although learning and improving is something I've always aimed to do, whats different this time is how i'm framing my objective.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I feel that in the past, my motivations for improving myself has been relative to someone else, and often times, that someone else is an unrealistic comparison. For example, I would constantly compare my performance against someone who has been in the field for many years. Obviously, this would bring about disastrous and demoralizing results. And many a times, I have felt this way.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This year, I will frame it in a different way. Although I will be comparing my results absolute results with the professionals, I would place more emphasis on my personal results i.e. what I have learnt, how have I improved personally. And this blog will serve as a great medium for me to note down my lessons.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This seems like an obvious thing to do really, but for a competitive personality like myself, I need to constantly remind myself that it's not the end that matters, but the learning journey. I read a quote somewhere that says "You never lose, you only win or learn.", and that's the attitude I will be taking.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Don't be too hard on yourself!</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>233</wp:post_id>
		<wp:post_date>2019-01-01 17:32:15</wp:post_date>
		<wp:post_date_gmt>2019-01-01 09:32:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>2019</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1546335140]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[26056334631]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>image</title>
		<link>http://chanjinhao.com/image/</link>
		<pubDate>Thu, 03 Jan 2019 01:18:26 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/01/image.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>238</wp:post_id>
		<wp:post_date>2019-01-03 09:18:26</wp:post_date>
		<wp:post_date_gmt>2019-01-03 01:18:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>image</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/01/image.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/01/image.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:516;s:6:"height";i:278;s:4:"file";s:82:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/01/image.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:17533;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>image</title>
		<link>http://chanjinhao.com/image/</link>
		<pubDate>Thu, 03 Jan 2019 01:18:26 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/01/image.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>239</wp:post_id>
		<wp:post_date>2019-01-03 09:18:26</wp:post_date>
		<wp:post_date_gmt>2019-01-03 01:18:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>image</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/01/image.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/01/image.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:516;s:6:"height";i:278;s:4:"file";s:82:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/01/image.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:17533;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>output_9_1</title>
		<link>http://chanjinhao.com/output_9_1/</link>
		<pubDate>Thu, 03 Jan 2019 01:20:42 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/01/output_9_1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>241</wp:post_id>
		<wp:post_date>2019-01-03 09:20:42</wp:post_date>
		<wp:post_date_gmt>2019-01-03 01:20:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>output_9_1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/01/output_9_1.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/01/output_9_1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:402;s:6:"height";i:278;s:4:"file";s:87:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/01/output_9_1.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:14012;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>output_9_3</title>
		<link>http://chanjinhao.com/output_9_3/</link>
		<pubDate>Thu, 03 Jan 2019 01:20:52 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/01/output_9_3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>242</wp:post_id>
		<wp:post_date>2019-01-03 09:20:52</wp:post_date>
		<wp:post_date_gmt>2019-01-03 01:20:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>output_9_3</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/01/output_9_3.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/01/output_9_3.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:516;s:6:"height";i:278;s:4:"file";s:87:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/01/output_9_3.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:17533;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>1280px-regularization</title>
		<link>http://chanjinhao.com/1280px-regularization/</link>
		<pubDate>Sun, 06 Jan 2019 02:03:55 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/01/1280px-regularization.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>248</wp:post_id>
		<wp:post_date>2019-01-06 10:03:55</wp:post_date>
		<wp:post_date_gmt>2019-01-06 02:03:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>1280px-regularization</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/01/1280px-regularization.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/01/1280px-regularization.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1280;s:6:"height";i:1233;s:4:"file";s:98:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/01/1280px-regularization.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:67936;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>rss</title>
		<link>http://chanjinhao.com/rss-2/</link>
		<pubDate>Sun, 06 Jan 2019 02:14:24 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/01/rss.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>249</wp:post_id>
		<wp:post_date>2019-01-06 10:14:24</wp:post_date>
		<wp:post_date_gmt>2019-01-06 02:14:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>rss-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/01/rss.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/01/rss.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:454;s:6:"height";i:95;s:4:"file";s:80:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/01/rss.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:9376;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ridge</title>
		<link>http://chanjinhao.com/ridge/</link>
		<pubDate>Sun, 06 Jan 2019 02:24:15 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/01/ridge.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>250</wp:post_id>
		<wp:post_date>2019-01-06 10:24:15</wp:post_date>
		<wp:post_date_gmt>2019-01-06 02:24:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>ridge</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/01/ridge.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/01/ridge.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:553;s:6:"height";i:93;s:4:"file";s:82:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/01/ridge.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:12494;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>lasso</title>
		<link>http://chanjinhao.com/lasso/</link>
		<pubDate>Sun, 06 Jan 2019 02:30:30 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/01/lasso.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>251</wp:post_id>
		<wp:post_date>2019-01-06 10:30:30</wp:post_date>
		<wp:post_date_gmt>2019-01-06 02:30:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>lasso</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/01/lasso.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/01/lasso.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:547;s:6:"height";i:88;s:4:"file";s:82:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/01/lasso.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:12444;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>dropout</title>
		<link>http://chanjinhao.com/dropout/</link>
		<pubDate>Sun, 06 Jan 2019 03:31:46 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/01/dropout.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>252</wp:post_id>
		<wp:post_date>2019-01-06 11:31:46</wp:post_date>
		<wp:post_date_gmt>2019-01-06 03:31:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>dropout</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/01/dropout.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/01/dropout.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:800;s:6:"height";i:398;s:4:"file";s:84:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/01/dropout.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:159899;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>roc_intro3</title>
		<link>http://chanjinhao.com/roc_intro3/</link>
		<pubDate>Thu, 10 Jan 2019 05:13:46 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/01/roc_intro3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>256</wp:post_id>
		<wp:post_date>2019-01-10 13:13:46</wp:post_date>
		<wp:post_date_gmt>2019-01-10 05:13:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>roc_intro3</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/01/roc_intro3.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/01/roc_intro3.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:289;s:6:"height";i:279;s:4:"file";s:87:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/01/roc_intro3.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:3787;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>roc-curves</title>
		<link>http://chanjinhao.com/roc-curves/</link>
		<pubDate>Thu, 10 Jan 2019 05:25:42 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/01/roc-curves.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>257</wp:post_id>
		<wp:post_date>2019-01-10 13:25:42</wp:post_date>
		<wp:post_date_gmt>2019-01-10 05:25:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>roc-curves</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/01/roc-curves.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/01/roc-curves.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:524;s:6:"height";i:514;s:4:"file";s:87:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/01/roc-curves.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:12418;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>2</title>
		<link>http://chanjinhao.com/2/</link>
		<pubDate>Sun, 13 Jan 2019 10:12:20 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/01/2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>260</wp:post_id>
		<wp:post_date>2019-01-13 18:12:20</wp:post_date>
		<wp:post_date_gmt>2019-01-13 10:12:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/01/2.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/01/2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:265;s:6:"height";i:137;s:4:"file";s:78:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/01/2.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:14524;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>3</title>
		<link>http://chanjinhao.com/3/</link>
		<pubDate>Sun, 13 Jan 2019 10:13:24 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/01/3.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>261</wp:post_id>
		<wp:post_date>2019-01-13 18:13:24</wp:post_date>
		<wp:post_date_gmt>2019-01-13 10:13:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>3</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/01/3.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/01/3.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:441;s:6:"height";i:118;s:4:"file";s:78:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/01/3.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:11953;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>4</title>
		<link>http://chanjinhao.com/4/</link>
		<pubDate>Sun, 13 Jan 2019 10:17:06 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/01/4.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>262</wp:post_id>
		<wp:post_date>2019-01-13 18:17:06</wp:post_date>
		<wp:post_date_gmt>2019-01-13 10:17:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>4</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/01/4.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/01/4.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:863;s:6:"height";i:448;s:4:"file";s:78:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/01/4.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:63491;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://chanjinhao.com/2019/01/14/270/</link>
		<pubDate>Mon, 14 Jan 2019 14:13:48 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">https://chanjinhao.wordpress.com/2019/01/14/270/</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>270</wp:post_id>
		<wp:post_date>2019-01-14 22:13:48</wp:post_date>
		<wp:post_date_gmt>2019-01-14 14:13:48</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>270</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>4</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="nav_menu" nicename="primary"><![CDATA[Primary]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_type</wp:meta_key>
			<wp:meta_value><![CDATA[post_type]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object_id</wp:meta_key>
			<wp:meta_value><![CDATA[264]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_object</wp:meta_key>
			<wp:meta_value><![CDATA[page]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_target</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_classes</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_xfn</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_menu_item_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Word2Vec</title>
		<link>http://chanjinhao.com/2019/01/20/word2vec-and-skip-gram/</link>
		<pubDate>Sun, 20 Jan 2019 06:24:48 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?p=129</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>In the field of machine learning, when we're dealing with text processing, we can't just read in the strings of the sentence to train our model. The model requires numerical vectors, and word embedding is a way to convert your sentences into these vectors.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There are various word embedding techniques for converting strings into vectors. Some of the common ones are:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Bag of Words (BoW)</li><li>TF-IDF</li><li>Word2Vec</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>I've briefly touched on BoW and TF-IDF in my previous posts. In this post, we're going to be looking at Word2Vec.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Difference between BoW</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Word2Vec is different from BoW, as BoW produces a single value for each word, which is the count of the word occurrence in the corpus. Word2Vec on the other hand, produces a vector representation for each word (as the name implies, word to vector)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Having a numerical vector tied to a single word has more benefits, as compared to a single count number. Some of the features are:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Cosine similarity between the vectors can indicate semantic similarity</li><li>The vectors produced for each word are fixed length, resulting in a low dimensional output (As compared to BoW, which results in a high dimensional and sparse vector)</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>As a result, it's much easier to perform machine learning related task to the condense Word2Vec representations of the word.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Generating the vectors</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>There are two methods for generating the vectors in Word2Vec:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Skip-gram model</li><li>Continuous Bag of Words (CBoW)</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":4} -->
<h4>Skip-gram Model</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>A Skip-gram is like N-gram, but instead of consecutive words, it skips around the given window.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In the example below, the windows size is 2, which is to say 2 words before, and 2 words after the target word. The Skip-gram model then picks out all combinations of word-pairs within this window, not only consecutive ones (like in N-grams)</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":135} -->
<figure class="wp-block-image"><img src="https://chanjinhao.files.wordpress.com/2018/11/training_data.png" alt="" class="wp-image-135" /><figcaption>http://mccormickml.com/2016/04/19/word2vec-tutorial-the-skip-gram-model/</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>In the skip-gram model, we're going to train a neural network&nbsp; with a single hidden layer to perform the following task: Given an input word, output the probabilities of each word being "close" to the input word. This closeness is defined in a window:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We're going to throw all these word pairs in our one layer neural network, and train our model to identify nearby words for a given input word. So, the higher the frequency a pair of words occur together, the model learns this co-occurrence, and is able to give a higher probability that the word exists together.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For example, in our training set, if we feed it with many instances of the word-pair ("Apple", "Orange"), because they happen to be in many sentences such as "Apples and oranges", our model picks up this co-occurrence and gives "Orange" a higher probability. On the other hand, word-pairs like ("Apple", "Day"), which could occur in a sentence, "An apple a day keeps the doctor away" occur less frequently, and model gives "Day" a lower probability.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The catch here however, is that we're going to use the weights trained in the hidden layer of the neural network as our product, instead of the output itself. We want to use the hidden layer of the trained model to give each word a vector representation</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The single hidden layer will have N number of neurons. In this example, we're going to assume N = 300, because 300 neurons was what Google used to train their Word2Vec model.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Our model will look something like this</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":139} -->
<figure class="wp-block-image"><img src="https://chanjinhao.files.wordpress.com/2018/11/presentation11.jpg" alt="" class="wp-image-139" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>In the training phase, one hot encoding is used for the input and outputs. During the validation phase, the inputs is a one hot encoding, while the output is a probability for each word indicating their "closeness"</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Once the model is trained, we're interested only in the hidden layer. The weight matrix would be of the size (Number of words X Number of neurons), and this is actually the word vector we're looking for.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":138} -->
<figure class="wp-block-image"><img src="https://chanjinhao.files.wordpress.com/2018/11/weightmatrix1.jpg" alt="" class="wp-image-138" /><figcaption>Word Vector for each word, generated from the hidden layer<br></figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The feature of this word vector generated from the weight matrix is that, for similar words, their vectors would be "close" to each other (Cosine distance). This is because of the way we used word-pairs to train the model.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Continuous Bag of Words</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>A CBoW is just a Skip-gram reversed.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The input to a CBoW is a group of context words, and the output of the model tries to predict a single word that fits into the context of all the input words.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>CBoW represents the data differently</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>"Hi fred how was the pizza?"

CBOW: 3-grams {"Hi fred how", "fred how was", "how was the", ...}

Skip-gram 1-skip 3-grams: {"Hi fred how", "Hi fred was", "fred how was", "fred how the", ...}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>or more intuitively, </p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>CBOW: The cat ate _____. 
Predict the target word, given the context. In this case, it’s “food”.

Skip-gram: ___ ___ ___ food.
Given the target what, what was the context around it? In this case, it’s “The cat ate”</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>129</wp:post_id>
		<wp:post_date>2019-01-20 14:24:48</wp:post_date>
		<wp:post_date_gmt>2019-01-20 06:24:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>word2vec-and-skip-gram</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="data-science"><![CDATA[Data Science]]></category>
		<category domain="post_tag" nicename="text-processing"><![CDATA[Text processing]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[26731092026]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1547979194]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Learning in Machine Learning</title>
		<link>http://chanjinhao.com/2019/01/27/learning-in-machine-learning/</link>
		<pubDate>Sun, 27 Jan 2019 09:14:05 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?p=146</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>When we talk about machine learning, it's mostly a black box, where everything is nicely wrapped in easy to call library functions.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Scipy, Numpy, Scikit-learn help us abstract all the nitty gritty details underlying machine learning</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In this post, we're going to see where exactly the learning takes place, and what happens when you "train" a model.<br></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>The Steps of Learning<br></h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>In every algorithm, the learning process follows this formula:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Predict -&gt; Evaluate -&gt; Tune -&gt; Repeat</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When we first throw in a bunch of features, the model initially makes blind <strong>Predictions</strong> as to what the outcome is. Because it makes shots in the dark, the <strong>Evaluation</strong> of the model is going to be very poor initially. The model then learns of its errors, and <strong>Tunes</strong> its hyper-parameters to minimize the errors. After tuning, it <strong>Repeats</strong> the process of prediction, and the cycle continues until a satisfactory Error value is obtained.<br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When training the model, the learning process comes from telling the machine where it went wrong, or the Errors it has committed. The Error is derived from the difference of the model output and the desired outcome.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>The Error/Loss Functions<br></h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>When the model makes a prediction, there is bound to be errors in the the desired outcome, and the actual outcome. The difference between the desired and actual outcome can be represented in various ways called Loss Functions.<br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Some way of calculating this Error, or Loss Function, are:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Classification Accuracy</li><li>Log Loss</li><li>Confusion Matrix<br></li><li>Root Mean Square Error (RMSE)</li><li>F1 Score</li><li>Area Under Curve (AUC)</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>These Loss functions tell the model how badly it has done in its job of prediction, and to kindly go back and tune the way it performs its predictions.<br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p> </p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>The Optimization Functions<br></h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>To tune the way it performs predictions, the model uses Optimization Functions.<br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Using the Error value produced by either one of those loss functions, the model then tunes itself using Optimization Functions, which adjusts its hyper-parameters, to try to minimize those Error values.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There are also several ways for the model to tune it hyper-parameters based on the Error value computed. I'll only be listing them, as going through each of them requires a post on its own:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Gradient Descent</li><li>Momentum</li><li>Adaptive Movement Estimation (Adam)</li><li>Adagrad</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>These Optimization algorithms are optimizing, or minimizing, the Error value calculated previously.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Repeat</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>So you got your Loss function to tell you how badly you did, and the Optimization function for your model to tweak it's parameters. Now all you have to do is to keep repeating these steps, and your model is "Learning". But wait!<br></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Over/Under Fitting</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Is there such a thing as learning too much? In the context of machine learning, this scenario is entirely possible, where you model learns too much about the training data, which results in poor performance on unseen data.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This is analogous to a student studying for his final exam, and the way he does it is to memorize every single questions and answers from the past year papers, with little contextual understanding. Obviously when he takes the final exam, the questions will be different, and he will do very poorly.<br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In machine learning, overfitting is a problem when we have over-tuned the parameters in the model to a specific data set, resulting in poor performance in other data sets.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Some ways to overcome Overfitting are:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Throw in more data (akin to studying more past year papers)<br></li><li>Cross validation during training</li><li>Early stopping to stop learning too much</li><li>Regularization that forces simplicity on your model<br></li><li>Ensemble to take the average of various models<br></li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Underfitting on the other, is not as common of a problem as overfitting. Underfitting means that your model has not learnt much, and as a result it cant perform well. This is analogous to student studying too little for his final exams.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In Overfitting, your model is too complex. In Underfitting, your model is too simple.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Conclusion<br></h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>So that's it! You've understood the abstracted underling principles of what happens when a machine "Learns", and the possibility of learning too much or too little.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For each prediction, we get an error value, and using this error value, we use optimization functions to change the way we perform our prediction.<br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p> You've also seen some ways to prevent overfitting, which is a more common problem than underfitting.<br></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>146</wp:post_id>
		<wp:post_date>2019-01-27 17:14:05</wp:post_date>
		<wp:post_date_gmt>2019-01-27 09:14:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>learning-in-machine-learning</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="data-science"><![CDATA[Data Science]]></category>
		<category domain="post_tag" nicename="machine-learning"><![CDATA[Machine learning]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1548584851]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[26978211622]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Gradient Descent</title>
		<link>http://chanjinhao.com/2019/02/03/gradient-descent/</link>
		<pubDate>Sun, 03 Feb 2019 12:10:50 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?p=164</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>A machine learning model consists of weights, and those weights, given a set of inputs, are used in the calculation process to produce a prediction. The prediction is then fed into a loss function, to calculate the the total error. Using this error, we feed it into an optimization algorithm, which goes back to the model and tweaks the weights.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This tweaking process is the learning, and how we do the tweaking is optimization algorithm.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There are a few popular ways to perform weight tweaking and model optimization, that is, how do we decide how to tweak the weights. In this post, we're going to be talking about Gradient Descent.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Gradient Descent</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>In our model, assume we have 2 weights, w1 and w2, for optimization.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We can plot all possible weights w1 and w2 can have, to all possible errors on a graph, and this will produce an bowl shape, where the bottom of the bowl corresponds to the lowest possible error.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":165} -->
<figure class="wp-block-image"><img src="https://chanjinhao.files.wordpress.com/2018/11/gradient_descent_method.png" alt="" class="wp-image-165" /><figcaption>The X and Y axis represents the values of w1 and w2.<br>The Z axis represents the values of the error.</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>What we're tweaking here are the values of&nbsp; w1 and w2. When we start shifting the values around the X and Y axis, the point on the bowl shape also shifts correspondingly. The goal here is to tweak the values of w1 and w2 such that the point on the bowl rests directly at the bottom, which has the lowest error value.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So how do we know, at each point of time on the bowl shape, where do we move to? Here's where we calculate the gradient of that point of the bowl. At the bottom of the bowl, the gradient will be 0, because it'll be a horizontal surface. All other points on the bowl will have a non-zero gradient value.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":166} -->
<figure class="wp-block-image"><img src="https://chanjinhao.files.wordpress.com/2018/11/512px-gradient_descent-svg.png" alt="" class="wp-image-166" /><figcaption>Top down view of the bowl. As we shift w1 and w2 around, the point on the bowl shifts as well. We want the point to slowly traverse towards the center, where error is minimized.</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The heuristic we'll use is to a new point such that the new gradient value on the bowl is getting smaller. This is the idea of descending gradient, until it reaches a minimum.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>One hyper-parameter we can tune in our optimization algorithm is how fast the point moves. That is to say, at each descent step, how far away should the new point be. A big step might get you to the bottom faster, but you might end up overshooting, and be perpetually oscillating around the bottom, never reaching the end. A small step on the other hand will take a much longer time. This distance of each descent step is called the <strong>learning rate</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In mathematical terms, Gradient Descent is the partial derivative of the error or loss function, with respect to the weights.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Stochastic Gradient Descent</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>The process we described above is the vanilla way of doing Gradient Descent, and it's called&nbsp;<strong>Batch Gradient Descent</strong>. This means that we take all the possible data points in a single batch, and compute the error surface, or the bowl.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In reality, the error surface isn't always so smooth in the shape of a bowl, but may consist several saddle points. Saddle points are points on the graph that are almost horizontal, but it's not the true minimum of the graph. This can lead to an issue of early stoppage, where our Gradient Descent thinks it has found the lowest point on the error surface.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":167} -->
<figure class="wp-block-image"><img src="https://chanjinhao.files.wordpress.com/2018/11/saddle_point-svg.png" alt="" class="wp-image-167" /><figcaption>The point stops at a saddle point, which has a zero gradient as well. Clearly that is not the lowest point on the graph, and our algorithm has prematurely halted.<br></figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>One of the solutions to this is&nbsp;<strong>Stochastic Gradient Descent</strong>. In batch, we take all possible data points and plot the error surface. In Stochastic, we only use one single data point, and we estimate the error surface. The result is a dynamic error surface, which decreases the chance of us encountering a saddle point.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The downside to Stochastic Gradient Descent is that we're performing an estimation of the error surface based only on 1 point, which may not be an accurate representation of the error surface.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>And the obvious solution to this is called&nbsp;<strong>Mini-Batch Gradient Descent</strong>, where instead of performing the error surface estimation based on one point, we use a group of points, or mini batches.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Conclusion</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>To recap, in this post we've talked about one of the optimization algorithm, Gradient Descent. This algorithm tells you how to tweak your weights to minimize the loss function of your model.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There are three models, each improving on the other:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Batch Gradient Descent: Plots the error surface based on all points. This might lead to early convergence on saddle points.</li><li>Stochastic Gradient Descent: Estimates and plots the error surface based on a single point. This leads to a poor estimation of the error surface.</li><li>Mini-batch Gradient Descent: Uses small batches of the data set to perform the error surface estimation.</li></ol>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>164</wp:post_id>
		<wp:post_date>2019-02-03 20:10:50</wp:post_date>
		<wp:post_date_gmt>2019-02-03 12:10:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gradient-descent</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="data-science"><![CDATA[Data Science]]></category>
		<category domain="post_tag" nicename="gradient-descent"><![CDATA[Gradient Descent]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[27232902804]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1549197660]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Model Optimizers Beyond Gradient Descent in Deep Learning</title>
		<link>http://chanjinhao.com/2019/02/10/model-optimizers-beyond-gradient-descent-in-deep-learning/</link>
		<pubDate>Sun, 10 Feb 2019 01:52:56 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?p=175</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>In this post, we're going to talk about the draw backs and constrains of a simple Gradient Descent algorithm when applied to Deep Learning models, and also talk about other optimization algorithms that aim to solve those problems.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>These problems mainly arise due to the complex error surface in Deep Learning models, where Gradient Descent is unable to perform as well.<br></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Challenges with Gradient Descent<br></h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:heading {"level":4} -->
<h4>Too many Local Minimas<br></h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>One of the problems that Gradient Descent faces is having a the algorithm converge to a local minima, instead of the true global minima. Even in a simple 2 dimensional problem, we face the issue, which gets even worse when our problem scales up to higher dimensions. But here we'll see that the local minima problem is not a huge issue with Deep Learning models.<br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The first source that contributes to a local minima is <strong>model identifiability</strong>. An identifiable model is a model that given an output, the weights or the structure of the network can be identified. In other words, there is a one-to-one mapping of parameters to out. If a model is non-identifiable, it means that for a given output, there exists more than one set of parameters that can produce it. <strong>A fully connected feed-forward neural network is non-identifiable</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":181,"width":435,"height":388} -->
<figure class="wp-block-image is-resized"><img src="https://chanjinhao.files.wordpress.com/2018/12/multi-layer_neural_network-vector2.png" alt="" class="wp-image-181" width="435" height="388" /><figcaption>Different paths and connections in the neural network may give the same output. This give rise to the characteristics of being non-identifiable.</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Why this is so is because there exists a huge number of different permutations of neuron connections within the model that will produce the same output. A network with <em>n</em> neurons has <em>n!</em> possible parameter combinations.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So why is model non-identifiability not an issue with Deep Learning models? That is because, even though the models themselves are non-identifiable, they all have the same behaviors. So given a group of non-identifiable models, they will all react the same way to the same inputs. And because of this property, there exists only a single local minima for a given non-identifiable model.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>Spurious Local Minima<br></h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Another problem that a local minima can give us is being spurious. Spurious means giving false information about itself, and a spurious local minima means that the local minima incurring a higher loss function value than the true local minima. In a sense, the local minima is lying to us, and presents itself as the global minima.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>However, there has been many studies that shows that the local minima actually exhibits similar properties to the global minima, and hence, this too isn't a problem.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Wrong Directions in Gradient Descent</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:heading {"level":4} -->
<h4>Non-Uniform and Changing Gradients<br></h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The actual challenge to Gradient Descent as we shall see, is not the problem of local minima, but finding the right path for the algorithm to descend towards.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Intuitively, the gradient is supposed to descend towards the steepest direction, or the direction that brings the gradient value closer to zero. However, just by using this simple heuristic alone can be problematic on complex error surfaces (which is a common property of Deep Learning Models).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A complex error surface has the properties of uneven gradients, and hence when we move from point to point, the gradient underneath our path may possibly change. This is opposed to a simple error surface that is circular, where the gradient is constant throughout a single direction. Having this changing gradient may result in our algorithm going towards the wrong direction, because it doesn't account for the changes that happens as we are moving.<br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Mathematically, we can quantify how much the gradient changes as we are moving by calculating the second derivative. This can be captured by calculating how much the gradient as w2 changes as we change the value of w1, and we store this value in a Hessian Matrix. And a Hessian Matrix that tells us the gradient changes as we move, is called an <strong>ill-conditioned</strong> matrix.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Calculating this Hessian matrix turns out to be extremely expensive if we do it at each step, and so to tackle the problem of changing gradients, we factor in the <strong>momentum</strong> parameter.<br></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Momentum-Based Optimization<br></h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Earlier, we stated that we may go into the wrong direction because we don't account for changing gradients, and also, if we decide to account for changing gradients using second derivatives, calculating a Hessian Matrix is extremely expensive.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The solution to this is instead of calculating the Hessian Matrix at every optimization step, we factor in the value of the previous gradient into the calculation of the current gradient. By taking into account of the previous gradient value to find the current gradient, the fluctuations of gradient value is drastically reduced.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This approach of remembering previous gradients is called <strong>Momentum</strong>. This technique is analogous to taking a moving average of stock prices the market<br></p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":178} -->
<figure class="wp-block-image"><img src="https://chanjinhao.files.wordpress.com/2018/12/movingaverage.gif" alt="" class="wp-image-178" /><figcaption>Fluctuations in the stock market price are reduced by looking at the averag</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>We can thinking of the wildly fluctuating gradients at each point being represented by the green line, while the average is represented by the yellow line. Momentum based optimizers use the yellow line to calculate the change in gradient.<br><br></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Conclusion</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>To conclude this post, we have seen how there are problems applying simple gradient descent to complex error surfaces that are present in Deep Learning models.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Local minimas are not a problem, but changing gradients due to its complex surface are a problem. To try to factor in changing surfaces, we could calculate the Hessian Matrix, but that turns out to be extremely expensive.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As a solution, we use Momentum based optimizers instead, which factors in previous gradient values to the calculation of the current gradient.<br></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>175</wp:post_id>
		<wp:post_date>2019-02-10 09:52:56</wp:post_date>
		<wp:post_date_gmt>2019-02-10 01:52:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>model-optimizers-beyond-gradient-descent-in-deep-learning</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="data-science"><![CDATA[Data Science]]></category>
		<category domain="post_tag" nicename="optimizers"><![CDATA[Optimizers]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1549764492]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[27467577263]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cropped-conv_all.png</title>
		<link>http://chanjinhao.com/cropped-conv_all-png/</link>
		<pubDate>Mon, 14 Jan 2019 14:17:52 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">https://chanjinhao.files.wordpress.com/2018/12/cropped-conv_all.png</guid>
		<description></description>
		<content:encoded><![CDATA[https://chanjinhao.files.wordpress.com/2018/12/cropped-conv_all.png]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>275</wp:post_id>
		<wp:post_date>2019-01-14 22:17:52</wp:post_date>
		<wp:post_date_gmt>2019-01-14 14:17:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>cropped-conv_all-png</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2018/12/cropped-conv_all.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_context</wp:meta_key>
			<wp:meta_value><![CDATA[site-icon]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/12/cropped-conv_all.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:512;s:6:"height";i:512;s:4:"file";s:93:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2018/12/cropped-conv_all.png";s:5:"sizes";a:4:{s:13:"site_icon-270";a:4:{s:4:"file";s:28:"cropped-conv_all-270x270.png";s:5:"width";i:270;s:6:"height";i:270;s:9:"mime-type";s:9:"image/png";}s:13:"site_icon-192";a:4:{s:4:"file";s:28:"cropped-conv_all-192x192.png";s:5:"width";i:192;s:6:"height";i:192;s:9:"mime-type";s:9:"image/png";}s:13:"site_icon-180";a:4:{s:4:"file";s:28:"cropped-conv_all-180x180.png";s:5:"width";i:180;s:6:"height";i:180;s:9:"mime-type";s:9:"image/png";}s:12:"site_icon-32";a:4:{s:4:"file";s:26:"cropped-conv_all-32x32.png";s:5:"width";i:32;s:6:"height";i:32;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:231575;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>parameters</title>
		<link>http://chanjinhao.com/parameters/</link>
		<pubDate>Tue, 29 Jan 2019 01:51:34 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/01/parameters.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>286</wp:post_id>
		<wp:post_date>2019-01-29 09:51:34</wp:post_date>
		<wp:post_date_gmt>2019-01-29 01:51:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>parameters</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/01/parameters.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/01/parameters.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:800;s:6:"height";i:547;s:4:"file";s:87:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/01/parameters.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:56923;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>1-z3jjgvetojmplfvmwiur3q</title>
		<link>http://chanjinhao.com/1-z3jjgvetojmplfvmwiur3q/</link>
		<pubDate>Tue, 29 Jan 2019 01:57:51 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/01/1-z3jjgvetojmplfvmwiur3q.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>287</wp:post_id>
		<wp:post_date>2019-01-29 09:57:51</wp:post_date>
		<wp:post_date_gmt>2019-01-29 01:57:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>1-z3jjgvetojmplfvmwiur3q</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/01/1-z3jjgvetojmplfvmwiur3q.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/01/1-z3jjgvetojmplfvmwiur3q.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:800;s:6:"height";i:565;s:4:"file";s:101:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/01/1-z3jjgvetojmplfvmwiur3q.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:29143;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>1-ulkl0nz1vfg6bmfiqpckzq</title>
		<link>http://chanjinhao.com/1-ulkl0nz1vfg6bmfiqpckzq/</link>
		<pubDate>Tue, 29 Jan 2019 01:58:33 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/01/1-ulkl0nz1vfg6bmfiqpckzq.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>288</wp:post_id>
		<wp:post_date>2019-01-29 09:58:33</wp:post_date>
		<wp:post_date_gmt>2019-01-29 01:58:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>1-ulkl0nz1vfg6bmfiqpckzq</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/01/1-ulkl0nz1vfg6bmfiqpckzq.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/01/1-ulkl0nz1vfg6bmfiqpckzq.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:800;s:6:"height";i:566;s:4:"file";s:101:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/01/1-ulkl0nz1vfg6bmfiqpckzq.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:75054;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>1-t4zrihvhtlzjzsvcx3jrjg</title>
		<link>http://chanjinhao.com/1-t4zrihvhtlzjzsvcx3jrjg/</link>
		<pubDate>Tue, 29 Jan 2019 03:18:33 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/01/1-t4zrihvhtlzjzsvcx3jrjg.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>289</wp:post_id>
		<wp:post_date>2019-01-29 11:18:33</wp:post_date>
		<wp:post_date_gmt>2019-01-29 03:18:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>1-t4zrihvhtlzjzsvcx3jrjg</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/01/1-t4zrihvhtlzjzsvcx3jrjg.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/01/1-t4zrihvhtlzjzsvcx3jrjg.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:800;s:6:"height";i:152;s:4:"file";s:101:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/01/1-t4zrihvhtlzjzsvcx3jrjg.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:22449;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>1-rfzbq614ir4zewbm3k1v0q</title>
		<link>http://chanjinhao.com/1-rfzbq614ir4zewbm3k1v0q/</link>
		<pubDate>Tue, 29 Jan 2019 03:19:03 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/01/1-rfzbq614ir4zewbm3k1v0q.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>290</wp:post_id>
		<wp:post_date>2019-01-29 11:19:03</wp:post_date>
		<wp:post_date_gmt>2019-01-29 03:19:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>1-rfzbq614ir4zewbm3k1v0q</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/01/1-rfzbq614ir4zewbm3k1v0q.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/01/1-rfzbq614ir4zewbm3k1v0q.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:800;s:6:"height";i:133;s:4:"file";s:101:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/01/1-rfzbq614ir4zewbm3k1v0q.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:23540;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>xgb1</title>
		<link>http://chanjinhao.com/xgb1/</link>
		<pubDate>Tue, 29 Jan 2019 05:45:41 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/01/xgb1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>293</wp:post_id>
		<wp:post_date>2019-01-29 13:45:41</wp:post_date>
		<wp:post_date_gmt>2019-01-29 05:45:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>xgb1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/01/xgb1.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/01/xgb1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:633;s:6:"height";i:720;s:4:"file";s:81:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/01/xgb1.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:245784;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>xgb2</title>
		<link>http://chanjinhao.com/xgb2/</link>
		<pubDate>Tue, 29 Jan 2019 05:57:23 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/01/xgb2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>294</wp:post_id>
		<wp:post_date>2019-01-29 13:57:23</wp:post_date>
		<wp:post_date_gmt>2019-01-29 05:57:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>xgb2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/01/xgb2.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/01/xgb2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:758;s:6:"height";i:658;s:4:"file";s:81:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/01/xgb2.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:35779;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>simple2_data</title>
		<link>http://chanjinhao.com/simple2_data/</link>
		<pubDate>Wed, 13 Feb 2019 06:05:12 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/02/simple2_data.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>302</wp:post_id>
		<wp:post_date>2019-02-13 14:05:12</wp:post_date>
		<wp:post_date_gmt>2019-02-13 06:05:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>simple2_data</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/02/simple2_data.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/02/simple2_data.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:598;s:6:"height";i:584;s:4:"file";s:89:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/02/simple2_data.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:31453;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>simple2_linear</title>
		<link>http://chanjinhao.com/simple2_linear/</link>
		<pubDate>Wed, 13 Feb 2019 06:06:05 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/02/simple2_linear.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>303</wp:post_id>
		<wp:post_date>2019-02-13 14:06:05</wp:post_date>
		<wp:post_date_gmt>2019-02-13 06:06:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>simple2_linear</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/02/simple2_linear.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/02/simple2_linear.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:598;s:6:"height";i:584;s:4:"file";s:91:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/02/simple2_linear.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:34540;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>simple2_0</title>
		<link>http://chanjinhao.com/simple2_0/</link>
		<pubDate>Wed, 13 Feb 2019 06:11:26 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/02/simple2_0.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>304</wp:post_id>
		<wp:post_date>2019-02-13 14:11:26</wp:post_date>
		<wp:post_date_gmt>2019-02-13 06:11:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>simple2_0</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/02/simple2_0.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/02/simple2_0.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:598;s:6:"height";i:584;s:4:"file";s:86:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/02/simple2_0.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:38246;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>simple2_1</title>
		<link>http://chanjinhao.com/simple2_1/</link>
		<pubDate>Wed, 13 Feb 2019 07:55:50 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/02/simple2_1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>305</wp:post_id>
		<wp:post_date>2019-02-13 15:55:50</wp:post_date>
		<wp:post_date_gmt>2019-02-13 07:55:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>simple2_1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/02/simple2_1.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/02/simple2_1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:598;s:6:"height";i:584;s:4:"file";s:86:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/02/simple2_1.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:126180;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>spiral.1-2.2-2-2-2-2-2</title>
		<link>http://chanjinhao.com/spiral-1-2-2-2-2-2-2-2/</link>
		<pubDate>Wed, 13 Feb 2019 08:38:57 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/02/spiral.1-2.2-2-2-2-2-2.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>306</wp:post_id>
		<wp:post_date>2019-02-13 16:38:57</wp:post_date>
		<wp:post_date_gmt>2019-02-13 08:38:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>spiral-1-2-2-2-2-2-2-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/02/spiral.1-2.2-2-2-2-2-2.gif</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/02/spiral.1-2.2-2-2-2-2-2.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:598;s:6:"height";i:584;s:4:"file";s:99:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/02/spiral.1-2.2-2-2-2-2-2.gif";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:3009244;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>spiral.1-2.2-2-2-2-2-2-1</title>
		<link>http://chanjinhao.com/spiral-1-2-2-2-2-2-2-2-1/</link>
		<pubDate>Wed, 13 Feb 2019 08:39:30 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/02/spiral.1-2.2-2-2-2-2-2-1.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>307</wp:post_id>
		<wp:post_date>2019-02-13 16:39:30</wp:post_date>
		<wp:post_date_gmt>2019-02-13 08:39:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>spiral-1-2-2-2-2-2-2-2-1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/02/spiral.1-2.2-2-2-2-2-2-1.gif</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/02/spiral.1-2.2-2-2-2-2-2-1.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:598;s:6:"height";i:584;s:4:"file";s:101:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/02/spiral.1-2.2-2-2-2-2-2-1.gif";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:3009244;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>spiral.2.2-2-2-2-2-2-2</title>
		<link>http://chanjinhao.com/spiral-2-2-2-2-2-2-2-2/</link>
		<pubDate>Wed, 13 Feb 2019 08:40:01 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/02/spiral.2.2-2-2-2-2-2-2.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>308</wp:post_id>
		<wp:post_date>2019-02-13 16:40:01</wp:post_date>
		<wp:post_date_gmt>2019-02-13 08:40:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>spiral-2-2-2-2-2-2-2-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/02/spiral.2.2-2-2-2-2-2-2.gif</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/02/spiral.2.2-2-2-2-2-2-2.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:598;s:6:"height";i:584;s:4:"file";s:99:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/02/spiral.2.2-2-2-2-2-2-2.gif";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:2645236;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>topology_base</title>
		<link>http://chanjinhao.com/topology_base/</link>
		<pubDate>Wed, 13 Feb 2019 09:37:29 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/02/topology_base.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>309</wp:post_id>
		<wp:post_date>2019-02-13 17:37:29</wp:post_date>
		<wp:post_date_gmt>2019-02-13 09:37:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>topology_base</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/02/topology_base.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/02/topology_base.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:812;s:6:"height";i:612;s:4:"file";s:90:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/02/topology_base.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:124601;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Convolutional Neural Networks</title>
		<link>http://chanjinhao.com/2019/02/17/convolutional-neural-networks/</link>
		<pubDate>Sun, 17 Feb 2019 08:11:53 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?p=152</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Convolutional Neural Networks (CNN) are neural networks that are mainly used for image recognition and image classification.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In this post, we'll break down how a CNN works under the hoods.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Backgroud</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>If we used a traditional neural network without any of the prior convolution steps, the network would not scale well at all. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>28 x 28 pixel of MNIST in a fully connected model gives use 784 input weights. Obviously, most pictures are a lot larger than 28 x 28. A 200 x 200 pixel picture would result in 120,000 input weights.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To minimize the number of input parameters, we need produce lower representations of the image that captures the most amount of information.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>CNN was inspired the visual cortex, where in the human brain, parts of the visual cortex fired when detecting edges. Furthermore, studies have shown that the visual cortex works in layers; a given layer works on the features detected in the previous layer, from lines, to contours, to shapes, to entire objects.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Vector Representation of Images<br></h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>As we know, all models only take in numerical inputs to perform their actions. Non-numerical data such as text, and in this case images, must first be converted to numerical vectors.</p>
<!-- /wp:paragraph -->

<!-- wp:media-text {"mediaId":190,"mediaType":"image"} -->
<div class="wp-block-media-text alignwide"><figure class="wp-block-media-text__media"><img src="https://chanjinhao.files.wordpress.com/2018/12/1_zy1qfb9affzz66yxxoi2aw1.gif" alt="" class="wp-image-190" /></figure><div class="wp-block-media-text__content"><!-- wp:paragraph -->
<p>An image with multiple colors can be converted into a grayscale image, and each pixel is represented by its intensity from a range of 0-255.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This gives us a resulting numerical vector representation of an image</p>
<!-- /wp:paragraph --></div></div>
<!-- /wp:media-text -->

<!-- wp:heading {"level":3} -->
<h3>Convolution?</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Before we talk about convolutional neural networks, we need to understand what is the meaning of convolution first.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In mathematical terms, a convolution is the combination of two functions to produce a third function, which has the properties of the two combined functions.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The term&nbsp;<em>convolution</em>&nbsp;refers to the resulting third function, as well as the process of computing the combination of two functions.</p>
<!-- /wp:paragraph -->

<!-- wp:media-text {"mediaId":192,"mediaType":"image"} -->
<div class="wp-block-media-text alignwide"><figure class="wp-block-media-text__media"><img src="https://chanjinhao.files.wordpress.com/2018/12/convolution_of_box_signal_with_itself2.gif" alt="" class="wp-image-192" /></figure><div class="wp-block-media-text__content"><!-- wp:paragraph -->
<p>By sliding function <em>g(t</em>) onto <em>f(t)</em>, we produce a third function <em>(f*g)(t)</em>. We say that&nbsp;<em>(f*g)(t)</em>&nbsp;is the convolution of&nbsp;<em>f(t)</em>&nbsp;and <em>g(t)</em></p>
<!-- /wp:paragraph --></div></div>
<!-- /wp:media-text -->

<!-- wp:paragraph -->
<p>Now we have a rough idea of what convolution is, we can go back to see how convolution works in the context of image processing.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Convolution of Images</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>To begin, we have converted the image to a&nbsp;<em>n x n</em>&nbsp;matrix of numbers from 0-255 which indicates the intensity.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Next, we take a smaller matrix of size&nbsp;<em>m x m</em>, where&nbsp;<em>m &lt; n</em>, and slide it over the original matrix. This smaller matrix is called a filter.</p>
<!-- /wp:paragraph -->

<!-- wp:media-text {"mediaId":196,"mediaType":"image","mediaWidth":23} -->
<div class="wp-block-media-text alignwide" style="grid-template-columns:23% auto;"><figure class="wp-block-media-text__media"><img src="https://chanjinhao.files.wordpress.com/2018/12/screen-shot-2016-07-24-at-11-25-13-pm2.png" alt="" class="wp-image-196" /></figure><div class="wp-block-media-text__content"><!-- wp:paragraph -->
<p>Image that has been converted to a matrix of numbers. For simplicity, we'll just use 0 and 1.</p>
<!-- /wp:paragraph --></div></div>
<!-- /wp:media-text -->

<!-- wp:media-text {"mediaId":197,"mediaType":"image","mediaWidth":15} -->
<div class="wp-block-media-text alignwide" style="grid-template-columns:15% auto;"><figure class="wp-block-media-text__media"><img src="https://chanjinhao.files.wordpress.com/2018/12/screen-shot-2016-07-24-at-11-25-24-pm1.png" alt="" class="wp-image-197" /></figure><div class="wp-block-media-text__content"><!-- wp:paragraph -->
<p>A smaller matrix, called a filter, that we'll use to slide over the original matrix</p>
<!-- /wp:paragraph --></div></div>
<!-- /wp:media-text -->

<!-- wp:media-text {"mediaId":198,"mediaType":"image"} -->
<div class="wp-block-media-text alignwide"><figure class="wp-block-media-text__media"><img src="https://chanjinhao.files.wordpress.com/2018/12/convolution_schematic.gif" alt="" class="wp-image-198" /></figure><div class="wp-block-media-text__content"><!-- wp:paragraph -->
<p>

As we slide the filter over the matrix, we do a matrix multiplication, and take the result of the multiplication for our convolution matrix.

</p>
<!-- /wp:paragraph --></div></div>
<!-- /wp:media-text -->

<!-- wp:paragraph -->
<p>The convolution here can be seen as combining the original matrix and the filter to produce a third matrix, which is our convolved feature matrix.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The intuition behind this is that we are using the filter to extract features from the image.&nbsp;Different filter values will extract out different features from the image.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph {"align":"center"} -->
<p style="text-align:center;"><img class="wp-image-200" style="width:150px;" src="https://chanjinhao.files.wordpress.com/2018/12/screen-shot-2016-08-05-at-11-03-00-pm.png" alt=""></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We can also use multiple filters to produce multiple Convoluted feature maps, which is called "Depth"</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":204,"align":"center","width":374,"height":188} -->
<div class="wp-block-image"><figure class="aligncenter is-resized"><img src="https://chanjinhao.files.wordpress.com/2018/12/screen-shot-2016-08-10-at-3-42-35-am.png" alt="" class="wp-image-204" width="374" height="188" /></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>When building a CNN, the model learns the values of the filters on its own, while we have to specify other parameters like number of filters, filter size, stride and zero-padding.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For a given set of values, convolution (which is a set of filters) generates a new set of values. The depth of the new set of output corresponds to the number of filters, as each filter generates its own set of values.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Removing Negative values from Convolved Features</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>After we produce a Convolved feature map from the original image, we perform another operation called ReLU (Rectified Linear Unit) on each element.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>What ReLU does is that it replaces all negative values to 0.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Why we need to apply ReLU on a convolved feature map is because the Convolution step is a linear operation. To account for non-linearity, we need to introduce a nonlinear function such as ReLU.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The resulting feature map after applying ReLU is called a Rectified feature map.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":201} -->
<figure class="wp-block-image"><img src="https://chanjinhao.files.wordpress.com/2018/12/screen-shot-2016-08-07-at-6-18-19-pm.png" alt="" class="wp-image-201" /><figcaption>Convoluted feature map becomes a Rectified feature map, after ReLU is applied to each pixel.<br>This process changes all negative values to a 0 value</figcaption></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3>Dimensionality Reduction through Pooling</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>After we have extracted the Convoluted feature map, and passed it through our ReLU function to produce a Rectified feature map, we can reduce the feature map through a process called pooling.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There are 3 types of pooling: Max pooling, Sum pooling and Average pooling. We'll talk about Max pooling, because it works better in practice, and once you understand Max pooling, Sum pooling and Average pooling works the same way.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In doing Max pooling, we define yet another window size&nbsp;<em>k x k</em>, but in this case, we do not slide the window across the Rectified feature map. Instead, we divide the feature map up into the window size, and take the max value from it.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":203} -->
<figure class="wp-block-image"><img src="https://chanjinhao.files.wordpress.com/2018/12/screen-shot-2016-08-10-at-3-38-39-am.png" alt="" class="wp-image-203" /><figcaption>A Max pooling window size of 2x2.<br>After we pass the Convolved feature map through ReLU, we get a Rectified feature map.<br>We take the maximum value of the window size to get the reduced matrix.<br></figcaption></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3>The Fully Connected Layer</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>After we have broken down the image through iterative process of Convolution, ReLU and pooling, we get a set of matrices to represent the important features of the original image.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We then line up each of the values of the pooled matrix into a single vector, and feed it into a fully connected neural network.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When the neural network does it's learning via gradient descent or some other optimization algorithm, only the weights in the neural network and the values in the filter layer changes. The size of the filter and step size do not change.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Features at each Layer</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>We now have the 3 basic steps of a CNN: Convolution, ReLU and Pooling.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We can repeat this step numerous times to reduce the image, and extract out important features.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":205,"align":"center","width":606,"height":144} -->
<div class="wp-block-image"><figure class="aligncenter is-resized"><img src="https://chanjinhao.files.wordpress.com/2018/12/screen-shot-2016-08-08-at-2-26-09-am.png" alt="" class="wp-image-205" width="606" height="144" /><figcaption>Repeated Convolution + ReLU and Pooling to reduce the image and extract important features.</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The more layers we have, the more complicated features we can extract out from the image. At each layer, we reconstruct simple layers to form more complex layers.</p>
<!-- /wp:paragraph -->

<!-- wp:media-text {"mediaId":206,"mediaType":"image"} -->
<div class="wp-block-media-text alignwide"><figure class="wp-block-media-text__media"><img src="https://chanjinhao.files.wordpress.com/2018/12/screen-shot-2016-08-10-at-12-58-30-pm.png" alt="" class="wp-image-206" /></figure><div class="wp-block-media-text__content"><!-- wp:paragraph {"align":"left"} -->
<p style="text-align:left;">In the first layer, we pick out simple features like edges and lines.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><br>In the second layer, we're able to form parts of the face such as eyes and ears.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><br>In the last layer, we can form the full face from all the layers</p>
<!-- /wp:paragraph --></div></div>
<!-- /wp:media-text -->

<!-- wp:paragraph -->
<p>In another example, we can visually see how the CNN breaks down an image using Convolution + ReLU and pooling to extract important features, and make a classification at the end.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":207,"align":"center","width":748,"height":423} -->
<div class="wp-block-image"><figure class="aligncenter is-resized"><img src="https://chanjinhao.files.wordpress.com/2018/12/conv_all.png" alt="" class="wp-image-207" width="748" height="423" /></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The intuition here is that we are making predictions here based on several features maps. If we have feature maps telling us there is two eyes, a nose and a mouth, we can make a prediction that it is a face.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Conclusion&nbsp;</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>We've seen in this post how to do the following steps in a CNN</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Transform an image to a numerical vector</li><li>Apply a filter to extract a Convoluted feature map</li><li>Apply ReLU to transform negative values to 0</li><li>Apply Pooling to get your Rectified feature map</li><li>Repeat until extract important features</li><li>Pass them into a fully connected layer to perform prediction</li><li>Learning only changes the weights of the connected layer and the filter matrix values</li></ol>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>152</wp:post_id>
		<wp:post_date>2019-02-17 16:11:53</wp:post_date>
		<wp:post_date_gmt>2019-02-17 08:11:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>convolutional-neural-networks</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="data-science"><![CDATA[Data Science]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[27724358427]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1550393501]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Web Beacon for Trip wiring documents</title>
		<link>http://chanjinhao.com/2019/03/03/web-beacon-for-trip-wiring-documents/</link>
		<pubDate>Sun, 03 Mar 2019 06:25:29 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?p=216</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>During my course of security research work, I came across this concept of web beacons, which is a clever way of knowing who has opened up a document.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A Web Beacon is an element inside the document, that is not a saved resource. Rather, the element sends a request out to a server to retrieve the resource. An example of this would be an image tag, that requests the image resource from a server.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For example, writing this piece of code fetches the image resource from www.w3schools.com server:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>img src="https://www.w3schools.com/images/w3schools_green.jpg" alt="W3Schools.com" style="width:104px;height:142px;"</code></p>
<!-- /wp:paragraph -->

<!-- wp:image {"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://www.w3schools.com/images/w3schools_green.jpg" alt="W3Schools.com" /><figcaption>Image retrieved from w3 schools</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>It's a very simple concept, and we can make use of this functionality and twist it to be a defensive tool</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Web Server Request Tracking</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>If we can setup our own server that hosts resources, we can secretly embed invisible images, or elements that makes requests to our servers to retrieve those resources.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This way, when the document is opened, the tries to render itself by making a request to our server for the resource. It acts as a tripwire that immediately triggers the moment the document is opened. And as the image is is not obvious to the threat actor, he would not be aware of this callback.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Improvements?</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>The obvious drawback to this is that, once the document is taken to an offline premise, the image can no longer make a request to our server. This means that we will not be notified when the tripwire is activated.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The second drawback is: So what?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So what if I know if the document has been opened by some unauthorized person, or in another location? What can I do to prevent him from opening it? Some simple solutions that I came up with are:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If the requesting IP address is not in the whitelist, we return an extremely huge image, hopefully to make the document hang and not be usable.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Another improvement is, aside from image resources, what other resources can be requested, and hopefully such resources can be "executed". Of course, such a solution is considered intrusive, because then it can be used in malicious ways for remote code execution.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>216</wp:post_id>
		<wp:post_date>2019-03-03 14:25:29</wp:post_date>
		<wp:post_date_gmt>2019-03-03 06:25:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>web-beacon-for-trip-wiring-documents</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="security"><![CDATA[Security]]></category>
		<category domain="post_tag" nicename="web-beacons"><![CDATA[Web Beacons]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[28216972513]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1551595390]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Microsoft Kaggle Challenge: Adversarial Validation</title>
		<link>http://chanjinhao.com/2019/03/10/microsoft-kaggle-challenge-adversarial-validation/</link>
		<pubDate>Sun, 10 Mar 2019 11:45:23 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?p=220</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading {"level":3} -->
<h3>Overview</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>This was a concept I came across while doing a Kaggle challenge issued by Microsoft to predict if a computer would get hit by a malware or not.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This challenge was different from their previous one, where they wanted you to predict if the malware class of a given binary.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This challenge was really interesting, because we had a lot of given information about the target machine, the list of them are:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>MachineIdentifier, ProductName, EngineVersion, AppVersion, AvSigVersion, IsBeta, RtpStateBitfield, IsSxsPassiveMode, DefaultBrowsersIdentifier, AVProductStatesIdentifier, AVProductsInstalled, AVProductsEnabled, HasTpm, CountryIdentifier, CityIdentifier', OrganizationIdentifier', GeoNameIdentifier', LocaleEnglishNameIdentifier', Platform', Processor', OsVer', OsBuild', OsSuite', OsPlatformSubRelease', OsBuildLab', SkuEdition', IsProtected', AutoSampleOptIn', PuaMode', SMode', IeVerIdentifier', SmartScreen', Firewall', UacLuaenable', Census_MDC2FormFactor', Census_DeviceFamily', Census_OEMNameIdentifier', Census_OEMModelIdentifier', Census_ProcessorCoreCount', Census_ProcessorManufacturerIdentifier', Census_ProcessorModelIdentifier', Census_ProcessorClass', Census_PrimaryDiskTotalCapacity', Census_PrimaryDiskTypeName', Census_SystemVolumeTotalCapacity', Census_HasOpticalDiskDrive', Census_TotalPhysicalRAM', Census_ChassisTypeName', Census_InternalPrimaryDiagonalDisplaySizeInInches', Census_InternalPrimaryDisplayResolutionHorizontal', Census_InternalPrimaryDisplayResolutionVertical', Census_PowerPlatformRoleName', Census_InternalBatteryType', Census_InternalBatteryNumberOfCharges', Census_OSVersion', Census_OSArchitecture', Census_OSBranch', Census_OSBuildNumber', Census_OSBuildRevision', Census_OSEdition', Census_OSSkuName', Census_OSInstallTypeName', Census_OSInstallLanguageIdentifier', Census_OSUILocaleIdentifier', Census_OSWUAutoUpdateOptionsName', Census_IsPortableOperatingSystem', Census_GenuineStateName', Census_ActivationChannel', Census_IsFlightingInternal', Census_IsFlightsDisabled', Census_FlightRing', Census_ThresholdOptIn', Census_FirmwareManufacturerIdentifier', Census_FirmwareVersionIdentifier', Census_IsSecureBootEnabled', Census_IsWIMBootEnabled', Census_IsVirtualDevice', Census_IsTouchEnabled', Census_IsPenCapable, Census_IsAlwaysOnAlwaysConnectedCapable, Wdft_IsGamer, Wdft_RegionIdentifier</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now that's pretty crazy, with things like Screen size, is the PC build a gaming PC or not, and is touch screen enabled. With such complex features, it'll be really challenging to pick out patterns to predict if the machine will get hit or not.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>But one important thing that stood out was how different the test set was compared to the training set. This can be shown in the following way:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Random sample 10k rows from the training data set and the testing data set</li><li>Drop the initial label (in this case, <code>HasDetected</code>), and put in your own label <code>IsTrain</code> , and give the training data 1, and the test data 0</li><li>Build a classifier to predict if a given row came from the training data set, or the testing data set</li><li>If the model gives a high accuracy, it means that the training and testing data are really different.</li><li>If the model gives an accuracy of about 50%, it means that the training and testing data are almost the same</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>The model I built was LightGBM, and it gave me an incredible score of 93%! That means that the training and testing data set are incredibly different.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This gives us some problems if we use the standard solution of cross validation of the training data, since at the end, the testing data is so disparate.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Adversarial Validation</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>In comes adversarial validation. The idea of this actually really simple.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Based on the model we built earlier to classify is a row belongs to training or testing, we use the same model to run the classification only on the training data set.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We then pick out the rows that the model identified wrongly as testing data. This means that those rows inside the training data set have features that are similar to the testing data set!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>And so, instead of the conventional validation methods, we use these rows classified falsely as testing to be our validation data. This way, our model validates itself to data that is close the testing data, and there would not have a huge difference in performance when training the model, and testing it.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Downside</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>One of the downsides of doing this is that, once the testing data set changes again to something that is dissimilar to the current data, we the adversarial validation technique would perform poorly again.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This might mean that we need to retrain the adversarial data selection model, and pick out falsely classified rows, and retrain the prediction model all over again. And that sounds like a lot of work.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>220</wp:post_id>
		<wp:post_date>2019-03-10 19:45:23</wp:post_date>
		<wp:post_date_gmt>2019-03-10 11:45:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>microsoft-kaggle-challenge-adversarial-validation</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="adversarial-validation"><![CDATA[Adversarial Validation]]></category>
		<category domain="category" nicename="data-science"><![CDATA[Data Science]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[28475270352]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1552222547]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Feature Engineering</title>
		<link>http://chanjinhao.com/2019/03/17/feature-engineering/</link>
		<pubDate>Sun, 17 Mar 2019 01:41:11 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?p=222</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Feature Engineering is one of the neglected portion of machine learning. Most topics revolve around Model Training (parameter tuning, cross validation). While that might be really important, feature engineering is equally important as well, but I can't seem to find good resources that talk about this. I suspect this is because to perform feature engineering, you need expert knowledge of the data, and what it represents.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A typical workflow would look something like this</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Project Scoping / Data Collection</li><li>Exploratory Analysis (EDA)</li><li>Data Cleaning</li><li><strong>Feature Engineering</strong></li><li>Model Training</li><li>Project Delivery / Insights</li></ol>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>What is not Feature Engineering</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:list -->
<ul><li>Data cleaning (Outlier detection, Missing values)</li><li>Scaling and Normalization</li><li>Feature Selection</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>I would classify these as data massaging, as you're just changing the data (except for Feature Selection). Feature Engineering is the creation of new data.<br></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>What is Feature Engineering</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>There are a few ways to create new features from existing ones</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>Indicator Variables</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Indicator variables are new variables that help you isolate data. This new feature is discriminative and can help separate the data.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Examples:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Threshold: If you're studying data on alcohol consumption, you could create a new binary feature if the person is <code>&gt;=21</code> years old.  The expert knowledge in this is knowing where your data came from, and what is the minimum age of drinking in that country/state </li><li>Special Events: If you're studying sales, there could be seasons that have higher sales, such as <code>isChristmas</code>, <code>isSinglesDay</code> or <code>isBlackFriday</code>. Expert knowledge is knowing what special events there are</li><li>Groupings: You can create artificial groups for the data, for example in network traffic, you can group the, according to protocols or source. Expert knowledge is knowing how to interpret the data, and what grouping makes sense</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":4} -->
<h4>Interaction of Features</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Features can interact with each other to create new variables. Interaction here means some mathematical operation between them.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Examples:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Sum of Features: If you're looking at sales of individual items, a new feature might be <code>overallSales</code>, where you add the sales of each item together</li><li>Product of Features: If you're looking at wages, and you have features like <code>hourlyRate</code>, and <code>workingHours</code>, you can create a new feature called <code>totalPay</code></li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>The expert knowledge in these areas are knowing how the features interact with each other to produce new features. However, from unfortunate experience, I've seen some feature interactions that makes absolutely no sense, but the model seems to think otherwise. An example I saw was a new feature created from the multiplication of <code>screenHorizontalSize</code> and <code>totalRAM</code> which makes absolutely no sense, but it gave a boost in prediction accuracy. Machine Learning really is still a black box.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>Feature Representation</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>For some features, you can better represent them in other formats that give more information.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Examples:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Date to integer: When give a <code>datetime</code> format string, it almost always makes sense to decompose it to it's integer components such as <code>day</code>, <code>month</code> and <code>year</code>. More than that, you can create features such as <code>isWeekday</code> or <code>isPeakHour</code></li><li>Sparse classes to Other: In a categorical class, if some classes are hugely under-represented, they can be grouped together, and classified as <code>Others</code></li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":4} -->
<h4>External Data Augmentation<br></h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Another way to create new features is to bring in new data such as Geolocation information. These external data can be used to add in new features, which in turn can interact, represent or isolate current features.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Conclusion<br></h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Indicator Features, Feature Interactions, Feature Representation, External Data Augmentation are all several way to engineer new features. This is different from data massaging.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Feature Engineering is extremely important in your Machine Learning workflow.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>222</wp:post_id>
		<wp:post_date>2019-03-17 09:41:11</wp:post_date>
		<wp:post_date_gmt>2019-03-17 01:41:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>feature-engineering</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="data-science"><![CDATA[Data Science]]></category>
		<category domain="post_tag" nicename="feature-engineering"><![CDATA[Feature Engineering]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[28722636543]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1552792921]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>LightGBM</title>
		<link>http://chanjinhao.com/2019/03/24/lightgbm/</link>
		<pubDate>Sun, 24 Mar 2019 04:33:23 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?p=224</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>For some time, XGBoost was considered the Kaggle-Killer, being the winning model for most prediction problems. Recently Microsoft released their own gradient boosting framework called LightGBM, and it is way faster than XGB. In this post, I'm going to touch on the interesting portions of LightGBM.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>What is LightGBM?</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Similar to XGBoost, LightGBM is a gradient boosted tree based algorithm. Unlike other gradient boosted trees which grows hroizontally, LightGBM grows vertically. LightGBM grows Leaf-wise, while others grow Level-wise.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":227} -->
<figure class="wp-block-image"><img src="https://chanjinhao.files.wordpress.com/2018/12/1-AZsSoXb8lc5N6mnhqX5JCg-1.png" alt="" class="wp-image-227" /><figcaption>LightGBM leaf-wise growth. This allows for deeper vertical growth</figcaption></figure>
<!-- /wp:image -->

<!-- wp:image {"id":228} -->
<figure class="wp-block-image"><img src="https://chanjinhao.files.wordpress.com/2018/12/1-whSa8rY4sgFQj1rEcWr8Ag-1.png" alt="" class="wp-image-228" /><figcaption>Other gradient boosted algortihms grow level wise, which results in longer horizontal growth</figcaption></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3>Dealing with Non-Numeric Data</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>The nice thing about LightGBM is that it can take in data as a whole, and it does not require inputs to be converted into numerical format! This means that if your data has a mix of numbers and strings, you can simply throw everything into the model to learn.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The one thing you have to do however, is to specify the string columns as <code>category</code>. Below is a example of how we do it with Pandas Dataframe</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>dtypes = {
        'MachineIdentifier':'category',
        'ProductName': 'category',
        'EngineVersion': 'category',
        'AppVersion':'category',
        'AvSigVersion':'category',
        'IsBeta':'int8',
        'RtpStateBitfield':'float16',
        'IsSxsPassiveMode':'int8'
}

df_train = pd.read_csv('train.csv', nrows=2000000, dtype=dtypes)</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Or if you're creating new features, you have to recast the datatype of the new column to categories</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>for feature in newFeatures:
    Train[feature ] = Train[feature ].astype('category')</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3>Important Parameters to Tune</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>LightGBM has a huge array of parameters to tune, and I wont be listing them here. I will however be highlighting those I think are important, and has helped me increase my model predictions</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><code>max_depth</code>: Defines how deep the tree grows</li><li><code>num_leaves</code>: Defines the maximum number of leaves in a node</li><li><code>max_bin</code>: Defines the maximum number of bins your feature will be bucketed in</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>For a more comprehensive read, <a href="https://lightgbm.readthedocs.io/en/latest/Parameters-Tuning.html">click here!</a></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Conclusion</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>In this short post, we've very briefly covered about LightGBM, how it is different from other gradient boosted machines, and how to define categories for training.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>An important thing to know is that LightGBM is very sensitive to overfitting, and should not be used for small data sets &lt;10,000 rows.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>224</wp:post_id>
		<wp:post_date>2019-03-24 12:33:23</wp:post_date>
		<wp:post_date_gmt>2019-03-24 04:33:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>lightgbm</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="data-science"><![CDATA[Data Science]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[28978521093]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1553409836]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>topology_2d-2d_train</title>
		<link>http://chanjinhao.com/topology_2d-2d_train/</link>
		<pubDate>Wed, 13 Feb 2019 09:41:58 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/02/topology_2d-2d_train.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>310</wp:post_id>
		<wp:post_date>2019-02-13 17:41:58</wp:post_date>
		<wp:post_date_gmt>2019-02-13 09:41:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>topology_2d-2d_train</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/02/topology_2d-2d_train.gif</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/02/topology_2d-2d_train.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:598;s:6:"height";i:584;s:4:"file";s:97:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/02/topology_2d-2d_train.gif";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:3259579;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>topology_3d</title>
		<link>http://chanjinhao.com/topology_3d/</link>
		<pubDate>Wed, 13 Feb 2019 09:43:21 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/02/topology_3d.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>311</wp:post_id>
		<wp:post_date>2019-02-13 17:43:21</wp:post_date>
		<wp:post_date_gmt>2019-02-13 09:43:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>topology_3d</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/02/topology_3d.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/02/topology_3d.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:812;s:6:"height";i:612;s:4:"file";s:88:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/02/topology_3d.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:127744;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>gans</title>
		<link>http://chanjinhao.com/gans/</link>
		<pubDate>Fri, 15 Feb 2019 05:55:19 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/02/gans.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>314</wp:post_id>
		<wp:post_date>2019-02-15 13:55:19</wp:post_date>
		<wp:post_date_gmt>2019-02-15 05:55:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>gans</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/02/gans.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/02/gans.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1213;s:6:"height";i:529;s:4:"file";s:81:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/02/gans.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:63221;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>iterations-1</title>
		<link>http://chanjinhao.com/iterations-1/</link>
		<pubDate>Fri, 15 Feb 2019 06:12:12 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/02/iterations-1.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>315</wp:post_id>
		<wp:post_date>2019-02-15 14:12:12</wp:post_date>
		<wp:post_date_gmt>2019-02-15 06:12:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>iterations-1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/02/iterations-1.gif</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/02/iterations-1.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:640;s:6:"height";i:480;s:4:"file";s:89:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/02/iterations-1.gif";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:830599;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>1-4xahmaugxeoqnnjhzjq-4q</title>
		<link>http://chanjinhao.com/1-4xahmaugxeoqnnjhzjq-4q/</link>
		<pubDate>Fri, 15 Feb 2019 07:36:08 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/02/1-4xahmaugxeoqnnjhzjq-4q.jpeg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>316</wp:post_id>
		<wp:post_date>2019-02-15 15:36:08</wp:post_date>
		<wp:post_date_gmt>2019-02-15 07:36:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>1-4xahmaugxeoqnnjhzjq-4q</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/02/1-4xahmaugxeoqnnjhzjq-4q.jpeg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/02/1-4xahmaugxeoqnnjhzjq-4q.jpeg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:800;s:6:"height";i:93;s:4:"file";s:102:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/02/1-4xahmaugxeoqnnjhzjq-4q.jpeg";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:15421;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>1-n235xeigxkl3ktl08d-cza</title>
		<link>http://chanjinhao.com/1-n235xeigxkl3ktl08d-cza/</link>
		<pubDate>Fri, 15 Feb 2019 07:42:18 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/02/1-n235xeigxkl3ktl08d-cza.jpeg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>317</wp:post_id>
		<wp:post_date>2019-02-15 15:42:18</wp:post_date>
		<wp:post_date_gmt>2019-02-15 07:42:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>1-n235xeigxkl3ktl08d-cza</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/02/1-n235xeigxkl3ktl08d-cza.jpeg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/02/1-n235xeigxkl3ktl08d-cza.jpeg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:800;s:6:"height";i:118;s:4:"file";s:102:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/02/1-n235xeigxkl3ktl08d-cza.jpeg";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:13404;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>1-ihk3whuaz_0uek4sjicyfw</title>
		<link>http://chanjinhao.com/1-ihk3whuaz_0uek4sjicyfw/</link>
		<pubDate>Fri, 15 Feb 2019 08:44:42 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/02/1-ihk3whuaz_0uek4sjicyfw.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>318</wp:post_id>
		<wp:post_date>2019-02-15 16:44:42</wp:post_date>
		<wp:post_date_gmt>2019-02-15 08:44:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>1-ihk3whuaz_0uek4sjicyfw</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/02/1-ihk3whuaz_0uek4sjicyfw.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/02/1-ihk3whuaz_0uek4sjicyfw.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:800;s:6:"height";i:53;s:4:"file";s:101:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/02/1-ihk3whuaz_0uek4sjicyfw.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:17212;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>1-6so6q3dwurg8qrmwk1y3jw</title>
		<link>http://chanjinhao.com/1-6so6q3dwurg8qrmwk1y3jw/</link>
		<pubDate>Fri, 15 Feb 2019 08:51:39 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/02/1-6so6q3dwurg8qrmwk1y3jw.jpeg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>319</wp:post_id>
		<wp:post_date>2019-02-15 16:51:39</wp:post_date>
		<wp:post_date_gmt>2019-02-15 08:51:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>1-6so6q3dwurg8qrmwk1y3jw</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/02/1-6so6q3dwurg8qrmwk1y3jw.jpeg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/02/1-6so6q3dwurg8qrmwk1y3jw.jpeg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:800;s:6:"height";i:75;s:4:"file";s:102:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/02/1-6so6q3dwurg8qrmwk1y3jw.jpeg";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:8998;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>master-algo_thumb</title>
		<link>http://chanjinhao.com/master-algo_thumb/</link>
		<pubDate>Sun, 17 Feb 2019 07:13:10 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/02/master-algo_thumb.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>323</wp:post_id>
		<wp:post_date>2019-02-17 15:13:10</wp:post_date>
		<wp:post_date_gmt>2019-02-17 07:13:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>master-algo_thumb</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/02/master-algo_thumb.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/02/master-algo_thumb.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:401;s:6:"height";i:569;s:4:"file";s:94:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/02/master-algo_thumb.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:32318;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>puzzle_thumb</title>
		<link>http://chanjinhao.com/puzzle_thumb/</link>
		<pubDate>Wed, 20 Feb 2019 09:43:39 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/02/puzzle_thumb.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>325</wp:post_id>
		<wp:post_date>2019-02-20 17:43:39</wp:post_date>
		<wp:post_date_gmt>2019-02-20 09:43:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>puzzle_thumb</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/02/puzzle_thumb.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/02/puzzle_thumb.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:465;s:6:"height";i:465;s:4:"file";s:89:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/02/puzzle_thumb.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:26742;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>1_jaey3kp7tu2q6hn6lasmrw</title>
		<link>http://chanjinhao.com/1_jaey3kp7tu2q6hn6lasmrw/</link>
		<pubDate>Tue, 19 Mar 2019 12:48:50 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/03/1_jaey3kp7tu2q6hn6lasmrw.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>331</wp:post_id>
		<wp:post_date>2019-03-19 20:48:50</wp:post_date>
		<wp:post_date_gmt>2019-03-19 12:48:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>1_jaey3kp7tu2q6hn6lasmrw</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/03/1_jaey3kp7tu2q6hn6lasmrw.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/03/1_jaey3kp7tu2q6hn6lasmrw.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:410;s:6:"height";i:256;s:4:"file";s:101:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/03/1_jaey3kp7tu2q6hn6lasmrw.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:3366;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>0_klhgarh43lgdoksn</title>
		<link>http://chanjinhao.com/0_klhgarh43lgdoksn/</link>
		<pubDate>Tue, 19 Mar 2019 12:53:13 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/03/0_klhgarh43lgdoksn.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>332</wp:post_id>
		<wp:post_date>2019-03-19 20:53:13</wp:post_date>
		<wp:post_date_gmt>2019-03-19 12:53:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>0_klhgarh43lgdoksn</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/03/0_klhgarh43lgdoksn.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/03/0_klhgarh43lgdoksn.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:349;s:6:"height";i:297;s:4:"file";s:95:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/03/0_klhgarh43lgdoksn.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:20657;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>skitch</title>
		<link>http://chanjinhao.com/skitch/</link>
		<pubDate>Tue, 19 Mar 2019 13:00:32 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/03/skitch.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>333</wp:post_id>
		<wp:post_date>2019-03-19 21:00:32</wp:post_date>
		<wp:post_date_gmt>2019-03-19 13:00:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>skitch</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/03/skitch.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/03/skitch.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:8:"filesize";i:9416;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>introduction-to-k-means-clustering-elbow-point-example-1</title>
		<link>http://chanjinhao.com/introduction-to-k-means-clustering-elbow-point-example-1/</link>
		<pubDate>Tue, 19 Mar 2019 13:32:38 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/03/introduction-to-k-means-clustering-elbow-point-example-1.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>341</wp:post_id>
		<wp:post_date>2019-03-19 21:32:38</wp:post_date>
		<wp:post_date_gmt>2019-03-19 13:32:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>introduction-to-k-means-clustering-elbow-point-example-1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/03/introduction-to-k-means-clustering-elbow-point-example-1.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/03/introduction-to-k-means-clustering-elbow-point-example-1.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:8:"filesize";i:33608;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>0_mrhhgabskajpbt21</title>
		<link>http://chanjinhao.com/0_mrhhgabskajpbt21/</link>
		<pubDate>Sun, 24 Mar 2019 09:27:42 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/03/0_mrhhgabskajpbt21.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>345</wp:post_id>
		<wp:post_date>2019-03-24 17:27:42</wp:post_date>
		<wp:post_date_gmt>2019-03-24 09:27:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>0_mrhhgabskajpbt21</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/03/0_mrhhgabskajpbt21.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/03/0_mrhhgabskajpbt21.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1200;s:6:"height";i:663;s:4:"file";s:95:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/03/0_mrhhgabskajpbt21.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:262615;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Counts Based Featurization</title>
		<link>http://chanjinhao.com/2019/03/24/counts-based-featurization/</link>
		<pubDate>Sun, 24 Mar 2019 09:48:33 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?p=231</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>While doing the Microsoft Malware Classification challenge, I encountered a way of Feature representation called Count Based Features (CBF).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>CBF is good to use with  very high cardinality  features, and it transforms the high number of categories in the data to the number of it's occurrences. This representation is helpful because it extracts out a simple inherent feature of the data: count</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Below shows a simple example of how we get the CBF of a given feature</p>
<!-- /wp:paragraph -->

<!-- wp:table -->
<table class="wp-block-table"><tbody><tr><td><strong>Label</strong></td><td><strong>Feature1</strong></td></tr><tr><td>0</td><td>A</td></tr><tr><td>0</td><td>A</td></tr><tr><td>1</td><td>A</td></tr><tr><td>0</td><td>B</td></tr><tr><td>1</td><td>B</td></tr><tr><td>1</td><td>B</td></tr><tr><td>1</td><td>B</td></tr></tbody></table>
<!-- /wp:table -->

<!-- wp:paragraph -->
<p>CBF can be done in pandas in a single line</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>Train.groupby([' Feature1 '])[' Feature1 '].transform('count')</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The output of this will give you </p>
<!-- /wp:paragraph -->

<!-- wp:table -->
<table class="wp-block-table"><tbody><tr><th>Label
</th><th> <strong>Feature1</strong> </th></tr><tr><td>
0
</td><td> 3 </td></tr><tr><td>
0
</td><td> 3 </td></tr><tr><td>
1
</td><td> 3 </td></tr><tr><td>
0
</td><td> 4 </td></tr><tr><td>
1
</td><td> 4</td></tr><tr><td>
1
</td><td> 4</td></tr><tr><td>
1
</td><td> 4 </td></tr></tbody></table>
<!-- /wp:table -->

<!-- wp:paragraph -->
<p>As you can see, the categorical values are all converted their count values!<br></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>231</wp:post_id>
		<wp:post_date>2019-03-24 17:48:33</wp:post_date>
		<wp:post_date_gmt>2019-03-24 09:48:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>counts-based-featurization</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="count-feature"><![CDATA[Count Feature]]></category>
		<category domain="category" nicename="data-science"><![CDATA[Data Science]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1553420969]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[28982322250]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Microsoft Kaggle Challenge</title>
		<link>http://chanjinhao.com/?page_id=240</link>
		<pubDate>Sun, 31 Mar 2019 01:31:49 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?page_id=240</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>This is the write up for my solution for the Microsoft Malware Prediction</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://www.kaggle.com/c/microsoft-malware-prediction">https://www.kaggle.com/c/microsoft-malware-prediction</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I got pretty high up the leader board, but it was nothing that I was proud of, because:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>I grossly overfitted my model</li><li>The final result was a blend of another kernel</li><li>All my attempts at feature engineering failed</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>And I'm now officially ceasing efforts to improve my score, because:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>I'm not learning anything new, just mindlessly tweaking hyperparameters and hoping one of them works</li><li>I don't think I've got the basics down yet, and this challenge was way over my head. I feel I should start with something simpler</li><li>And most importantly, I'm no longer having fun</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>But wait! Doing such a hard competition really taught me many concepts, such as:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Adversarial Cross Validation</li><li>How to properly use LightGBM</li><li>The real problem of overfitting, which LightGBM does really fast</li><li>Blending and Ensembling is a powerful method for getting good results</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Below shows one of the code variants I've used. They were all mostly the same, with a few hyperparameters being different, and some failed attempts at feature engineering.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The most important features were Version numbers, and there's probably some way to exploit that. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>My single model (which I believe grossly overfitted, because I set <code>num_leaves=8000</code> got me a score of 0.684. I blended with another blended kernel of 0.688, and my final score was 0.692.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I think this got me off at the wrong start because I was working and tweaking with those overfitted hyperparameters, when they were wrong in the first place.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Anyway, on to the next competition!<br></p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code># This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load in 

import pandas as pd
import numpy as np
import gc
import matplotlib as mpl
import matplotlib.pyplot as plt
import warnings

import lightgbm as lgb
from sklearn.metrics import roc_auc_score
from sklearn.model_selection import StratifiedKFold
from sklearn import preprocessing
from sklearn import preprocessing
from sklearn.model_selection import train_test_split

import category_encoders as ce

le = preprocessing.LabelEncoder()


# Any results you write to the current directory are saved as output.

dtypes = {
        #'MachineIdentifier':                                    'category',
        'ProductName':                                          'category',
        'EngineVersion':                                        'category',
        'AppVersion':                                           'category',
        'AvSigVersion':                                         'category',
        'IsBeta':                                               'int8',
        'RtpStateBitfield':                                     'float16',
        'IsSxsPassiveMode':                                     'int8',
        'DefaultBrowsersIdentifier':                            'float16',
        'AVProductStatesIdentifier':                            'float32',
        'AVProductsInstalled':                                  'float16',
        'AVProductsEnabled':                                    'float16',
        'HasTpm':                                               'int8',
        'CountryIdentifier':                                    'int32',
        'CityIdentifier':                                       'float32',
        'OrganizationIdentifier':                               'float16',
        'GeoNameIdentifier':                                    'float32',
        'LocaleEnglishNameIdentifier':                          'int32',
        'Platform':                                             'category',
        'Processor':                                            'category',
        'OsVer':                                                'category',
        'OsBuild':                                              'int16',
        'OsSuite':                                              'int16',
        'OsPlatformSubRelease':                                 'category',
        'OsBuildLab':                                           'category',
        'SkuEdition':                                           'category',
        'IsProtected':                                          'float16',
        'AutoSampleOptIn':                                      'int8',
        'PuaMode':                                              'category',
        'SMode':                                                'float16',
        'IeVerIdentifier':                                      'float32',
        'SmartScreen':                                          'category',
        'Firewall':                                             'float16',
        'UacLuaenable':                                         'float64',
        'Census_MDC2FormFactor':                                'category',
        'Census_DeviceFamily':                                  'category',
        'Census_OEMNameIdentifier':                             'float32',
        'Census_OEMModelIdentifier':                            'float32',
        'Census_ProcessorCoreCount':                            'float16',
        'Census_ProcessorManufacturerIdentifier':               'float16',
        'Census_ProcessorModelIdentifier':                      'float32',
        'Census_ProcessorClass':                                'category',
        'Census_PrimaryDiskTotalCapacity':                      'float32',
        'Census_PrimaryDiskTypeName':                           'category',
        'Census_SystemVolumeTotalCapacity':                     'float32',
        'Census_HasOpticalDiskDrive':                           'int8',
        'Census_TotalPhysicalRAM':                              'float32',
        'Census_ChassisTypeName':                               'category',
        'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float32',
        'Census_InternalPrimaryDisplayResolutionHorizontal':    'float32',
        'Census_InternalPrimaryDisplayResolutionVertical':      'float32',
        'Census_PowerPlatformRoleName':                         'category',
        'Census_InternalBatteryType':                           'category',
        'Census_InternalBatteryNumberOfCharges':                'float32',
        'Census_OSVersion':                                     'category',
        'Census_OSArchitecture':                                'category',
        'Census_OSBranch':                                      'category',
        'Census_OSBuildNumber':                                 'int32',
        'Census_OSBuildRevision':                               'int32',
        'Census_OSEdition':                                     'category',
        'Census_OSSkuName':                                     'category',
        'Census_OSInstallTypeName':                             'category',
        'Census_OSInstallLanguageIdentifier':                   'float16',
        'Census_OSUILocaleIdentifier':                          'int32',
        'Census_OSWUAutoUpdateOptionsName':                     'category',
        'Census_IsPortableOperatingSystem':                     'int8',
        'Census_GenuineStateName':                              'category',
        'Census_ActivationChannel':                             'category',
        'Census_IsFlightingInternal':                           'float16',
        'Census_IsFlightsDisabled':                             'float16',
        'Census_FlightRing':                                    'category',
        'Census_ThresholdOptIn':                                'float16',
        'Census_FirmwareManufacturerIdentifier':                'float32',
        'Census_FirmwareVersionIdentifier':                     'float32',
        'Census_IsSecureBootEnabled':                           'int8',
        'Census_IsWIMBootEnabled':                              'float16',
        'Census_IsVirtualDevice':                               'float16',
        'Census_IsTouchEnabled':                                'int8',
        'Census_IsPenCapable':                                  'int8',
        'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',
        'Wdft_IsGamer':                                         'float16',
        'Wdft_RegionIdentifier':                                'float32',
        'HasDetections':                                        'int8'
    }


# read data
print("Reading Data")
df_train = pd.read_csv('sorted.csv', nrows=5000000, dtype=dtypes).set_index('MachineIdentifier')
df_test = pd.read_csv('test.csv', dtype=dtypes).set_index('MachineIdentifier')</code></pre>
<!-- /wp:code -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Reading Data</code></pre>
<!-- /wp:code -->

<!-- wp:code -->
<pre class="wp-block-code"><code>len(df_train)

features = [f for f in df_train.columns if f != 'HasDetections']

#assign target variable to y_train
y = df_train['HasDetections']
Train = df_train[features]
Test = df_test[features]</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>Feature Engineering</h2>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:code -->
<pre class="wp-block-code"><code>def add_noise(series, noise_level):
    return series * (1 + noise_level * np.random.randn(len(series)))

def target_encode(trn_series=None, 
                  tst_series=None, 
                  target=None, 
                  min_samples_leaf=1, 
                  smoothing=1,
                  noise_level=0):
    """
    Smoothing is computed like in the following paper by Daniele Micci-Barreca
    https://kaggle2.blob.core.windows.net/forum-message-attachments/225952/7441/high%20cardinality%20categoricals.pdf
    trn_series : training categorical feature as a pd.Series
    tst_series : test categorical feature as a pd.Series
    target : target data as a pd.Series
    min_samples_leaf (int) : minimum samples to take category average into account
    smoothing (int) : smoothing effect to balance categorical average vs prior  
    """ 
    assert len(trn_series) == len(target)
    assert trn_series.name == tst_series.name
    temp = pd.concat([trn_series, target], axis=1)
    # Compute target mean 
    averages = temp.groupby(by=trn_series.name)[target.name].agg(["mean", "count"])
    # Compute smoothing
    smoothing = 1 / (1 + np.exp(-(averages["count"] - min_samples_leaf) / smoothing))
    # Apply average function to all target data
    prior = target.mean()
    # The bigger the count the less full_avg is taken into account
    averages[target.name] = prior * (1 - smoothing) + averages["mean"] * smoothing
    averages.drop(["mean", "count"], axis=1, inplace=True)
    # Apply averages to trn and tst series
    ft_trn_series = pd.merge(
        trn_series.to_frame(trn_series.name),
        averages.reset_index().rename(columns={'index': target.name, target.name: 'average'}),
        on=trn_series.name,
        how='left')['average'].rename(trn_series.name + '_mean').fillna(prior)
    # pd.merge does not keep the index so restore it
    ft_trn_series.index = trn_series.index 
    ft_tst_series = pd.merge(
        tst_series.to_frame(tst_series.name),
        averages.reset_index().rename(columns={'index': target.name, target.name: 'average'}),
        on=tst_series.name,
        how='left')['average'].rename(trn_series.name + '_mean').fillna(prior)
    # pd.merge does not keep the index so restore it
    ft_tst_series.index = tst_series.index
    return add_noise(ft_trn_series, noise_level), add_noise(ft_tst_series, noise_level)</code></pre>
<!-- /wp:code -->

<!-- wp:code -->
<pre class="wp-block-code"><code># combine dtrain and dtest for preprocessing
alldata = pd.concat([Train,Test], axis=0)

trainlen = len(Train)

# convert character columns to integer
print("Label Encoding")
numeric = Train.select_dtypes(include=np.number).columns.tolist()
categorical = [f for f in Train.columns.tolist() if f not in numeric]
categorical
for cat in categorical:
    alldata[cat] = le.fit_transform(alldata[cat].fillna(alldata[cat].mode().iloc[0]))

# split back into dtrain and dtest
Train = alldata[:trainlen]
Test = alldata[trainlen:]</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>Training</h2>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:code -->
<pre class="wp-block-code"><code>params = {
    'boosting_type' : 'gbdt', 
    'objective' : 'binary',
    'metric' : 'binary_logloss', 
    'nthread' : 16, 
    'learning_rate' : 0.02,
    'max_depth' : 12,
    'num_leaves' : 100,
    'sub_feature' : 0.7, 
    'sub_row' : 0.7, 
    'bagging_freq' : 1,
    'bagging_fraction' : 0.8,
    'lambda_l1': 0.1, 
    'lambda_l2' : 0.2
}

def modeling_cross_validation(params, X, y, folds):
    clfs = []
    allPreds = np.zeros(X.shape[0])

    evals_result = {}

    X_len = int(len(X)/3)

    X_train = X[X_len:]
    X_valid = X[:X_len]
    y_train = y[X_len:]
    y_valid = y[:X_len] 

    lgb_train = lgb.Dataset(X_train, y_train)
    lgb_valid = lgb.Dataset(X_valid, y_valid, reference=lgb_train)

    model = lgb.train(params,
                lgb_train,
                num_boost_round=200,
                valid_sets=[lgb_train, lgb_valid],
                evals_result=evals_result,
                verbose_eval=100,
                early_stopping_rounds=50)

    print('Plot metrics during training...')
    ax = lgb.plot_metric(evals_result, metric='binary_logloss')
    plt.show()

    print('Plot feature importances...')
    ax = lgb.plot_importance(model, max_num_features=10)
    plt.show()

    '''

    allPreds = model.predict(X_test)

    score = roc_auc_score(y_test, allPreds)
    print(score)
    '''

    clfs.append(model)
    return clfs


def predict_cross_validation(test, clfs):

    sub_preds = np.zeros(test.shape[0])

    for i, model in enumerate(clfs, 1):    
        test_preds = model.predict_proba(test)
        sub_preds += test_preds[:,1]

    # Averaging across all models
    sub_preds = sub_preds / len(clfs)

    # Creating a series from the predictions
    ret = pd.Series(sub_preds, index=test.index)
    ret.index.name = test.index.name 

    return ret

def predict_test_chunk(clfs, Test, filename='tmp.csv', chunks=100000):

    preds_sub = pd.DataFrame()

    num = int(7853253/100000)

    groups = Test.groupby(np.arange(len(Test))//chunks)

    count = 0

    for idx, df in groups:

        if count == 10:
            print("Running on idx {} of {}".format(idx, num))
            count = 0
        count += 1

        preds_df = predict_cross_validation(df, clfs)
        preds_df = preds_df.to_frame('HasDetections')

        preds_sub = pd.concat([preds_sub, preds_df], axis=0)

        del preds_df
        gc.collect()

    return preds_sub</code></pre>
<!-- /wp:code -->

<!-- wp:code -->
<pre class="wp-block-code"><code>print("Start Training")
clfs = modeling_cross_validation(params, Train, y, 3)</code></pre>
<!-- /wp:code -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Start Training
Training until validation scores don't improve for 50 rounds.
[100]    training's binary_logloss: 0.626603 valid_1's binary_logloss: 0.632894
[200]    training's binary_logloss: 0.614641 valid_1's binary_logloss: 0.624013
Did not meet early stopping. Best iteration is:
[200]    training's binary_logloss: 0.614641 valid_1's binary_logloss: 0.624013
Plot metrics during training...</code></pre>
<!-- /wp:code -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Plot feature importances...</code></pre>
<!-- /wp:code -->

<!-- wp:image {"id":241} -->
<figure class="wp-block-image"><img src="https://chanjinhao.files.wordpress.com/2019/01/output_9_1.png" alt="" class="wp-image-241" /></figure>
<!-- /wp:image -->

<!-- wp:image {"id":242} -->
<figure class="wp-block-image"><img src="https://chanjinhao.files.wordpress.com/2019/01/output_9_3.png" alt="" class="wp-image-242" /></figure>
<!-- /wp:image -->

<!-- wp:code -->
<pre class="wp-block-code"><code>print("Start Predicting")
preds = predict_test_chunk(clfs, Test, chunks=100000)

print("Start Submission")
df_sub = pd.read_csv('sample_submission.csv')
df_sub['HasDetections'] = preds['HasDetections'].values
df_sub.to_csv('mySubmission.csv', index=False)

print("Done!")</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>240</wp:post_id>
		<wp:post_date>2019-03-31 09:31:49</wp:post_date>
		<wp:post_date_gmt>2019-03-31 01:31:49</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Microsoft Kaggle Competition</title>
		<link>http://chanjinhao.com/2019/03/31/microsoft-kaggle-competition/</link>
		<pubDate>Sun, 31 Mar 2019 01:38:42 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?p=245</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>This is the write up for my solution for the Microsoft Malware Prediction</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://www.kaggle.com/c/microsoft-malware-prediction">https://www.kaggle.com/c/microsoft-malware-prediction</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I got pretty high up the leader board, but it was nothing that I was proud of, because:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>I grossly overfitted my model</li><li>The final result was a blend of another kernel</li><li>All my attempts at feature engineering failed</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>And I'm now officially ceasing efforts to improve my score, because:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>I'm not learning anything new, just mindlessly tweaking hyperparameters and hoping one of them works</li><li>I don't think I've got the basics down yet, and this challenge was way over my head. I feel I should start with something simpler</li><li>And most importantly, I'm no longer having fun</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>But wait! Doing such a hard competition really taught me many concepts, such as:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Adversarial Cross Validation</li><li>How to properly use LightGBM</li><li>The real problem of overfitting, which LightGBM does really fast</li><li>Blending and Ensembling is a powerful method for getting good results</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Below shows one of the code variants I've used. They were all mostly the same, with a few hyperparameters being different, and some failed attempts at feature engineering.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The most important features were Version numbers, and there's probably some way to exploit that. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>My single model (which I believe grossly overfitted, because I set <code>num_leaves=8000</code> got me a score of 0.684. I blended with another blended kernel of 0.688, and my final score was 0.692.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I think this got me off at the wrong start because I was working and tweaking with those overfitted hyperparameters, when they were wrong in the first place.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Anyway, on to the next competition!<br></p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code># This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load in 

import pandas as pd
import numpy as np
import gc
import matplotlib as mpl
import matplotlib.pyplot as plt
import warnings

import lightgbm as lgb
from sklearn.metrics import roc_auc_score
from sklearn.model_selection import StratifiedKFold
from sklearn import preprocessing
from sklearn import preprocessing
from sklearn.model_selection import train_test_split

import category_encoders as ce

le = preprocessing.LabelEncoder()


# Any results you write to the current directory are saved as output.

dtypes = {
        #'MachineIdentifier':                                    'category',
        'ProductName':                                          'category',
        'EngineVersion':                                        'category',
        'AppVersion':                                           'category',
        'AvSigVersion':                                         'category',
        'IsBeta':                                               'int8',
        'RtpStateBitfield':                                     'float16',
        'IsSxsPassiveMode':                                     'int8',
        'DefaultBrowsersIdentifier':                            'float16',
        'AVProductStatesIdentifier':                            'float32',
        'AVProductsInstalled':                                  'float16',
        'AVProductsEnabled':                                    'float16',
        'HasTpm':                                               'int8',
        'CountryIdentifier':                                    'int32',
        'CityIdentifier':                                       'float32',
        'OrganizationIdentifier':                               'float16',
        'GeoNameIdentifier':                                    'float32',
        'LocaleEnglishNameIdentifier':                          'int32',
        'Platform':                                             'category',
        'Processor':                                            'category',
        'OsVer':                                                'category',
        'OsBuild':                                              'int16',
        'OsSuite':                                              'int16',
        'OsPlatformSubRelease':                                 'category',
        'OsBuildLab':                                           'category',
        'SkuEdition':                                           'category',
        'IsProtected':                                          'float16',
        'AutoSampleOptIn':                                      'int8',
        'PuaMode':                                              'category',
        'SMode':                                                'float16',
        'IeVerIdentifier':                                      'float32',
        'SmartScreen':                                          'category',
        'Firewall':                                             'float16',
        'UacLuaenable':                                         'float64',
        'Census_MDC2FormFactor':                                'category',
        'Census_DeviceFamily':                                  'category',
        'Census_OEMNameIdentifier':                             'float32',
        'Census_OEMModelIdentifier':                            'float32',
        'Census_ProcessorCoreCount':                            'float16',
        'Census_ProcessorManufacturerIdentifier':               'float16',
        'Census_ProcessorModelIdentifier':                      'float32',
        'Census_ProcessorClass':                                'category',
        'Census_PrimaryDiskTotalCapacity':                      'float32',
        'Census_PrimaryDiskTypeName':                           'category',
        'Census_SystemVolumeTotalCapacity':                     'float32',
        'Census_HasOpticalDiskDrive':                           'int8',
        'Census_TotalPhysicalRAM':                              'float32',
        'Census_ChassisTypeName':                               'category',
        'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float32',
        'Census_InternalPrimaryDisplayResolutionHorizontal':    'float32',
        'Census_InternalPrimaryDisplayResolutionVertical':      'float32',
        'Census_PowerPlatformRoleName':                         'category',
        'Census_InternalBatteryType':                           'category',
        'Census_InternalBatteryNumberOfCharges':                'float32',
        'Census_OSVersion':                                     'category',
        'Census_OSArchitecture':                                'category',
        'Census_OSBranch':                                      'category',
        'Census_OSBuildNumber':                                 'int32',
        'Census_OSBuildRevision':                               'int32',
        'Census_OSEdition':                                     'category',
        'Census_OSSkuName':                                     'category',
        'Census_OSInstallTypeName':                             'category',
        'Census_OSInstallLanguageIdentifier':                   'float16',
        'Census_OSUILocaleIdentifier':                          'int32',
        'Census_OSWUAutoUpdateOptionsName':                     'category',
        'Census_IsPortableOperatingSystem':                     'int8',
        'Census_GenuineStateName':                              'category',
        'Census_ActivationChannel':                             'category',
        'Census_IsFlightingInternal':                           'float16',
        'Census_IsFlightsDisabled':                             'float16',
        'Census_FlightRing':                                    'category',
        'Census_ThresholdOptIn':                                'float16',
        'Census_FirmwareManufacturerIdentifier':                'float32',
        'Census_FirmwareVersionIdentifier':                     'float32',
        'Census_IsSecureBootEnabled':                           'int8',
        'Census_IsWIMBootEnabled':                              'float16',
        'Census_IsVirtualDevice':                               'float16',
        'Census_IsTouchEnabled':                                'int8',
        'Census_IsPenCapable':                                  'int8',
        'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',
        'Wdft_IsGamer':                                         'float16',
        'Wdft_RegionIdentifier':                                'float32',
        'HasDetections':                                        'int8'
    }


# read data
print("Reading Data")
df_train = pd.read_csv('sorted.csv', nrows=5000000, dtype=dtypes).set_index('MachineIdentifier')
df_test = pd.read_csv('test.csv', dtype=dtypes).set_index('MachineIdentifier')</code></pre>
<!-- /wp:code -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Reading Data</code></pre>
<!-- /wp:code -->

<!-- wp:code -->
<pre class="wp-block-code"><code>len(df_train)

features = [f for f in df_train.columns if f != 'HasDetections']

#assign target variable to y_train
y = df_train['HasDetections']
Train = df_train[features]
Test = df_test[features]</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>Feature Engineering</h2>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:code -->
<pre class="wp-block-code"><code>def add_noise(series, noise_level):
    return series * (1 + noise_level * np.random.randn(len(series)))

def target_encode(trn_series=None, 
                  tst_series=None, 
                  target=None, 
                  min_samples_leaf=1, 
                  smoothing=1,
                  noise_level=0):
    """
    Smoothing is computed like in the following paper by Daniele Micci-Barreca
    https://kaggle2.blob.core.windows.net/forum-message-attachments/225952/7441/high%20cardinality%20categoricals.pdf
    trn_series : training categorical feature as a pd.Series
    tst_series : test categorical feature as a pd.Series
    target : target data as a pd.Series
    min_samples_leaf (int) : minimum samples to take category average into account
    smoothing (int) : smoothing effect to balance categorical average vs prior  
    """ 
    assert len(trn_series) == len(target)
    assert trn_series.name == tst_series.name
    temp = pd.concat([trn_series, target], axis=1)
    # Compute target mean 
    averages = temp.groupby(by=trn_series.name)[target.name].agg(["mean", "count"])
    # Compute smoothing
    smoothing = 1 / (1 + np.exp(-(averages["count"] - min_samples_leaf) / smoothing))
    # Apply average function to all target data
    prior = target.mean()
    # The bigger the count the less full_avg is taken into account
    averages[target.name] = prior * (1 - smoothing) + averages["mean"] * smoothing
    averages.drop(["mean", "count"], axis=1, inplace=True)
    # Apply averages to trn and tst series
    ft_trn_series = pd.merge(
        trn_series.to_frame(trn_series.name),
        averages.reset_index().rename(columns={'index': target.name, target.name: 'average'}),
        on=trn_series.name,
        how='left')['average'].rename(trn_series.name + '_mean').fillna(prior)
    # pd.merge does not keep the index so restore it
    ft_trn_series.index = trn_series.index 
    ft_tst_series = pd.merge(
        tst_series.to_frame(tst_series.name),
        averages.reset_index().rename(columns={'index': target.name, target.name: 'average'}),
        on=tst_series.name,
        how='left')['average'].rename(trn_series.name + '_mean').fillna(prior)
    # pd.merge does not keep the index so restore it
    ft_tst_series.index = tst_series.index
    return add_noise(ft_trn_series, noise_level), add_noise(ft_tst_series, noise_level)</code></pre>
<!-- /wp:code -->

<!-- wp:code -->
<pre class="wp-block-code"><code># combine dtrain and dtest for preprocessing
alldata = pd.concat([Train,Test], axis=0)

trainlen = len(Train)

# convert character columns to integer
print("Label Encoding")
numeric = Train.select_dtypes(include=np.number).columns.tolist()
categorical = [f for f in Train.columns.tolist() if f not in numeric]
categorical
for cat in categorical:
    alldata[cat] = le.fit_transform(alldata[cat].fillna(alldata[cat].mode().iloc[0]))

# split back into dtrain and dtest
Train = alldata[:trainlen]
Test = alldata[trainlen:]</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>Training</h2>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:code -->
<pre class="wp-block-code"><code>params = {
    'boosting_type' : 'gbdt', 
    'objective' : 'binary',
    'metric' : 'binary_logloss', 
    'nthread' : 16, 
    'learning_rate' : 0.02,
    'max_depth' : 12,
    'num_leaves' : 100,
    'sub_feature' : 0.7, 
    'sub_row' : 0.7, 
    'bagging_freq' : 1,
    'bagging_fraction' : 0.8,
    'lambda_l1': 0.1, 
    'lambda_l2' : 0.2
}

def modeling_cross_validation(params, X, y, folds):
    clfs = []
    allPreds = np.zeros(X.shape[0])

    evals_result = {}

    X_len = int(len(X)/3)

    X_train = X[X_len:]
    X_valid = X[:X_len]
    y_train = y[X_len:]
    y_valid = y[:X_len] 

    lgb_train = lgb.Dataset(X_train, y_train)
    lgb_valid = lgb.Dataset(X_valid, y_valid, reference=lgb_train)

    model = lgb.train(params,
                lgb_train,
                num_boost_round=200,
                valid_sets=[lgb_train, lgb_valid],
                evals_result=evals_result,
                verbose_eval=100,
                early_stopping_rounds=50)

    print('Plot metrics during training...')
    ax = lgb.plot_metric(evals_result, metric='binary_logloss')
    plt.show()

    print('Plot feature importances...')
    ax = lgb.plot_importance(model, max_num_features=10)
    plt.show()

    '''

    allPreds = model.predict(X_test)

    score = roc_auc_score(y_test, allPreds)
    print(score)
    '''

    clfs.append(model)
    return clfs


def predict_cross_validation(test, clfs):

    sub_preds = np.zeros(test.shape[0])

    for i, model in enumerate(clfs, 1):    
        test_preds = model.predict_proba(test)
        sub_preds += test_preds[:,1]

    # Averaging across all models
    sub_preds = sub_preds / len(clfs)

    # Creating a series from the predictions
    ret = pd.Series(sub_preds, index=test.index)
    ret.index.name = test.index.name 

    return ret

def predict_test_chunk(clfs, Test, filename='tmp.csv', chunks=100000):

    preds_sub = pd.DataFrame()

    num = int(7853253/100000)

    groups = Test.groupby(np.arange(len(Test))//chunks)

    count = 0

    for idx, df in groups:

        if count == 10:
            print("Running on idx {} of {}".format(idx, num))
            count = 0
        count += 1

        preds_df = predict_cross_validation(df, clfs)
        preds_df = preds_df.to_frame('HasDetections')

        preds_sub = pd.concat([preds_sub, preds_df], axis=0)

        del preds_df
        gc.collect()

    return preds_sub</code></pre>
<!-- /wp:code -->

<!-- wp:code -->
<pre class="wp-block-code"><code>print("Start Training")
clfs = modeling_cross_validation(params, Train, y, 3)</code></pre>
<!-- /wp:code -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Start Training
Training until validation scores don't improve for 50 rounds.
[100]    training's binary_logloss: 0.626603 valid_1's binary_logloss: 0.632894
[200]    training's binary_logloss: 0.614641 valid_1's binary_logloss: 0.624013
Did not meet early stopping. Best iteration is:
[200]    training's binary_logloss: 0.614641 valid_1's binary_logloss: 0.624013
Plot metrics during training...</code></pre>
<!-- /wp:code -->

<!-- wp:code -->
<pre class="wp-block-code"><code>Plot feature importances...</code></pre>
<!-- /wp:code -->

<!-- wp:image {"id":241} -->
<figure class="wp-block-image"><img src="https://chanjinhao.files.wordpress.com/2019/01/output_9_1.png" alt="" class="wp-image-241" /></figure>
<!-- /wp:image -->

<!-- wp:image {"id":242} -->
<figure class="wp-block-image"><img src="https://chanjinhao.files.wordpress.com/2019/01/output_9_3.png" alt="" class="wp-image-242" /></figure>
<!-- /wp:image -->

<!-- wp:code -->
<pre class="wp-block-code"><code>print("Start Predicting")
preds = predict_test_chunk(clfs, Test, chunks=100000)

print("Start Submission")
df_sub = pd.read_csv('sample_submission.csv')
df_sub['HasDetections'] = preds['HasDetections'].values
df_sub.to_csv('mySubmission.csv', index=False)

print("Done!")</code></pre>
<!-- /wp:code -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>245</wp:post_id>
		<wp:post_date>2019-03-31 09:38:42</wp:post_date>
		<wp:post_date_gmt>2019-03-31 01:38:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>microsoft-kaggle-competition</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="data-science"><![CDATA[Data Science]]></category>
		<category domain="post_tag" nicename="kaggle"><![CDATA[Kaggle]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[29224866346]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1553999002]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Model Capacity</title>
		<link>http://chanjinhao.com/2019/03/24/model-capacity/</link>
		<pubDate>Sun, 24 Mar 2019 12:19:27 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?p=277</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>While studying the book Deep Learning by Ian Goodfellow, I came across this concept of model capacity, and it was really intuitive in helping me understand the models representation of a given problem.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This ties to the concept of overfitting and underfitting</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Capacity</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Put simply, the capacity of the model is the complexity of the model, or the ability to represent complex relationships.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A model with high capacity can represent very complex relationships, while a model with low capacity can represent not so complex relationships</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>How it ties to Overfitting and Underfitting</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Models perform best when their capacity approximately captures the complexity of the task they need to perform.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If the task or data set has a very low complexity, but the model has a very high capacity, the model will overfit, as it will memorize and represent all the features in the training set that may not be in the testing set.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Conversely, if the task or data set is highly complex, but the capacity of the model is low, the model will underfit, as it cannot sufficiently represent the complex relationships and features in the training data</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Vapnik–Chervonenkis (<strong>VC</strong>) <strong>dimension</strong></h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>The VC dimension is a measurement of a model's capacity, given that the task at hand is a binary classification problem.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The numerical value of a VC dimension tells us the largest set of data point the model can perfectly classify (or shatter). Thus, the larger the VC dimension, the more data points the model is able to perfectly classify, which also means that the model is inherently more complex.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The usage of a VC dimension usually just tells us how complex an algorithm is. A model with a higher VC dimension requires more data to properly train due to the higher complexity.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Conclusion</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>The take away here is that, overly complicated models are not always better as they can overfit. A simple decision tree or random forest can be perfect for data with low complexity.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A VC dimension is simply a quantification of how complex a model is. Higher VC = Able to separate more data points = more complex = requires more training data.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>277</wp:post_id>
		<wp:post_date>2019-03-24 20:19:27</wp:post_date>
		<wp:post_date_gmt>2019-03-24 12:19:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>model-capacity</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="capacity"><![CDATA[Capacity]]></category>
		<category domain="category" nicename="data-science"><![CDATA[Data Science]]></category>
		<category domain="post_tag" nicename="vc-dimension"><![CDATA[VC Dimension]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[28989295957]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1553438751]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>0_fbugysciqjnfi3n6</title>
		<link>http://chanjinhao.com/0_fbugysciqjnfi3n6/</link>
		<pubDate>Sun, 24 Mar 2019 09:51:56 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/03/0_fbugysciqjnfi3n6.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>346</wp:post_id>
		<wp:post_date>2019-03-24 17:51:56</wp:post_date>
		<wp:post_date_gmt>2019-03-24 09:51:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>0_fbugysciqjnfi3n6</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/03/0_fbugysciqjnfi3n6.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/03/0_fbugysciqjnfi3n6.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1200;s:6:"height";i:874;s:4:"file";s:95:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/03/0_fbugysciqjnfi3n6.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:281757;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>example-of-an-rnn-with-a-cycle</title>
		<link>http://chanjinhao.com/example-of-an-rnn-with-a-cycle/</link>
		<pubDate>Sun, 24 Mar 2019 10:11:25 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/03/example-of-an-rnn-with-a-cycle.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>347</wp:post_id>
		<wp:post_date>2019-03-24 18:11:25</wp:post_date>
		<wp:post_date_gmt>2019-03-24 10:11:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>example-of-an-rnn-with-a-cycle</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/03/example-of-an-rnn-with-a-cycle.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/03/example-of-an-rnn-with-a-cycle.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:147;s:6:"height";i:323;s:4:"file";s:107:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/03/example-of-an-rnn-with-a-cycle.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:2269;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>0_ynlojw7yvjarwmd4-copy</title>
		<link>http://chanjinhao.com/0_ynlojw7yvjarwmd4-copy/</link>
		<pubDate>Sun, 24 Mar 2019 10:14:20 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/03/0_ynlojw7yvjarwmd4-copy.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>348</wp:post_id>
		<wp:post_date>2019-03-24 18:14:20</wp:post_date>
		<wp:post_date_gmt>2019-03-24 10:14:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>0_ynlojw7yvjarwmd4-copy</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/03/0_ynlojw7yvjarwmd4-copy.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/03/0_ynlojw7yvjarwmd4-copy.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:214;s:6:"height";i:315;s:4:"file";s:100:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/03/0_ynlojw7yvjarwmd4-copy.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:10334;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>0_ynlojw7yvjarwmd4</title>
		<link>http://chanjinhao.com/0_ynlojw7yvjarwmd4/</link>
		<pubDate>Sun, 24 Mar 2019 10:15:28 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/03/0_ynlojw7yvjarwmd4.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>349</wp:post_id>
		<wp:post_date>2019-03-24 18:15:28</wp:post_date>
		<wp:post_date_gmt>2019-03-24 10:15:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>0_ynlojw7yvjarwmd4</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/03/0_ynlojw7yvjarwmd4.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/03/0_ynlojw7yvjarwmd4.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1200;s:6:"height";i:315;s:4:"file";s:95:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/03/0_ynlojw7yvjarwmd4.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:42243;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>dpln_0423</title>
		<link>http://chanjinhao.com/dpln_0423/</link>
		<pubDate>Sun, 24 Mar 2019 10:28:53 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/03/dpln_0423.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>350</wp:post_id>
		<wp:post_date>2019-03-24 18:28:53</wp:post_date>
		<wp:post_date_gmt>2019-03-24 10:28:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>dpln_0423</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/03/dpln_0423.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/03/dpln_0423.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:897;s:6:"height";i:732;s:4:"file";s:86:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/03/dpln_0423.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:53530;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>lstm3-chain</title>
		<link>http://chanjinhao.com/lstm3-chain/</link>
		<pubDate>Sun, 31 Mar 2019 05:51:12 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/03/lstm3-chain.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>356</wp:post_id>
		<wp:post_date>2019-03-31 13:51:12</wp:post_date>
		<wp:post_date_gmt>2019-03-31 05:51:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>lstm3-chain</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/03/lstm3-chain.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/03/lstm3-chain.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:2233;s:6:"height";i:839;s:4:"file";s:88:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/03/lstm3-chain.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:195822;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>lstm3-c-line</title>
		<link>http://chanjinhao.com/lstm3-c-line/</link>
		<pubDate>Sun, 31 Mar 2019 05:55:43 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/03/lstm3-c-line.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>357</wp:post_id>
		<wp:post_date>2019-03-31 13:55:43</wp:post_date>
		<wp:post_date_gmt>2019-03-31 05:55:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>lstm3-c-line</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/03/lstm3-c-line.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/03/lstm3-c-line.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1826;s:6:"height";i:564;s:4:"file";s:89:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/03/lstm3-c-line.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:47359;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>lstm3-focus-c</title>
		<link>http://chanjinhao.com/lstm3-focus-c/</link>
		<pubDate>Sun, 31 Mar 2019 05:56:49 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/03/lstm3-focus-c.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>358</wp:post_id>
		<wp:post_date>2019-03-31 13:56:49</wp:post_date>
		<wp:post_date_gmt>2019-03-31 05:56:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>lstm3-focus-c</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/03/lstm3-focus-c.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/03/lstm3-focus-c.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1826;s:6:"height";i:564;s:4:"file";s:90:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/03/lstm3-focus-c.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:61273;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>lstm3-focus-f</title>
		<link>http://chanjinhao.com/lstm3-focus-f/</link>
		<pubDate>Sun, 31 Mar 2019 06:01:20 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/03/lstm3-focus-f.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>359</wp:post_id>
		<wp:post_date>2019-03-31 14:01:20</wp:post_date>
		<wp:post_date_gmt>2019-03-31 06:01:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>lstm3-focus-f</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/03/lstm3-focus-f.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/03/lstm3-focus-f.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1826;s:6:"height";i:564;s:4:"file";s:90:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/03/lstm3-focus-f.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:56714;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>lstm3-focus-i</title>
		<link>http://chanjinhao.com/lstm3-focus-i/</link>
		<pubDate>Sun, 31 Mar 2019 06:09:52 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/03/lstm3-focus-i.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>360</wp:post_id>
		<wp:post_date>2019-03-31 14:09:52</wp:post_date>
		<wp:post_date_gmt>2019-03-31 06:09:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>lstm3-focus-i</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/03/lstm3-focus-i.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/03/lstm3-focus-i.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1826;s:6:"height";i:564;s:4:"file";s:90:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/03/lstm3-focus-i.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:69764;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>lstm3-focus-o</title>
		<link>http://chanjinhao.com/lstm3-focus-o/</link>
		<pubDate>Sun, 31 Mar 2019 06:28:27 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/03/lstm3-focus-o.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>361</wp:post_id>
		<wp:post_date>2019-03-31 14:28:27</wp:post_date>
		<wp:post_date_gmt>2019-03-31 06:28:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>lstm3-focus-o</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/03/lstm3-focus-o.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/03/lstm3-focus-o.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1826;s:6:"height";i:564;s:4:"file";s:90:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/03/lstm3-focus-o.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:69570;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>lstm3-simplernn</title>
		<link>http://chanjinhao.com/lstm3-simplernn/</link>
		<pubDate>Sun, 31 Mar 2019 06:35:48 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/03/lstm3-simplernn.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>362</wp:post_id>
		<wp:post_date>2019-03-31 14:35:48</wp:post_date>
		<wp:post_date_gmt>2019-03-31 06:35:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>lstm3-simplernn</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/03/lstm3-simplernn.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/03/lstm3-simplernn.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:2242;s:6:"height";i:839;s:4:"file";s:92:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/03/lstm3-simplernn.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:151160;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>lstm3-focus-c-1</title>
		<link>http://chanjinhao.com/lstm3-focus-c-1/</link>
		<pubDate>Sun, 31 Mar 2019 06:45:15 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/03/lstm3-focus-c-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>363</wp:post_id>
		<wp:post_date>2019-03-31 14:45:15</wp:post_date>
		<wp:post_date_gmt>2019-03-31 06:45:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>lstm3-focus-c-1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/03/lstm3-focus-c-1.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/03/lstm3-focus-c-1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1826;s:6:"height";i:564;s:4:"file";s:92:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/03/lstm3-focus-c-1.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:61273;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>lstm3-focus-c-2</title>
		<link>http://chanjinhao.com/lstm3-focus-c-2/</link>
		<pubDate>Sun, 31 Mar 2019 06:46:48 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/03/lstm3-focus-c-2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>364</wp:post_id>
		<wp:post_date>2019-03-31 14:46:48</wp:post_date>
		<wp:post_date_gmt>2019-03-31 06:46:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>lstm3-focus-c-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/03/lstm3-focus-c-2.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/03/lstm3-focus-c-2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1826;s:6:"height";i:564;s:4:"file";s:92:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/03/lstm3-focus-c-2.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:61273;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>lstm3-gate</title>
		<link>http://chanjinhao.com/lstm3-gate/</link>
		<pubDate>Sun, 31 Mar 2019 07:13:38 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/03/lstm3-gate.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>365</wp:post_id>
		<wp:post_date>2019-03-31 15:13:38</wp:post_date>
		<wp:post_date_gmt>2019-03-31 07:13:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>lstm3-gate</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/03/lstm3-gate.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/03/lstm3-gate.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:198;s:6:"height";i:242;s:4:"file";s:87:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/03/lstm3-gate.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:4223;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>untitled</title>
		<link>http://chanjinhao.com/untitled-2/</link>
		<pubDate>Sun, 31 Mar 2019 12:10:37 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/03/untitled.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>367</wp:post_id>
		<wp:post_date>2019-03-31 20:10:37</wp:post_date>
		<wp:post_date_gmt>2019-03-31 12:10:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>untitled-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/03/untitled.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/03/untitled.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:170;s:6:"height";i:33;s:4:"file";s:85:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/03/untitled.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:1506;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Regularization</title>
		<link>http://chanjinhao.com/2019/04/07/regularization/</link>
		<pubDate>Sun, 07 Apr 2019 01:49:02 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?p=247</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>One of the major problems in training a model in machine learning is overfitting. Especially when your model gets more and more complex, it starts to memorize the patterns in the training data. This makes it perform poorly on unseen data, which has new patterns.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Overfitting is the result of low-bias and high-variance, where it performs well for a single data set, but given new data, the error fluctuates. That means that the model is learning too much for each data set.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>One of the ways to overcome overfitting is Regularization</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>What is Regularization</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>The mathematical definition of Regularization is the process of adding information in order to solve ill-posed problems, or to prevent overfitting. Ill-posed meaning that the solution is highly sensitive to the changes in the data.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":248,"align":"center","width":238,"height":228} -->
<div class="wp-block-image"><figure class="aligncenter is-resized"><img src="https://chanjinhao.files.wordpress.com/2019/01/1280px-regularization.png" alt="" class="wp-image-248" width="238" height="228" /><figcaption>The blue line shows the model before regularization, while the green line shows the model after regularization.<br><br>Regularization makes the model less complex.<br></figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>By introducing regularization, we reduce the complexity of the learned model. This means that we're reducing the accuracy of the model for a given data set, but in doing so we're making it generalize across data sets. This action reduces variance, while not changing your bias too much, and bring us to the idea situation of low-bias low-variance.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Regularization in Machine Learning</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>To put this into a machine learning context, for each model we use, we have a loss function we wish to minimize. We'll use the RSS (Residual Sum Squares) loss function in this example.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":249} -->
<figure class="wp-block-image"><img src="https://chanjinhao.files.wordpress.com/2019/01/rss.png" alt="" class="wp-image-249" /><figcaption>RSS loss function we want to minimize</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>This will calculate how much to adjust your parameters based on your training data. But if your training data has noise, then your parameters will be adjusted to pick up the noise, and your model will be optimized towards the noise in the data. That's overfitting.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To combat this, we add in a regularization factor, which will shrink the estimated value to adjust your parameters. This way, your parameters won't move too much towards learning the noise in the data.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Ridge Regression (L2)</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:image {"id":250} -->
<figure class="wp-block-image"><img src="https://chanjinhao.files.wordpress.com/2019/01/ridge.png" alt="" class="wp-image-250" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Ridge Regression adds a shrinkage quantity to the original loss function RSS. This works by preventing the change in parameters from being too high in value.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When <em>λ = 0</em> , the penalty term is essentially taken out. Your estimated value to modify the parameters will then simply be RSS</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When  <strong><em>λ→∞</em></strong>, the penalty term, the penalty term grows large, and your estimated value to modify the parameters will approach 0. (But never being 0). Because it never reaches 0, the impact of those noisy features will only be minimized, but never removed.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Lasso Regression (L1)</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:image {"id":251} -->
<figure class="wp-block-image"><img src="https://chanjinhao.files.wordpress.com/2019/01/lasso.png" alt="" class="wp-image-251" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Lasso Regression also adds a shrinkage quantity, but the difference is that it only penalizes high valued coefficients.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The penalty term uses <strong><em>|β1|</em></strong>  instead of  <strong><em>β1²</em></strong> , hence it is named L1, while  <br>Ridge regularization is named L2.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Lasso also differs from from Ridge in that it can set coefficients to 0, making them not relevant at all. In the end, because the coefficients are 0, you may end up with lesser features, which is an advantage!</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Regularization in Deep Learning - Drop Out</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Regularization in deep learning is slightly different from shallow learning.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In deep learning, we have neurons that are for the most times fully connected. That's to say, every single neuron is connected to every other neuron in the next layer.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This may cause some problems like overfitting again, because the neurons may develop false co-dependencies among each other (which may be due to noise).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Regularization in deep learning works by occasionally ignoring a fraction of the neurons during the training phase.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":252} -->
<figure class="wp-block-image"><img src="https://chanjinhao.files.wordpress.com/2019/01/dropout.png" alt="" class="wp-image-252" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>By using dropout, you're forcing the model to learn more robust features, as opposed to random combinations of neurons. Also, it roughly doubles the number of iterations required to converge.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Conclusion</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>To conclude, we've talked about methods in shallow learning and deep learning to combat overfitting by regularization.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Regularization is the process of adding new information to reduce the value to modify the parameters. This prevents it from learning any noise that is specific to the data set, and reduce the chances of overfitting</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>247</wp:post_id>
		<wp:post_date>2019-04-07 09:49:02</wp:post_date>
		<wp:post_date_gmt>2019-04-07 01:49:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>regularization</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="data-science"><![CDATA[Data Science]]></category>
		<category domain="post_tag" nicename="drop-out"><![CDATA[drop out]]></category>
		<category domain="post_tag" nicename="regularization"><![CDATA[regularization]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[29479484225]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1554605926]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Interpretation of ROC and AUC</title>
		<link>http://chanjinhao.com/2019/04/14/the-interpretation-of-roc-and-auc/</link>
		<pubDate>Sun, 14 Apr 2019 04:52:58 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?p=255</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>The ROC curve and it's AUC is a common metric for evaluation the performance of a model. In this post, we dig deeper to find out how to interpret the results, and what corrective actions to take to improve it.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>What is it?</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>The ROC curve, or Receiver Operating Characteristic curve works on binary classification problems (True or False). It plots the following values against each other:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>True Positive Rate (TPR): Of those sample that are true, how many did I predict are true? This is also known as Recall (<code>TP/P</code>, where <code>TP</code> is how many True samples predicted True, and <code>P</code> is the total number of True samples)</li><li>False Positive Rate (FPR): Of those samples that are false, how many did I predict are true? This is also known as False Alarms (<code>FP/N</code>, where <code>FP</code> is how many False samples predicted True, and <code>N</code> is the total number of False samples)</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>So... What is it?</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Now that we got the formal definitions out of the way, lets talk about the intuition behind the ROC and AUC.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The TPR is also called <strong>sensitivity</strong>, which means how many in the <strong>true positives</strong> have I identified to be <strong>True</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>TNR (True Negative Rate) is also called <strong>specificity</strong>, which means how many in the <strong>true negatives</strong> have I identified to be <strong>False</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>FPR is (<code>1 - TNR</code>),  which means how many in the <strong>true negatives</strong> have I identified to be <strong>True</strong>. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The ROC curve plots TPR against FPR.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":257,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://chanjinhao.files.wordpress.com/2019/01/roc-curves.png" alt="" class="wp-image-257" /><figcaption>Plotting the TPR against the FPR. There are 4 scenarios here</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The top left graph shows the perfect scenario, where the Area Under Curve (AUC) is 1. This means that the model has 100% TPR, regardless of my FPR rate, and correctly classifies all True samples as True.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The bottom right graph shows a random classifier, which is randomly separated.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The question to ask is: what is the lowest possible FPR, that can give me the highest FPR?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If we look at the perfect scenario, the highest possible TPR corresponds to an almost 0 FPR. That's perfect! It means the model made no classification errors (Excellent Precision and Recall)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Looking at the random separation, the highest TPR corresponds to the highest FPR, which is horrible. It means that for my model to get a good Recall, I must predict all my False samples to be True as well.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Conclusion</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>A good model will thus have a lower FPR that will give a reasonable TPR (Reasonable here depends on the scenario and use case).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Another way to look at it is, to get a good Recall, what is the amount of Precision I have to sacrifice.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If the model has to sacrifice a lot of Precision to get a good Recall, then it is a bad model. If the model does not have to sacrifice any Precision (In the case of the perfect scenario), then it is a good model.<br></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>255</wp:post_id>
		<wp:post_date>2019-04-14 12:52:58</wp:post_date>
		<wp:post_date_gmt>2019-04-14 04:52:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-interpretation-of-roc-and-auc</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="data-science"><![CDATA[Data Science]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[29742816908]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1555227374]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Activation Functions</title>
		<link>http://chanjinhao.com/2019/04/14/activation-functions/</link>
		<pubDate>Sun, 14 Apr 2019 10:07:24 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?p=259</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>The structure of a deep learning model consists mainly of nodes, and connections between them. Most of the time, every single node is connected to every other node in the next layer, which we call a Dense layer.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":260,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://chanjinhao.files.wordpress.com/2019/01/2.png" alt="" class="wp-image-260" /><figcaption>Nodes in a fully connected neural network</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Within each node is a mathematical equation, decides, based on the input values and their weights, what values to output to the next layer. These mathematical equations are called Activation Functions.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":261,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://chanjinhao.files.wordpress.com/2019/01/3.png" alt="" class="wp-image-261" /><figcaption>The activation function is in the middle box, which performs an operation on the inputs, z, based on their weights and bias value.</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3>Different Activation Functions</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>There are several kinds of Activation Functions, or in other words, different kinds of mathematical operations that a node can take. They are:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Sigmoid Function</li><li>Tanh Function</li><li>ReLU Function</li><li>Leaky ReLU Function</li></ol>
<!-- /wp:list -->

<!-- wp:image {"id":262,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://chanjinhao.files.wordpress.com/2019/01/4.png" alt="" class="wp-image-262" /><figcaption>Different Activation Functions and their mathematical equations</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>These activation functions take in the inputs <code>z</code> from the previous layer, and feed it into their equations to produce an output <code>a</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Sigmoid vs TanH</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>The TanH function is almost strictly superior to the Sigmoid function, because the TanH function has it's mean centered at <code>0</code>. This feature will result in a higher value of derivative, and a faster learning rate. Also, having a <code>0</code> value mean will avoid having bias in the gradients.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>ReLU vs (Sigmoid + TanH)</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>The drawback of both Sigmoid and TanH, given that they have a curved graph, is that if the value of <code>z</code> is either extremely large or small, the gradient on the curve will be extremely small as well. This small gradient will have an adverse effect on the learning rate when performing Gradient Descent.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The solution to this is ReLU (Rectified Linear Unit), which has a constant gradient regardless of the value of <code>z</code>. But for ReLU, having a negative value of <code>z</code> will result in a <code>0</code> value activation. The solution for that is a Leaky ReLU, which allows for a small value of <code>a</code> for negative values of <code>z</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Must they Always be Non-Linear?</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Yes, Activation Function must always be non-linear. Having multiple linear activation functions can be condensed together, effectively negating the need for any hidden layers or hidden nodes.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Conclusion</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>In this post, we talked very briefly about the different kinds of Activation Functions, and compared their pro and cons.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A recommendation for building a neural network model is to have the hidden nodes all be either TanH or ReLU, and never having Sigmoid.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The only time you can have a Sigmoid is at your output layer, if your problem is a binary classification problem.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>259</wp:post_id>
		<wp:post_date>2019-04-14 18:07:24</wp:post_date>
		<wp:post_date_gmt>2019-04-14 10:07:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>activation-functions</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="activation-functions"><![CDATA[Activation Functions]]></category>
		<category domain="category" nicename="data-science"><![CDATA[Data Science]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[29746915712]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1555238776]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>2</title>
		<link>http://chanjinhao.com/2-2/</link>
		<pubDate>Sun, 31 Mar 2019 12:11:00 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/03/2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>368</wp:post_id>
		<wp:post_date>2019-03-31 20:11:00</wp:post_date>
		<wp:post_date_gmt>2019-03-31 12:11:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>2-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/03/2.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/03/2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:223;s:6:"height";i:60;s:4:"file";s:78:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/03/2.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:2278;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>untitled-1</title>
		<link>http://chanjinhao.com/untitled-1/</link>
		<pubDate>Sun, 31 Mar 2019 12:11:18 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/03/untitled-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>369</wp:post_id>
		<wp:post_date>2019-03-31 20:11:18</wp:post_date>
		<wp:post_date_gmt>2019-03-31 12:11:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>untitled-1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/03/untitled-1.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/03/untitled-1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:170;s:6:"height";i:33;s:4:"file";s:87:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/03/untitled-1.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:1506;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Process Injection</title>
		<link>http://chanjinhao.com/2019/04/05/process-injection/</link>
		<pubDate>Fri, 05 Apr 2019 06:44:16 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?p=372</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>I decided to revisit some fundamental security concepts again, and one of which I used in my previous employment was Process Injection.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Process Injection is a technique of running your own code within the address space of another process. The hard part is getting your code in that address space, but there are numerous ways to achieve this</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>DLL Injection<br></h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>The malware write the address pointing to its own DLL into the virtual address space of another process. The DLL is then executed by creating a remote thread within the process.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The steps performed to achieve this are:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Finding a process to hijack using <code>Process32First</code> and <code>Process32Next</code></li><li>Getting a handle of the target process with <code>OpenProcess</code></li><li>Allocating memory and writing the path to malicious DLL using <code>VirtualAllocEx</code> and <code>WriteProcessMemory</code></li><li>Code execution in the process by calling <code>CreateRemoteThread</code>, <code>NtCreateThreadEx</code> or <code>RtlCreateUserThread</code></li></ol>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>PE Injection</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Instead of passing the address of the DLL, the malware can directly copy malicious the code into the process. The code is then executed via <code>CreateRemoteThread</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The steps performed to achieve this are:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Finding a process to hijack using <code>Process32First</code> and <code>Process32Next</code></li><li>Getting a handle of the target process with <code>OpenProcess</code></li><li>Allocating memory and writing the malicious code using <code>VirtualAllocEx</code> and <code>WriteProcessMemory</code></li><li>Code execution in the process by calling <code>CreateRemoteThread</code>, <code>NtCreateThreadEx</code> or <code>RtlCreateUserThread</code></li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>The difference here is in step 3, where the code is copied, instead of the reference to the code. This method does not require dropping a DLL onto the machine. </p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Process Hollowing</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Instead of injecting the address of the DLL, or copying the malicious code into the target process, malware can also overwrite the original code in the memory space of the process. This is called Process Hollowing.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The steps performed to achieve this are:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Create a new process in suspended mode to host the malicious code</li><li>Done by calling <code>CreateProcess</code> with the flag <code>CREATE_SUSPEND</code></li><li>Unmap memory of target process by calling <code>ZwUnmapViewOfSection</code> or <code>NtUnmapViewOfSection</code></li><li>Allocate new memory for malware using <code>VirtualAllocEx</code> and write the code using <code>WriteProcessMemory</code></li><li>Point the entry point of the suspended process to the code in the target process using <code>SetThreadContext</code></li><li>Resume suspended process by calling <code>ResumeThread</code> which executes the code in the target process</li></ol>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Thread Execution Hijacking (Suspend, Inject, Resume)</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Instead of creating a new process that is suspended like Process Hollowing, Thread Execution Hijacking avoids creating a new process.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The steps performed to achieve this are:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Get a handle to the target process</li><li>Suspend the target process by calling <code>SuspendThread</code></li><li>Write malicious code in the target process by calling <code>VirtualAllocEx</code> and <code>WriteProcessMemory</code></li><li>Resume the running of the process by calling <code>ResumeThread</code></li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>SIR are problematic because suspending a process mid-execution may cause the system to crash.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Hook Injection via <code>SetWindowsHookEx</code><br></h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Hooking is a technique to intercept function calls, and load their malicious DLL upon a certain event getting triggered within a specific thread.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>SetWindowsHookEx</code> is called to install a hook routine into the hook chain. One of the arguments that <code>SetWindowsHookEx</code> takes is a <code>threadID</code> with which this hook procedure is associated with. If this value is set to <code>0</code>, all threads within the process perform the action when the event is triggered. To generate less noise, 1 thread is usually targeted.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Once the DLL is injected, the malware executes the malicious code on behalf of the process of the <code>threadID</code> that was passed into the <code>SetWindowsHookEx</code> function.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Injection and Persistence via Registry Modification<br></h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Malwares can insert their malicious libraries under <code>Appinit_Dlls</code> to have other processes load their libraries. Every library under this registry key is loaded into any process that calls <code>User32.dll</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Malwares can also put their libraries under <code>AppCertDlls</code>, which affects any process that calls Win32 API functions such as <code>CreateProcess</code>, <code>CreateProcessAsUser</code> and <code>WinExec</code><br></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Image File Execution Options (IFEO) is usually used for debugging purposes. The <code>Debugger Value</code> under this registry key can be set to attach a program to another executable for debugging, and whenever that executable is launched, the attached program is also launched. Malwares can make use of this to attach themselves to a target executable.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Asynchronous Procedure Calls (APC)</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Malwares can leverage on APC to force another thread to execute their malicious code by intercepting the APC queue of the target thread.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Each thread has a queue of APC which are waiting for execution upon the thread entering an alterable state.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The steps performed to achieve this are:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Finding a thread that is in an alterable state</li><li>Call <code>OpenThread</code> and <code>QueueUserAPC</code> to queue an APC to the thread</li><li><code>QueueUserAPC</code> takes in 3 arguments<ul><li>Handle to a target thread</li><li>Pointer to the function that the malware wants to run</li><li>Parameters to the function</li></ul></li></ol>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Injection using Shims</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Shims are provided by Microsoft to provide backward compatibility by allowing developers to apply fixes to their program  without rewriting code. Malwares can leverage on Shims to target an executable for persistence and injection.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When Windows runs the Shim engine, it loads a binary to check shimming databases to check for appropriate fixes. Malwares can create and install their own shimming database (sdb). They can do so by calling <code>sdbinst.exe</code> (shim database installer), and install their own malicious sdb file.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Import Address Table (IAT) and Inline Hooking</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>IAT hooking involves modifying the Import Address Table to redirect the address of the functions there to their own malicious functions.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Inline hooking modified the API function itself, by rewriting the first few bytes of code in the function to jump to their malicious function.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Conclusion</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>In the past, I've only worked in the Linux space when doing process injection. One of the techniques I used was modifying the IAT, and here I've learnt a lot more other techniques that are related to the Windows OS.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>372</wp:post_id>
		<wp:post_date>2019-04-05 14:44:16</wp:post_date>
		<wp:post_date_gmt>2019-04-05 06:44:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>process-injection</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="hacking"><![CDATA[Hacking]]></category>
		<category domain="post_tag" nicename="process-injection"><![CDATA[Process Injection]]></category>
		<category domain="category" nicename="security"><![CDATA[Security]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1554446658]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[29416859013]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Domain Generating Algorithm (Used by C2 Communication)</title>
		<link>http://chanjinhao.com/2019/04/07/domain-generating-algorithm-used-by-c2-communication/</link>
		<pubDate>Sun, 07 Apr 2019 08:46:35 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?p=380</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading {"level":3} -->
<h3>C2 Communication and Disruption</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>When a machine gets infected by a malware, it can start receiving command from it's C2 server to perform unwanted activities. Examples of this are a machines infected with botnets or ransomware, where the C2 server will send commands down to the victim machine, and the machines can send replies back.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The easiest way to tackle this problem is to disrupt the communication between the C2 and the victim machine, and one of this is to either take down the C2 server, or block all traffic that is going to that specific IP address.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>How Malwares Overcome Communication Disruption </h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Bad actors are well aware of this problem of having a single static IP or server for their C2, and they know that if this single IP is block or the server is taken down, their infected machines have no where to receive commands from.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>How they overcome this is by having their malware communicate with different domains instead of a single static one. This act is called <strong>"Domain Fluxing</strong>", or <strong>"Fast Fluxing"</strong>, where the malware communicates with different C2 servers.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The process of generating multiple domains for their malware to connect to is called <strong>"Domain Generation Algorithm" (DGA)</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>DGA in Action</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>DGAs automatically generate multiple domains that the malware can communicate to. These DGA's have to be random enough, so that defenders cannot predict what list of domains to block. For example, if a malware is dumb enough to change their list of domains to "badserver1", "badserver2" ... Defenders just have to block "badserver*", and that will cover all the list of C2 servers.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Dumb DGAs will also generate jibberish domains, which can be spotted easily by analyst, or smart NLP models. Domains such as "dsawkkl.com" generated randomly is obviously a malicious domain. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Smarter DGAs will pluck and piece together words that make sense, such as "Birds.com", "Elephant.com" or "Tiger.com". But this also has a downside, as its obvious that their seed for generating the names are animals. Really advanced DGAs will use and NLP text generator model, and a random seed generator to produce really legitimate looking domains that can fool both the analyst, and models.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Below is an example code to generate random domains</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>def generate_domain(year, month, day):
    """Generates a domain name for the given date."""

    domain = ""

    for i in range(16):
        year = ((year ^ 8 * year) &gt;&gt; 11) ^ ((year &amp; 0xFFFFFFF0) &lt;&lt; 17)
        month = ((month ^ 4 * month) &gt;&gt; 25) ^ 16 * (month &amp; 0xFFFFFFF8)
        day = ((day ^ (day &lt;&lt; 13)) &gt;&gt; 19) ^ ((day &amp; 0xFFFFFFFE) &lt;&lt; 12)

    domain += chr(((year ^ month ^ day) % 25) + 97)</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3>Conclusion</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Malwares need to communicate with C2's for commands. It's easy to block a single domain, or list of correlated domains. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Malwares therefore need sophisticated DGAs to come up with unpredictable domains for their C2 server.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>380</wp:post_id>
		<wp:post_date>2019-04-07 16:46:35</wp:post_date>
		<wp:post_date_gmt>2019-04-07 08:46:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>domain-generating-algorithm-used-by-c2-communication</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="domain-generation-algorithm"><![CDATA[Domain Generation Algorithm]]></category>
		<category domain="category" nicename="hacking"><![CDATA[Hacking]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1554626798]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[29486639527]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>4133.epsi_</title>
		<link>http://chanjinhao.com/4133-epsi_/</link>
		<pubDate>Sun, 07 Apr 2019 11:02:29 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/04/4133.epsi_.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>384</wp:post_id>
		<wp:post_date>2019-04-07 19:02:29</wp:post_date>
		<wp:post_date_gmt>2019-04-07 11:02:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>4133-epsi_</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/04/4133.epsi_.gif</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/04/4133.epsi_.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:294;s:6:"height";i:252;s:4:"file";s:87:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/04/4133.epsi_.gif";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:9392;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>4133.epsi_-1</title>
		<link>http://chanjinhao.com/4133-epsi_-1/</link>
		<pubDate>Sun, 07 Apr 2019 11:03:29 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/04/4133.epsi_-1.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>385</wp:post_id>
		<wp:post_date>2019-04-07 19:03:29</wp:post_date>
		<wp:post_date_gmt>2019-04-07 11:03:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>4133-epsi_-1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/04/4133.epsi_-1.gif</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/04/4133.epsi_-1.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:748;s:6:"height";i:348;s:4:"file";s:89:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/04/4133.epsi_-1.gif";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:4063;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>4133.epsi_-2</title>
		<link>http://chanjinhao.com/4133-epsi_-2/</link>
		<pubDate>Sun, 07 Apr 2019 11:03:51 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/04/4133.epsi_-2.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>386</wp:post_id>
		<wp:post_date>2019-04-07 19:03:51</wp:post_date>
		<wp:post_date_gmt>2019-04-07 11:03:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>4133-epsi_-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/04/4133.epsi_-2.gif</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/04/4133.epsi_-2.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:231;s:6:"height";i:278;s:4:"file";s:89:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/04/4133.epsi_-2.gif";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:9847;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>elf-header-linux-binary</title>
		<link>http://chanjinhao.com/elf-header-linux-binary/</link>
		<pubDate>Sun, 07 Apr 2019 11:11:56 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/04/elf-header-linux-binary.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>387</wp:post_id>
		<wp:post_date>2019-04-07 19:11:56</wp:post_date>
		<wp:post_date_gmt>2019-04-07 11:11:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>elf-header-linux-binary</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/04/elf-header-linux-binary.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/04/elf-header-linux-binary.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:654;s:6:"height";i:367;s:4:"file";s:100:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/04/elf-header-linux-binary.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:48177;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>What is a CGI?</title>
		<link>http://chanjinhao.com/2019/04/08/what-is-a-cgi/</link>
		<pubDate>Mon, 08 Apr 2019 09:11:20 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?p=391</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Not Computer Generated Imagery, but <code>cgi</code> pages you see when you visit webpages.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>CGI stands for Common Gateway Interface, and it acts as the Controller in the MVC framework. To give a complete picture, in a web application, the Model is the database, the View is the front-end HTML/CSS, and the Controller is the logic that processes user interaction</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The CGI program takes in input from the user via the webpage, does the processing, and outputs information back to the front-end.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":392,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://chanjinhao.files.wordpress.com/2019/04/cgi.gif" alt="" class="wp-image-392" /></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>CGI is a generic name for any program, or script that runs at the back end to process the user input. This program can be written in languages such as Python, C or C++. An example of a Python CGI is:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>http://www.test.com/cgi-bin/hello.py?key1=value1&amp;key2=value2</code></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Programming vs CGI Programming</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Most of us are familiar and have experience with the languages mentioned above, but there is a difference between conventional programming with those languages, and programming to conform to CGI standard.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Below shows a code snippet of CGI programming in Python:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>#!/usr/bin/python

print "Content-type:text/html\r\n\r\n"
print '&lt;html&gt;'
print '&lt;head&gt;'
print '&lt;title&gt;Hello Word - First CGI Program&lt;/title&gt;'
print '&lt;/head&gt;'
print '&lt;body&gt;'
print '&lt;h2&gt;Hello Word! This is my first CGI program&lt;/h2&gt;'
print '&lt;/body&gt;'
print '&lt;/html&gt;'</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>There are two main differences here:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>The CGI program must start with a MIME-type header. <ul><li>MIME, which stands for  <strong>Multipurpose Internet Mail Extensions</strong> is a HTTP header which tells the client what sort of content it's receiving.</li><li><code>print "Content-type:text/html\r\n\r\n"</code></li></ul></li><li>The content of the output must be in HTML format, or other formats that the browser is able to display</li></ol>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>CGI Environment Variables<br></h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>When programming a CGI program, there are some environment variables that are standard across all CGI, regardless of languages used.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Some examples of these are: </p>
<!-- /wp:paragraph -->

<!-- wp:table -->
<table class="wp-block-table"><tbody><tr><td>HTTP_COOKIE</td><td>The visitor's cookie, if one is set</td></tr><tr><td>HTTP_HOST</td><td>The hostname of the page being attempted</td></tr><tr><td>HTTP_REFERER</td><td>The URL of the page that called your program</td></tr><tr><td>HTTP_USER_AGENT</td><td>The browser type of the visitor</td></tr></tbody></table>
<!-- /wp:table -->

<!-- wp:paragraph -->
<p>You can see the full list of CGI environment variables by searching it online.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>CGI Vulnerabilities</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Most CGI vulnerabilities lie in the fast that the inputs from the users are not properly checked and parsed. As a result, the user can perform unintended actions on your server such as directory traversal  or RCE.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>391</wp:post_id>
		<wp:post_date>2019-04-08 17:11:20</wp:post_date>
		<wp:post_date_gmt>2019-04-08 09:11:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>what-is-a-cgi</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cgi"><![CDATA[cgi]]></category>
		<category domain="category" nicename="hacking"><![CDATA[Hacking]]></category>
		<category domain="category" nicename="security"><![CDATA[Security]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[29521742886]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1554714684]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cgi</title>
		<link>http://chanjinhao.com/cgi/</link>
		<pubDate>Mon, 08 Apr 2019 08:04:17 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/04/cgi.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>392</wp:post_id>
		<wp:post_date>2019-04-08 16:04:17</wp:post_date>
		<wp:post_date_gmt>2019-04-08 08:04:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>cgi</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/04/cgi.gif</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/04/cgi.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:471;s:6:"height";i:129;s:4:"file";s:80:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/04/cgi.gif";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:3156;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>UEFI and Secure Boot</title>
		<link>http://chanjinhao.com/2019/04/09/uefi-and-secure-boot/</link>
		<pubDate>Tue, 09 Apr 2019 08:12:56 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?p=397</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Secure Boot is a verification mechanism to ensure that code launched by the firmware is trusted. It ensures that all system level drivers are signed and trusted.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Before we talk about secure boot and how it works, we need to have some understand of UEFI (Unified Extensible Firmware Interface)</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Overview of BIOS and UEFI</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Both UEFI and BIOS are firmwares, and are programs that run upon booting your system.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>UEFI provides faster boot time, more security features (such as Secure Boot), and a more usable graphical interface. Below shows the visual difference between BIOS and UEFI:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":398} -->
<figure class="wp-block-image"><img src="https://chanjinhao.files.wordpress.com/2019/04/ximg_5913814ed5e9f.png.pagespeed.gpjpjwpjwsjsrjrprwricpmd.ic_.9qc4wyodnr.png" alt="" class="wp-image-398" /><figcaption>Side by side visual comparison of BIOS and UEFI</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The typical sequence for the BIOS when booting up is:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Perform POST (Power-On Self Test), which checks that the hardware configuration is proper</li><li>Look for the MBR (Master Boot Record) on the boot device to launch the boot loader </li><li>Boot loader then launches the Operating System</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>On the other hand, UEFI boots the system by launching EFI's (Extensible Firmware Interfaces) executables, as opposed to running the MBR.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Drawbacks of BIOS</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Some major drawbacks of BIOS booting are it can only boot from an MBR-partitioned disk, and the MBR-partitioned disk can only support up to 2TB of partitions. What this means is that if you use a disk bigger than 2TB as your boot loader, it will only show that it has 2TB of space.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>GPT partitioning can support partitions more than 2TB, but BIOS cannot boot from GPT-partitioned disk, only MBR-partitioned disk</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Also, BIOS runs in 16-bit processor mode, and only has 1MB of memory space to execute in. As such due to its limited space, it cannot initialize multiple hardware at once, which leads to a slower boot time.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>These drawbacks are solved by UEFI</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>UEFI</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>One of the biggest change is that the UEFI can run in 32-bit or 64-bit mode, which has way more address space, and is able to boot a lot faster. It also has other features such as</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Being able to boot from a GPT-partitioned disk, hence being able to support disks more than 2TB</li><li>Giving a nice GUI</li><li>Secure Boot feature (more on this later)</li><li>Network boot</li><li>Firmware specification </li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Just like the BIOS which targets the MBR to boot up the OS, UEFI marks one of the GPT-partition with a boot flag, and that partition becomes an EFI partition with its own EFI filesystem in FAT32 format.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The layout of the EFI filesystem is such that every OS has its own directory, which stores all the necessary files for loading the OS</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>/EFI
    /Boot
    /Microsoft
    /Ubuntu</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3>UEFI Legacy Mode<br></h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Operating Systems that are installed in BIOS mode cannot be booted using UEFI, vice-versa. To boot a BIOS install OS in UEFI mode, you have to reinstall the entire system. To get around this hassle, UEFI supports legacy mode</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>UEFI Legacy will make the UEFI act just like a BIOS, and this throws away many of the features such as Fast Boot and Secure Boot. UEFI Legacy allows the system to boot from MBR-partitioned disks, and allows booting to be not from EFI partitions.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Secure Boot</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Advanced malwares target the bootloader as a vector of attack, which launches their malicious process before the OS is launched.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Secure Boot is a feature in UEFI which aims to make the booting process more secure by disallowing unsigned code to run in the pre-boot phase. Secure Boot only allows signed bootloaders and drivers that are trusted by the Original Equipment Manufacturer (OEM) to run.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When the PC first runs, it checks the signature of each piece of booting software. If the signatures are valid, then the firmware passes control to the OS.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The OEMs creates Secure Boot keys and store them on the firmware, which are used for the verification process of Secure Boot.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Secure Boot is also customizable, and you can control which signing certificates are present for checking. You can install or remove certificates that Secure Boot uses for checking. For example, if an organization uses Linux, they can remove all of Microsoft's certificates, and install their own organization's certificate in place. Secure Boot then uses those certificates for verification.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This customization is also available to any individual user, where you can sign your own bootloader and device drivers.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Secure Boot and Linux</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>The whole concept of Secure Boot was built around Microsoft systems, and Linux distros were not made in mind for this. As such, there were a few hurdles to overcome when applying Secure Boot to Linux distros.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The first money grabbing move by Microsoft was to let Linux distros pay a one-time fee of $99 on Microsoft Sysdev Portal to apply for their bootloaders to be signed and recognized by Secure Boot. This way, these Linux distros work with Secure Boot out-of-the-box in the machines.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In Linux, it's common for developers to develop their own third party modules, which are all unsigned, and will be rejected by the system when trying to <code>insmod</code> them. Linux therefore provides a way to sign their custom binaries or modules using the command <code>sbsign</code> and <code>kmodsign</code> respectively.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>397</wp:post_id>
		<wp:post_date>2019-04-09 16:12:56</wp:post_date>
		<wp:post_date_gmt>2019-04-09 08:12:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>uefi-and-secure-boot</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="secure-boot"><![CDATA[Secure Boot]]></category>
		<category domain="post_tag" nicename="uefi"><![CDATA[UEFI]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1554797579]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[29559052827]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ximg_5913814ed5e9f.png.pagespeed.gpjpjwpjwsjsrjrprwricpmd.ic_.9qc4wyodnr</title>
		<link>http://chanjinhao.com/ximg_5913814ed5e9f-png-pagespeed-gpjpjwpjwsjsrjrprwricpmd-ic_-9qc4wyodnr/</link>
		<pubDate>Tue, 09 Apr 2019 05:16:30 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/04/ximg_5913814ed5e9f.png.pagespeed.gpjpjwpjwsjsrjrprwricpmd.ic_.9qc4wyodnr.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>398</wp:post_id>
		<wp:post_date>2019-04-09 13:16:30</wp:post_date>
		<wp:post_date_gmt>2019-04-09 05:16:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>ximg_5913814ed5e9f-png-pagespeed-gpjpjwpjwsjsrjrprwricpmd-ic_-9qc4wyodnr</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/04/ximg_5913814ed5e9f.png.pagespeed.gpjpjwpjwsjsrjrprwricpmd.ic_.9qc4wyodnr.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/04/ximg_5913814ed5e9f.png.pagespeed.gpjpjwpjwsjsrjrprwricpmd.ic_.9qc4wyodnr.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1164;s:6:"height";i:414;s:4:"file";s:149:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/04/ximg_5913814ed5e9f.png.pagespeed.gpjpjwpjwsjsrjrprwricpmd.ic_.9qc4wyodnr.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:279111;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>800px-Motorola_6800_Assembly_Language</title>
		<link>http://chanjinhao.com/800px-motorola_6800_assembly_language/</link>
		<pubDate>Thu, 11 Apr 2019 02:28:28 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/04/800px-motorola_6800_assembly_language.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>400</wp:post_id>
		<wp:post_date>2019-04-11 10:28:28</wp:post_date>
		<wp:post_date_gmt>2019-04-11 02:28:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>800px-motorola_6800_assembly_language</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/04/800px-motorola_6800_assembly_language.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/04/800px-motorola_6800_assembly_language.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:800;s:6:"height";i:1274;s:4:"file";s:114:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/04/800px-motorola_6800_assembly_language.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:173734;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cropped-800px-motorola_6800_assembly_language.png</title>
		<link>http://chanjinhao.com/cropped-800px-motorola_6800_assembly_language-png/</link>
		<pubDate>Thu, 11 Apr 2019 02:28:40 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">https://chanjinhao.files.wordpress.com/2019/04/cropped-800px-motorola_6800_assembly_language.png</guid>
		<description></description>
		<content:encoded><![CDATA[https://chanjinhao.files.wordpress.com/2019/04/cropped-800px-motorola_6800_assembly_language.png]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>401</wp:post_id>
		<wp:post_date>2019-04-11 10:28:40</wp:post_date>
		<wp:post_date_gmt>2019-04-11 02:28:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>cropped-800px-motorola_6800_assembly_language-png</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/04/cropped-800px-motorola_6800_assembly_language.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/04/cropped-800px-motorola_6800_assembly_language.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_context</wp:meta_key>
			<wp:meta_value><![CDATA[site-icon]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:512;s:6:"height";i:512;s:4:"file";s:122:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/04/cropped-800px-motorola_6800_assembly_language.png";s:5:"sizes";a:4:{s:13:"site_icon-270";a:4:{s:4:"file";s:57:"cropped-800px-motorola_6800_assembly_language-270x270.png";s:5:"width";i:270;s:6:"height";i:270;s:9:"mime-type";s:9:"image/png";}s:13:"site_icon-192";a:4:{s:4:"file";s:57:"cropped-800px-motorola_6800_assembly_language-192x192.png";s:5:"width";i:192;s:6:"height";i:192;s:9:"mime-type";s:9:"image/png";}s:13:"site_icon-180";a:4:{s:4:"file";s:57:"cropped-800px-motorola_6800_assembly_language-180x180.png";s:5:"width";i:180;s:6:"height";i:180;s:9:"mime-type";s:9:"image/png";}s:12:"site_icon-32";a:4:{s:4:"file";s:55:"cropped-800px-motorola_6800_assembly_language-32x32.png";s:5:"width";i:32;s:6:"height";i:32;s:9:"mime-type";s:9:"image/png";}}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:143554;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Hosting your own DNS (and how to setup DNS tunneling)</title>
		<link>http://chanjinhao.com/2019/04/11/hosting-your-own-dns-and-how-to-setup-dns-tunneling/</link>
		<pubDate>Thu, 11 Apr 2019 03:23:53 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?p=404</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Earlier this week, I wrote a post on DNS tunneling, and how to pass information over the web through the DNS protocol by stuffing information in the DNS Name Resolution process.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In this post, we're going to look at how to setup and host your own DNS server. And because you're hosting it, you can essentially choose to reply whatever you want to the subject querying you.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Components</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:list {"ordered":true} -->
<ol><li>VM with a static IP address, and allowed ingress/egress connections for port 53. <ul><li>For this, I spun up a VM on GCP with minimal settings to reduce the cost</li><li>I used a Linux based image because I planned to use bind9 for my DNS (https://wiki.debian.org/Bind9)</li></ul></li><li>A Domain name<ul><li>Head over to <code>my.freenom.com</code> for a free domain name with a <code>.tk</code> TLD</li></ul></li></ol>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Concepts</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:list -->
<ul><li>DNS Resolution<ul><li>When you send a query for a domain name, it queries your DNS for the corresponding IP address tied to the domain name</li><li>Your DNS server then queries the Root Servers, which are DNS servers who hold information about the TLDs such as <code>.com</code> or <code>.tk</code>, and redirects your query to the TLD Server</li><li>The TLD Server stores information about your second level domains. The <code>.com</code> server will store information such as  <code>facebook.com</code> or <code>google.com</code>. In our case, we're using the <code>.tk</code> domain, so the <code>.tk</code> server will hold our website information <code>dnsserver.tk</code>. The TLD server defers the query to <code>dnsserver.tk</code></li><li><code>dnsserver.tk</code> is known as the Authoritative Server, which gives the authoritative response of the IP address</li></ul></li><li>DNS Glue Record<ul><li>A DNS glue record is used for preventing circular dependencies </li><li>This is important when your DNS server is a subdomain of your domain name itself. e.g. <code>ns1.dnsserver.tk</code> is a subdomain of <code>dnsserver.tk</code></li><li>The circular dependency happens when we ask for the IP address of <code>dnsserver.tk</code>, and it tells you to ask it's DNS server <code>ns1.dnsserver.tk</code>. But in order to query <code>ns1.dnsserver.tk</code>, you need the IP address of <code>dnsserver.tk</code></li><li>To solve this issue, we "glue" the IP address of <code>ns1.dnsserver.tk</code></li><li>Now, instead of asking you to query <code>ns1.dnsserver.tk</code>, it'll give you the IP address of <code>ns1.dnsserver.tk</code> directly, breaking the circular dependency</li></ul></li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Execution</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:heading {"level":4} -->
<h4>GCP</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>We will need to spin up the VM, get it's static IP, and host a DNS server on it. this VM will be our <code>ns1.dnsserver.tk</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You can follow this guide on how to setup bind9 on your VM https://www.digitalocean.com/community/tutorials/how-to-configure-bind-as-an-authoritative-only-dns-server-on-ubuntu-14-04</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>On your GCP console, you have to do 2 things</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Open ports 53 to allow DNS traffic to flow through</li><li>Set your IP address to static, instead of ephemeral</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":4} -->
<h4>Domain name console</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>When you register for a new domain name, you can usually configure it. The free domain name we got from <code>my.freenom.com</code> allows your to specify your own Nameserver and glue records.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I've attached screen grabs on how to point the Nameservers to your <code>ns1.dnsserver.tk</code>, and how to glue your IP address to <code>ns1.dnsserver.tk</code> for breaking circular dependency</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":405} -->
<figure class="wp-block-image"><img src="https://chanjinhao.files.wordpress.com/2019/04/2.png" alt="" class="wp-image-405" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>When setting up your glue records for the Nameservers, you can use the same IP address for both records. You need 2 records because when you specify new Nameserver, you need to input minimally 2 records</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":406} -->
<figure class="wp-block-image"><img src="https://chanjinhao.files.wordpress.com/2019/04/1.png" alt="" class="wp-image-406" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Instead of letting Freenom Nameservers to be the authoritative Nameserver, point it to your Nameservers your are hosting.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Conclusion<br></h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>When you set a new Nameserver, you need to wait a few hours for it to propagate the information over to other DNS servers.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In your DNS server, you can choose to return whatever you want when a DNS request comes to your server. In this way, it can be possible to craft it as a C2 communication server. I won't go into details on how to set that up, but this is one of the steps.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>404</wp:post_id>
		<wp:post_date>2019-04-11 11:23:53</wp:post_date>
		<wp:post_date_gmt>2019-04-11 03:23:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hosting-your-own-dns-and-how-to-setup-dns-tunneling</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="dns"><![CDATA[DNS]]></category>
		<category domain="category" nicename="networking"><![CDATA[Networking]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[29630672618]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1554953036]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>32</wp:comment_id>
			<wp:comment_author><![CDATA[Red]]></wp:comment_author>
			<wp:comment_author_email>chonglaaaa@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>https://www.dotabuff.com/players/15442573</wp:comment_author_url>
			<wp:comment_author_IP>118.201.50.146</wp:comment_author_IP>
			<wp:comment_date>2019-04-16 14:09:30</wp:comment_date>
			<wp:comment_date_gmt>2019-04-16 06:09:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Good concept !
Next, please write up DNS tunneling for inflight using Kali.
Don’t forget a disclaimer!
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1555395159.071063;s:5:"event";s:17:"status-unapproved";s:4:"user";s:10:"jinhaochan";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1555395167.785569;s:5:"event";s:15:"status-approved";s:4:"user";s:10:"jinhaochan";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>email_notification_notqueued</wp:meta_key>
				<wp:meta_value><![CDATA[1555395167]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1555394970]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1555394971.212338;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>2</title>
		<link>http://chanjinhao.com/2-3/</link>
		<pubDate>Thu, 11 Apr 2019 03:13:29 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/04/2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>405</wp:post_id>
		<wp:post_date>2019-04-11 11:13:29</wp:post_date>
		<wp:post_date_gmt>2019-04-11 03:13:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>2-3</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/04/2.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/04/2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:893;s:6:"height";i:377;s:4:"file";s:78:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/04/2.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:26648;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>1</title>
		<link>http://chanjinhao.com/1/</link>
		<pubDate>Thu, 11 Apr 2019 03:14:42 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/04/1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>406</wp:post_id>
		<wp:post_date>2019-04-11 11:14:42</wp:post_date>
		<wp:post_date_gmt>2019-04-11 03:14:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/04/1.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/04/1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1134;s:6:"height";i:692;s:4:"file";s:78:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/04/1.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:38243;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Reinventing Capitalism in the Age of Big Data: Summary</title>
		<link>http://chanjinhao.com/2019/04/21/reinventing-capitalism-in-the-age-of-big-data-summary/</link>
		<pubDate>Sun, 21 Apr 2019 12:28:52 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?p=279</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>I've finished this book a few months ago, and realized it'll be useful for me to recap the points I've learnt from the book.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This book talks about how data is the new currency in this era, and how the capitalism landscape will change. The book also proposes some steps to manage this change, and how to make it a fairer market for all</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Chapter 1: Reinventing Capitalism </h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Key ideas:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Difference between conventional markets and data-rich markets is the role of information flowing through them, and how the information gets translated into decisions</li><li>In data-rich markets, we no longer have to condense all our preferences to a single dollar sum value, which can be an oversimplification of our preference</li><li>There are short-comings in data rich markets, which are over reliance on the data, and lack of diversity of the data and algorithms. This could lead to a data-monopoly, where the company with the most data dominates the industry</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Chapter 2: Communicative Coordination</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Key ideas:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Human successes so far is predicated mainly on our ability to communicate and coordinate with each other. Coordination relies on our ability to communicate.</li><li>Technology, more specifically volume of information, is increasing our ability to communicate with each other, hence increasing our coordination tremendously.</li><li>Markets and firms help humans coordinate more efficiently through economies of scale, where managing the pay and decisions of several workers is easier than managing each individual.</li><li>In the Market, decisions are decentralized, producing the "Invisible hand". In the firm, decisions are centralized, and top-down.</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Chapter 3: Markets and Money</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Key Ideas:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>How the structure of the market is linked to information, and how the information flows and are translated to decisions.</li><li>Information, and the cost of transmitting them, is integral to the success of a Market.</li><li>Markets are decentralized, and so is the flow of information. There is no single point of failure in the market.</li><li>Cascades of bad information in the market will lead to a market crash (housing market bubble, stock market crashes)</li><li>A huge volume of information however, will cause our cognitive abilities to fail. Hence, we use money as a denomination to be a summary of our preferences.</li><li>Money encapsulates our preferences and priorities into a single unit of information: Price</li><li>Priced-based markets have been dominating for many years, but it might not be the best to represent the market in the information age.</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Chapter 4: Data-Rich Markets</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Key Ideas:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>The solution is to replace or complement price with rich and comprehensive streams of data. Rather than relying solely on price as an information, we have other sources of data to provide information as well.</li><li>The difference between conventional Markets and Data-Rich Markets is the volume and variety of data flowing through it.</li><li>Three technologies are required to reconfigure the market<ul><li>Use a standard language when comparing our preferences</li><li>Better match preferences along multiple dimensions</li><li>Devise effective way to comprehensively capture all our preferences</li></ul></li><li>Those 3 technologies translate rich data into effective transaction decisions</li><li>One of the challenges of a Data-Rich Market is getting the labels correct for each data</li><li>Transformation from a conventional Market to a Data-Rich Marker: <ul><li>Improvements in data ontology to extract data from multiple streams</li><li>Advances in preference matching algorithms</li><li>Machine Learning to identify preferences from user activity</li></ul></li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Chapter 5: Companies and Control</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Key Ideas:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Firms aim to offer human coordination at a lower cost via economies of scale.</li><li>Information flow in firms were transform from accounting for the past, to a strategic tool for future planning. Scientific Management is the term for collection and processing multiple sources of information in the firm for planning.</li><li>Information and decision making in firms are centralized at the top, with a few instances of delegation.</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Chapter 6: Firm Futures</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Key Ideas:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Firms persist when they operate more efficiently at organizing human effort.</li><li>A focus on improving efficiency relies on two factors:<ul><li>Are there inefficiencies to be eliminated?</li><li>What is the time period to implement the improvements? (Over a longer time, the gains get marginally smaller)</li></ul></li><li>Firms can either Automate decision making, or rearrange their internal organization, which indirectly changes their decision-making structure.</li><li>Restructuring of the organization is a human construct, while automation of decisions removes the decision making process away from the manager to a machine learning system.</li><li>Restructuring still leaves humans in place, while automating decisions completely removes the need for humans.</li><li>In future, firms may end up as one of the two forms<ul><li>A firm that owns most of the resources needed for operations and employs some humans, but is manged and run by machines</li><li>A firm that relies on market mechanisms, but sheds away most of their organizational functions</li></ul></li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Chapter 7: Capital Decline</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Key Ideas:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>In Data-Rich Markets, consumers no longer use price as an indicator of information. Money thus loses one of it's functions, though it won't lose it's usefulness entirely.</li><li>As market participants look for and consider richer data, fewer of them will rely on money, and wont be willing to pay as much for it's informational function. This is detrimental to banks.</li><li>Money thus cannot convey multiple sources of information to the consumer, and the consumers must rely on other means to obtain the information</li><li>As the economy shifts to being Data-Rich, most information flows will not come from the banks. Banks will still handle transactions, but it will not be the source of information as it used to be.</li><li>The demise of money as the primary conveyor of information means there will be a decline in the role of Capital as well</li><li>Capital conveys information. It signals that a company has assets for disposal that it can exchange for other factors of production.</li><li>As markets embrace information, the two functions of capital - information and value - will be separated. It will only hold value, but not information.</li><li>As capital is abundant, and fewer companies are looking for capital, this means supply of capital outstrips demand, and thus the returns on investments for capital is falling.</li><li>Banks thus try to cut cost, and reinvent themselves as information intermediaries</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Chapter 8: Feedback Effects</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Key Ideas:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>There are three distinct effects at play when markets become concentrated<ul><li>Scale Effect - Economies of scale</li><li>Network Effect - Value of service increases when more people engage in it</li><li>Feedback Effect - Systems gain feedback to learn</li></ul></li><li>Scale decreases cost, Network expands utility, and Feedback improves the product.</li><li>Volume of data greatly increases the Feedback effect, and companies that hold monopoly over data have an advantage over smaller companies with little and poor data.</li><li>Machine learning systems thus undermine competition, and data hoarding can be anti-competitive.</li><li>Open algorithms are not as helpful as open data to combat anti-competitive behavior.</li><li>Large companies wont lose anything when they share a small portion of their data. Their products will still improve, but you would help other smaller companies improve their products as well.</li><li>Relying solely on one decision making machine learning model is also fatal, as it is a bottleneck for mistakes. There should thus also have competition for decision making systems</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Chapter 9: Unbundling Work</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Key Ideas:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Data-Rich Markets and data-driven machine learning systems are changing the way humans work. There is a decrease in the percentage of people participating in the labor force.</li><li>Automation will slowly replace humans in the workforce. There are two ways to respond to this shift:<ul><li>Distributive</li><li>Participatory</li></ul></li><li>Distributive: As income shifts from labor to capital, the automation income can be taxed. Example, taxing machine and computers running the machine learning models - Robotax</li><li>Participatory: Retraining workers who have been made redundant.</li><li>Proposal of Universal Basic Income: Just enough money for basic necessities like food, shelter and education.</li><li>Not all automation replaces work, but some can help relief work and make it easier. - labor augmenting</li><li>Companies that hold dominance in the market, with strong feedback, and monopoly on data lead to significant market concentration: Google, Facebook, Amazon.</li><li>We need to define elements of work, and make them flexible enough to be recombined. UBI provides flexibility in the human choice when choosing work, because some tension in income requirements is alleviated.</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Chapter 10: Human Choice</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Key Ideas:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>In a world of automation and machine performing decision making, what would humans do?</li><li>Task of humans, is not to be efficient, like robots, but to be creative and adventurous and feel alive, unlike robots</li><li>By freeing our minds very several mundane and routine decisions, we can focus on things that really matter</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>279</wp:post_id>
		<wp:post_date>2019-04-21 20:28:52</wp:post_date>
		<wp:post_date_gmt>2019-04-21 12:28:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>reinventing-capitalism-in-the-age-of-big-data-summary</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="big-data"><![CDATA[Big Data]]></category>
		<category domain="category" nicename="book-review"><![CDATA[Book Review]]></category>
		<category domain="category" nicename="data-science"><![CDATA[Data Science]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1555857722]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[29999661238]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>What is Maximum Likelihood Estimation?</title>
		<link>http://chanjinhao.com/2019/04/28/what-is-maximum-likelihood-estimation/</link>
		<pubDate>Sun, 28 Apr 2019 01:44:34 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?p=285</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>In machine learning, we often perform what we call <strong>parameter estimation</strong>, which are the weights that are assigned to each feature of the input data.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For example, in a simple linear model, we use the equation <code>y=mx + c</code> , and <code>m</code> and <code>c</code> are your parameters to be estimated. For different values of the parameters, we build different models that produce different estimations of the data</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":286} -->
<figure class="wp-block-image"><img src="https://chanjinhao.files.wordpress.com/2019/01/parameters.png" alt="" class="wp-image-286" /><figcaption>Given different parameter values, we get different models. In the case of a linear model, each model is a different line on the graph.</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Maximum likelihood is a technique for parameter value estimation.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>MLE Parameter Estimation</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Whenever we create a model with certain parameters, the outputs of the model (or the prediction) can be plotted as a probability distribution as well.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>What MLE does it to try to make the distribution of the model close to the distribution of the observed data. Intuitively, this makes the model more accurate, as it becomes more representative of the actual data.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For example, given the following training data distribution points:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":287} -->
<figure class="wp-block-image"><img src="https://chanjinhao.files.wordpress.com/2019/01/1-z3jjgvetojmplfvmwiur3q.png" alt="" class="wp-image-287" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>We want to find out which of the graphs below has the highest probability of plotting those points. Each graph has different parameter values, and so they are plotted in different spaces on the graph.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":288} -->
<figure class="wp-block-image"><img src="https://chanjinhao.files.wordpress.com/2019/01/1-ulkl0nz1vfg6bmfiqpckzq.png" alt="" class="wp-image-288" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Just by visual inspection, we can see that the blue line is the graph with the correct parameters that produces those data points. But of course in a machine, there is no visual inspection, only <strong>maths</strong>.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Calculating the MLE<br></h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>We want to calculate what is the total probability of observing all the generated data, or the joint probability of all the data points.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For a single data point for an assume Gaussian distribution, we have the following equation</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":289} -->
<figure class="wp-block-image"><img src="https://chanjinhao.files.wordpress.com/2019/01/1-t4zrihvhtlzjzsvcx3jrjg.png" alt="" class="wp-image-289" /><figcaption>Probability for observing 1 point</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>For 3 data points, we have the following joint probability:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":290} -->
<figure class="wp-block-image"><img src="https://chanjinhao.files.wordpress.com/2019/01/1-rfzbq614ir4zewbm3k1v0q.png" alt="" class="wp-image-290" /><figcaption>Joint probability for observing 3 points</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>This can be extended to <code>n</code> number of points</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To calculate the MLE of the parameters, we need to find the values of the parameters in the equation that gives us the maximum value of the probability. To find the maximum, we get the differential of the equation and set it to 0, and solve for the parameters.<br></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Extending the MLE to the least squares method</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>When the distribution is Gaussian, the process of finding the MLE is similar to the least squared method.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p> For least squares estimation we want to find the line that  minimizes the total squared distance between the data points and the  regression line.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When the data distribution is assumed to be Gaussian, the maximum probability is  found when the data points get closer to the mean value.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Since the Gaussian distribution is symmetric, this is equivalent to minimizing the distance between the data points and the mean value. </p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>285</wp:post_id>
		<wp:post_date>2019-04-28 09:44:34</wp:post_date>
		<wp:post_date_gmt>2019-04-28 01:44:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>what-is-maximum-likelihood-estimation</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="data-science"><![CDATA[Data Science]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[30232806535]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1556422399]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Say NO to Overfitting!</title>
		<link>http://chanjinhao.com/2019/05/05/say-no-to-overfitting/</link>
		<pubDate>Sun, 05 May 2019 05:58:37 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?p=292</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Just some experience I've encountered while working on a very small data set of 1703 training samples, and 1705 testing samples.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>One way to combat overfitting is to use cross validation. While doing so, it's important for you not to just look at the final validation score, but also observe the training process itself.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If we just look at the final CV result, we see an astounding <code>~92%</code> accuracy. This should raise some alarms that shout "Overfitting!". And this is an accurate observation, because when submitted to the Kaggle leader board, it got a measly <code>0.64</code>, which was below the baseline! And more horribly, the difference between CV and LB score is <code>~30%</code></p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":294} -->
<figure class="wp-block-image"><img src="https://chanjinhao.files.wordpress.com/2019/01/xgb2.png" alt="" class="wp-image-294" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>We can also observe the huge disparity between the training error and validation error. A training error of <code>0%</code>? And validation error of <code>~8%</code>? Something is really wrong.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Preventing overfitting in XGB</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Since I've used XGBoost, there are several techniques available to combat overfitting, such as regularization, maximum depth of tree and bagging fractions. After applying all of those, I get a final CV score of <code>~74%</code>, but if we observe the disparity between the training error and validation error, the difference is only <code>~2%</code>!</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":293} -->
<figure class="wp-block-image"><img src="https://chanjinhao.files.wordpress.com/2019/01/xgb1.png" alt="" class="wp-image-293" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>After uploading that to the leader board, I see my score rise up to <code>0.69</code>. The difference between my CV score and the LB is drop drastically from <code>~30%</code> to <code>~3%</code>! Classic example of overfitting.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Aside from feature engineering, a lot of effort should also go into ensuring your model is not too complex for very simple data.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>292</wp:post_id>
		<wp:post_date>2019-05-05 13:58:37</wp:post_date>
		<wp:post_date_gmt>2019-05-05 05:58:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>say-no-to-overfitting</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="data-science"><![CDATA[Data Science]]></category>
		<category domain="post_tag" nicename="overfitting"><![CDATA[Overfitting]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[30476058294]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1557045314]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_e1ca6bb38be548dc0f8ea54a7d77ad24</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_2749830b9e530677eebff0627c875d31</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_a26624a9180eeb54c9502f0e8139c270</wp:meta_key>
			<wp:meta_value><![CDATA[<blockquote class="wp-embedded-content" data-secret="ZgGez4MZfj"><a href="https://www.pentestpartners.com/security-blog/exfiltration-by-encoding-data-in-pixel-colour-values/">Exfiltration by encoding data in pixel colour values</a></blockquote><iframe title="&#8220;Exfiltration by encoding data in pixel colour values&#8221; &#8212; Pen Test Partners" class="wp-embedded-content" sandbox="allow-scripts" security="restricted" style="position: absolute; clip: rect(1px, 1px, 1px, 1px);" src="https://www.pentestpartners.com/security-blog/exfiltration-by-encoding-data-in-pixel-colour-values/embed/#?secret=ZgGez4MZfj" data-secret="ZgGez4MZfj" width="500" height="282" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_time_a26624a9180eeb54c9502f0e8139c270</wp:meta_key>
			<wp:meta_value><![CDATA[1557469598]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Tips for Kaggling</title>
		<link>http://chanjinhao.com/2019/05/12/tips-for-kaggling/</link>
		<pubDate>Sun, 12 May 2019 03:31:01 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?p=297</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>I've been doing Kaggle competitions for awhile (although with not much success), and I've learning quite a few things along the way. One of which is how to properly approach the problem, and iterate through it to climb the LB (leader board).</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Setting the baseline</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>The first thing I would do is to use some very simple features, and build a quick model that has a relatively low bias.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I'll then use cross validation to ensure that I have low variance between train-test splits. This ensures that i'm not overfitting to any segment of the training data.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>After getting a satisfactory bias and variance value, we cross our fingers, and submit our prediction to see how well it does on the LB!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There are now 3 things you need to take note of:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Cross Validation Score (CV Score)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Leader board Score (LB Score)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Difference between CV and LB Score (Your variance on the testing set)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If the difference between your CV and LB is high, you're overfitting the training data. Try to tune your model so that the difference isn't too high.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Feature Generation</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Now that you got your baseline, <strong>Do&nbsp;Not&nbsp;Modify&nbsp;Your&nbsp;Model's&nbsp;Parameters!</strong>..... yet</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Using parameters for the baseline model, you want to generate more features to increase your CV score. Then you make submissions to the LB to checkout your LB score. If your CV score increases, but your LB score stays the same or decreases, you're overfitting.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here's a snippet of my comments I used to keep track of my CV/LB climb:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>xgb_params = {
    'max_depth': 4,  # the maximum depth of each tree
    'eta': 0.01,  # the training step for each iteration
    'silent': 1,  # logging mode - quiet
    'objective': 'multi:softprob',  # error evaluation for multiclass training
    'gamma': 0.9,
    'alpha': 0.3,
    'colsample_bytree' : 0.09,
    'subsample' : 0.09,
    'num_class': 9}  # the number of classes that exist in this datset

## Original
nfolds = 5
CV = 0.7299
std: 0.0112
LB = 0.67291

Difference = 0.05699

## changed rolling window size
nfolds = 5
CV = 0.7458
std: 0.0207
LB = 0.67995

Difference = 0.06585

## added quantile features
nfolds = 5
CV = 0.7564
std: 0.0167
LB = 0.68347

Difference = 0.07293

## dropping mean
using smaller feature set (50)
nfolds = 5
CV = 0.7670
std: 0.0243
LB = 0.69284

Difference = 0.07416

## adding iqr and trimming mean
using smaller feature set (70)
nfolds = 5
CV = 0.7740
std: 0.0257
LB = 0.69988

Difference = 0.07412</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>As you can see, my parameters are the same, and I'm only adding or removing features to push up my CV and LB</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Feature Selection</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Feature generation was the process of adding in new features, but using all the features (if you have a lot of them), is usually too noisy.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Most models like XGBoost and LightGBM have functions to tell you which features have the most impact on your prediction. You would want to trim your selected features to only include those high impact ones.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>By doing this, I was able to push my score up just a little bit more!</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Parameter Tuning</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Once you're done with Feature Generation and Feature Selection, then we come to parameter tuning phase.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In this phase, we want to tune the parameters to reduce bias, variance, and CV-LB difference. You can use functions like GridSearch to efficiently search across a range of parameters</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Conclusion</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Baseline -&gt; Feature Generation -&gt; Feature Selection -&gt; Parameter Tuning!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This isn't a silver bullet to all competitions, but its the strategy that I use regularly. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In data science and Kaggle, there are plenty of moving parts, and it's easy to get lost in the myriad of factors affecting your prediction. It's always good to have a system to isolate and tackle the problem!</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>297</wp:post_id>
		<wp:post_date>2019-05-12 11:31:01</wp:post_date>
		<wp:post_date_gmt>2019-05-12 03:31:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>tips-for-kaggling</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="data-science"><![CDATA[Data Science]]></category>
		<category domain="post_tag" nicename="kaggle"><![CDATA[Kaggle]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[30719462285]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1557638092]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>How to harden a Linux Kernel</title>
		<link>http://chanjinhao.com/2019/04/17/how-to-harden-a-linux-kernel/</link>
		<pubDate>Wed, 17 Apr 2019 03:21:15 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?p=409</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Hardening means to make the something more secure and resilient to attacks. When people talk about hardening, they usually talk about server hardening, which includes things like</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>IP / MAC address white listing</li><li>Closing unused ports</li><li>Uninstalling unused systems</li><li>Disabling <code>root</code> login (no one can login as root, only a normal user who can <code>sudo</code>)</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>These are legitimate areas of hardening, but another area of hardening involves securing the kernel itself at compile time. This deals with much lower level of security such as Address Space Layout Randomization (ASLR) or Read/Write permissions at different memory regions (SMEP/SMAP). In this post, I'll be writing about these 2 technologies.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Kernel Level Hardening</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:heading {"level":4} -->
<h4>Kernel Address Space Layout Randomization (KASLR)</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>ASLR is a memory protection technique that randomizes the address layout of the executables that are loaded in memory. How this prevent an attack is to disallow memory space predictability.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>An attacker, if he knows your target OS (example Ubuntu 14.04), he can spin up the exact same OS in his testing environment. If there is no ASLR, the executables such as <code>glibc</code> will be loaded in the same address space every time, allowing him to make an exploit targeting predictable addresses.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>With ASLR, the executable will always be in a different address space, and it will cause the kernel to crash (Memory access violation) if an exploit runs.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>ASLR can be configured at <code>/proc/sys/kernel/randomize_va_space</code> with the following values:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>0 - No Randomization: All addresses are static</li><li>1 - Conserved Randomization: <ul><li>Stack ASLR: Each execution of a program results in different stack memory layout</li><li>LIBS/MMAP ASLR: Each execution of a program results in different <code>mmap</code> memory space layout</li><li>EXEC ASLR: Each program that was complied with <code>-fPIE -pie</code>, which stands for Position Independent Executables, will get loaded into different memory locations</li></ul></li><li>2 - Full Randomization: <code>brk</code> ASLR<ul><li>All of the above, including <code>brk</code> ASLR</li><li>Previously, <code>brk</code> memory areas were always allocated after the EXEC memory area</li><li> <code>brk</code> ASLR randomizes the <code>brk</code> memory area relative to the EXEC memory area </li></ul></li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Possible Exploits: One of the weakness of ASLR is that even though the libraries and executables are randomly located within the memory space, within the library, the functions are still at a fixed offset. This means that if the attack want to leverage on a <code>glibc</code> function, all he has to do is find the starting point of <code>glibc</code>, and the function will always be at the same offset</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>SMEP/SMAP<br></h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Supervisor Mode Execution Protection (SMEP) and Supervisor Mode Access Prevention (SMAP) are techniques to prevent unauthorized memory access.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>SMAP prevents supervisor mode from accessing (rw) user-space memory space. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>SMEP prevents user mode from executing (x) in kernel memory space</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>SMAP is important because while you're in kernel space, you have full privileges to perform any actions. If we allow this privilege to "escape" and return to user-space memory, he can perform even more unauthorized actions and get user data.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>SMEP is important for similar reasons, where the user cannot execute in kernel space to perform unprivileged actions affecting the kernel.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Possible Exploits:  Linux kernel has a function <code>native_write_cr4</code> which can overwrite bits in the CR4 control register. One of the bit controls if SMEP/SMAP is on or off. If the attack can call the function to overwrite the bits in the control register, he can turn of SMEP/SMAP</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p> <br></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>409</wp:post_id>
		<wp:post_date>2019-04-17 11:21:15</wp:post_date>
		<wp:post_date_gmt>2019-04-17 03:21:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>how-to-harden-a-linux-kernel</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="aslr"><![CDATA[ASLR]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="security"><![CDATA[Security]]></category>
		<category domain="post_tag" nicename="smap"><![CDATA[SMAP]]></category>
		<category domain="post_tag" nicename="smep"><![CDATA[SMEP]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1555471278]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[29846085816]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>OS Inference through Ping TTL</title>
		<link>http://chanjinhao.com/2019/04/18/os-inference-through-ping-ttl/</link>
		<pubDate>Thu, 18 Apr 2019 06:00:25 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?p=414</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading {"level":3} -->
<h3>Terminologies</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:list -->
<ul><li>Ping: An command to discover the availability of a target machine. It sends an ICMP Echo Request, and waits for an Echo Reply</li><li>TTL: Time-To-Live, which tells the network routers how long the packet should live. For each router that passes the packet on, the TTL reduces by 1. Once TTL reaches 0, the packet is discarded, and an ICMP message is sent to the original sender to resend the packet.</li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Infering OSes From TTLs</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Each OS has a different TTL for their Echo Reply packet, and based on that, we can infer what OS is sending us the reply.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Lets look at what happens when we ping <code>google.com</code></p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":415} -->
<figure class="wp-block-image"><img src="https://chanjinhao.files.wordpress.com/2019/04/untitled.png" alt="" class="wp-image-415" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The TTL that is show there is the Echo Reply that Google has sent us, and when it has reached our machine, it was "left" with 42 TTL. So how do we find out how long the Echo Reply travelled? <code>tracert</code>!</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":416} -->
<figure class="wp-block-image"><img src="https://chanjinhao.files.wordpress.com/2019/04/untitled-1.png" alt="" class="wp-image-416" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>How <code>tracert</code> works is that it first sends out a packet with TTL 1 and incrementally bumps up that amount so that at each router, it collect the IP address information about it. When a packet reaches a router with TTL=0, it is sent back to the originating machine, along with it's (the router) IP address.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Request time out happens when the network router has specifically blocked ICMP ping request, so when a packet reaches there with TTL=0, nothing is sent back.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We can see that for traffic that travel from <code>google.com</code> to our machine takes 23 hops, and when it reached out machine, it was left with 42 TTL. With that, we can conclude that when it was sent out, it had an initial TTL of <code>23+42=65</code>. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We can look at the table below to find out that Linux servers using ICMP protocol has a TTL of 64, which has the closest value to ours.<br></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Table of TTLs for each OS</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:table -->
<table class="wp-block-table"><tbody><tr><td>Device /
  OS</td><td>Version</td><td>Protocol</td><td>TTL</td></tr><tr><td>AIX</td><td>-</td><td>TCP</td><td>60</td></tr><tr><td>AIX</td><td>-</td><td>UDP</td><td>30</td></tr><tr><td>AIX</td><td>3.2, 4.1</td><td>ICMP</td><td>255</td></tr><tr><td>BSDI</td><td>BSD/OS 3.1 and 4.0</td><td>ICMP</td><td>255</td></tr><tr><td>Compa</td><td>Tru64 v5.0</td><td>ICMP</td><td>64</td></tr><tr><td>Cisco</td><td>-</td><td>ICMP</td><td>254</td></tr><tr><td>DEC
  Pathworks</td><td>V5</td><td>TCP and UDP</td><td>30</td></tr><tr><td>Foundry</td><td>-</td><td>ICMP</td><td>64</td></tr><tr><td>FreeBSD</td><td>2.1R</td><td>TCP and UDP</td><td>64</td></tr><tr><td>FreeBSD</td><td>3.4, 4.0</td><td>ICMP</td><td>255</td></tr><tr><td>FreeBSD</td><td>5</td><td>ICMP</td><td>64</td></tr><tr><td>HP-UX</td><td>9.0x</td><td>TCP and UDP</td><td>30</td></tr><tr><td>HP-UX</td><td>10.01</td><td>TCP and UDP</td><td>64</td></tr><tr><td>HP-UX</td><td>10.2</td><td>ICMP</td><td>255</td></tr><tr><td>HP-UX</td><td>11</td><td>ICMP</td><td>255</td></tr><tr><td>HP-UX</td><td>11</td><td>TCP</td><td>64</td></tr><tr><td>Irix</td><td>5.3</td><td>TCP and UDP</td><td>60</td></tr><tr><td>Irix</td><td>6.x</td><td>TCP and UDP</td><td>60</td></tr><tr><td>Irix</td><td>6.5.3, 6.5.8</td><td>ICMP</td><td>255</td></tr><tr><td>juniper</td><td>-</td><td>ICMP</td><td>64</td></tr><tr><td>MPE/IX
  (HP)</td><td>-</td><td>ICMP</td><td>200</td></tr><tr><td>Linux</td><td>2.0.x kernel</td><td>ICMP</td><td>64</td></tr><tr><td>Linux</td><td>2.2.14 kernel</td><td>ICMP</td><td>255</td></tr><tr><td>Linux</td><td>2.4 kernel</td><td>ICMP</td><td>255</td></tr><tr><td>Linux</td><td>Red Hat 9</td><td>ICMP and TCP</td><td>64</td></tr><tr><td>MacOS/MacTCP</td><td>2.0.x</td><td>TCP and UDP</td><td>60</td></tr><tr><td>MacOS/MacTCP</td><td>X (10.5.6)</td><td>ICMP/TCP/UDP</td><td>64</td></tr><tr><td>NetBSD</td><td>-</td><td>ICMP</td><td>255</td></tr><tr><td>Netgear
  FVG318</td><td>-</td><td>ICMP and UDP</td><td>64</td></tr><tr><td>OpenBSD</td><td>2.6 &amp; 2.7</td><td>ICMP</td><td>255</td></tr><tr><td>OpenVMS</td><td>07.01.2002</td><td>ICMP</td><td>255</td></tr><tr><td>OS/2</td><td>TCP/IP 3.0</td><td>-</td><td>64</td></tr><tr><td>OSF/1</td><td>V3.2A</td><td>TCP</td><td>60</td></tr><tr><td>OSF/1</td><td>V3.2A</td><td>UDP</td><td>30</td></tr><tr><td>Solaris</td><td>2.5.1, 2.6, 2.7, 2.8</td><td>ICMP</td><td>255</td></tr><tr><td>Solaris</td><td>2.8</td><td>TCP</td><td>64</td></tr><tr><td>Stratus</td><td>TCP_OS</td><td>ICMP</td><td>255</td></tr><tr><td>Stratus</td><td>TCP_OS (14.2-)</td><td>TCP and UDP</td><td>30</td></tr><tr><td>Stratus</td><td>TCP_OS (14.3+)</td><td>TCP and UDP</td><td>64</td></tr><tr><td>Stratus</td><td>STCP</td><td>ICMP/TCP/UDP</td><td>60</td></tr><tr><td>SunOS</td><td>4.1.3/4.1.4</td><td>TCP and UDP</td><td>60</td></tr><tr><td>SunOS</td><td>5.7</td><td>ICMP and TCP</td><td>255</td></tr><tr><td>Ultrix</td><td>V4.1/V4.2A</td><td>TCP</td><td>60</td></tr><tr><td>Ultrix</td><td>V4.1/V4.2A</td><td>UDP</td><td>30</td></tr><tr><td>Ultrix</td><td>V4.2 – 4.5</td><td>ICMP</td><td>255</td></tr><tr><td>VMS/Multinet</td><td>-</td><td>TCP and UDP</td><td>64</td></tr><tr><td>VMS/TCPware</td><td>-</td><td>TCP</td><td>60</td></tr><tr><td>VMS/TCPware</td><td>-</td><td>UDP</td><td>64</td></tr><tr><td>VMS/Wollongong</td><td>1.1.1.1</td><td>TCP</td><td>128</td></tr><tr><td>VMS/Wollongong</td><td>1.1.1.1</td><td>UDP</td><td>30</td></tr><tr><td>VMS/UCX</td><td>-</td><td>TCP and UDP</td><td>128</td></tr><tr><td>Windows</td><td>for Workgroups</td><td>TCP and UDP</td><td>32</td></tr><tr><td>Windows</td><td>95</td><td>TCP and UDP</td><td>32</td></tr><tr><td>Windows</td><td>98</td><td>ICMP</td><td>32</td></tr><tr><td>Windows</td><td>98, 98 SE</td><td>ICMP</td><td>128</td></tr><tr><td>Windows</td><td>98</td><td>TCP</td><td>128</td></tr><tr><td>Windows</td><td>NT 3.51</td><td>TCP and UDP</td><td>32</td></tr><tr><td>Windows</td><td>NT 4.0</td><td>TCP and UDP</td><td>128</td></tr><tr><td>Windows</td><td>NT 4.0 SP5-</td><td>-</td><td>32</td></tr><tr><td>Windows</td><td>NT 4.0 SP6+</td><td>-</td><td>128</td></tr><tr><td>Windows</td><td>NT 4 WRKS SP 3, SP 6a</td><td>ICMP</td><td>128</td></tr><tr><td>Windows</td><td>NT 4 Server SP4</td><td>ICMP</td><td>128</td></tr><tr><td>Windows</td><td>ME</td><td>ICMP</td><td>128</td></tr><tr><td>Windows</td><td>2000 pro</td><td>ICMP/TCP/UDP</td><td>128</td></tr><tr><td>Windows</td><td>2000 family</td><td>ICMP</td><td>128</td></tr><tr><td>Windows</td><td>Server 2003</td><td>-</td><td>128</td></tr><tr><td>Windows</td><td>XP</td><td>ICMP/TCP/UDP</td><td>128</td></tr><tr><td>Windows</td><td>Vista</td><td>ICMP/TCP/UDP</td><td>128</td></tr><tr><td>Windows</td><td>7</td><td>ICMP/TCP/UDP</td><td>128</td></tr><tr><td>Windows</td><td>Server 2008</td><td>ICMP/TCP/UDP</td><td>128</td></tr><tr><td>Windows</td><td>10</td><td>ICMP/TCP/UDP</td><td>128</td></tr></tbody></table>
<!-- /wp:table -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>414</wp:post_id>
		<wp:post_date>2019-04-18 14:00:25</wp:post_date>
		<wp:post_date_gmt>2019-04-18 06:00:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>os-inference-through-ping-ttl</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="networking"><![CDATA[Networking]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1555567227]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[29886433911]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>untitled</title>
		<link>http://chanjinhao.com/untitled-3/</link>
		<pubDate>Thu, 18 Apr 2019 05:18:47 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/04/untitled.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>415</wp:post_id>
		<wp:post_date>2019-04-18 13:18:47</wp:post_date>
		<wp:post_date_gmt>2019-04-18 05:18:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>untitled-3</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/04/untitled.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/04/untitled.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:691;s:6:"height";i:208;s:4:"file";s:85:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/04/untitled.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:11181;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>untitled-1</title>
		<link>http://chanjinhao.com/untitled-1-2/</link>
		<pubDate>Thu, 18 Apr 2019 05:28:01 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/04/untitled-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>416</wp:post_id>
		<wp:post_date>2019-04-18 13:28:01</wp:post_date>
		<wp:post_date_gmt>2019-04-18 05:28:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>untitled-1-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/04/untitled-1.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/04/untitled-1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:879;s:6:"height";i:461;s:4:"file";s:87:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/04/untitled-1.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:18229;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>CSRF Tokens</title>
		<link>http://chanjinhao.com/2019/04/24/csrf-tokens/</link>
		<pubDate>Wed, 24 Apr 2019 08:13:42 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?p=419</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>If we look at source codes of HTML forms, we typically can spot this field being rendered on the webpage</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":420} -->
<figure class="wp-block-image"><img src="https://chanjinhao.files.wordpress.com/2019/04/token.png" alt="" class="wp-image-420" /><figcaption><br></figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Sometimes it doesn't have the name called CSRF Token, and it just appears as a random gibberish value being loaded.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This post breaks down the purpose of the token, and what happens behind the scenes with the token</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Understanding CSRF<br></h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>CSRF stands for Cross-Site Request Forgery, and understanding how it works is a prerequisite to understanding CSRF tokens. Below shows a picture of what a CSRF attack looks like</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":421} -->
<figure class="wp-block-image"><img src="https://chanjinhao.files.wordpress.com/2019/04/csrf-cross-site-request-forgery.png" alt="" class="wp-image-421" /></figure>
<!-- /wp:image -->

<!-- wp:list {"ordered":true} -->
<ol><li>The attacker crafts a GET requests that triggers a fund transfer to his account<ul><li><code>GET http://bank.com/transfer.php?account=Attacker&amp;amount=100</code></li></ul></li><li>The attacker embeds this request as a hyperlink<ul><li><code>&lt;a href="<code>http://bank.com transfer.php?account=Attacker&amp;amount=100"&gt; READ MORE... &lt;/a&gt;</code></code></li></ul></li><li>When the user clicks on the link, it triggers the <code>GET</code> request on behalf of the victim</li><li>The <code>GET</code> request is triggered by the victim, and funds are transferred to the Attacker</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>This attack hinges on the fact that the Victim must be logged in to the service, and is already authenticated with an open session with the service.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If the Victim is not logged in, when he clicks on the malicious link, instead of triggering the bad <code>GET</code> request, it will redirect him to the login page instead, thus rendering the attack useless.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>CSRF Tokens</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>CSRF token is a simple concept where include one more argument of a token, that is sort of like a secret password.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p> <code>http://bank.com/transfer.php?account=User&amp;amount=100&amp;token=32Sa2dsa10gB88vcx9cz08f331j=Da</code> </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This token value is a high-entropy value which is hard to guess by the attacker. If on the server side, it receives a wrong or missing CSRF token value, the <code>GET</code> request is rejected and does not execute</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The CSRF token works this way:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Client requests for a HTML page that contains a form</li><li>Server generates two distinct tokens, and sends one as a cookie to the client, and embeds the other as a hidden field in the form</li><li>When the client submits the form, both CSRF tokens must be sent back to the server. The one embedded in the form, and the one in the cookie.</li><li>If the request does not contain both tokens, it's rejected</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>The CSRF token value should be regularly invalidated at a time interval, per request, or when the user logs out.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>CSRF Token Vulnerabilities</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>If traffic carrying the token is not encrypted over HTTPS, the Attacker can sniff the traffic and obtain the CSRF token value and the Cookie, and perform a CSRF token replay attack. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The solution to this is obvious: Always use encryption for communication. Aside from that, per-request-tokens can also be implemented.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>419</wp:post_id>
		<wp:post_date>2019-04-24 16:13:42</wp:post_date>
		<wp:post_date_gmt>2019-04-24 08:13:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>csrf-tokens</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="csrf"><![CDATA[CSRF]]></category>
		<category domain="category" nicename="networking"><![CDATA[Networking]]></category>
		<category domain="category" nicename="security"><![CDATA[Security]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1556093625]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[30096538874]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>token</title>
		<link>http://chanjinhao.com/token/</link>
		<pubDate>Wed, 24 Apr 2019 05:56:39 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/04/token.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>420</wp:post_id>
		<wp:post_date>2019-04-24 13:56:39</wp:post_date>
		<wp:post_date_gmt>2019-04-24 05:56:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>token</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/04/token.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/04/token.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:993;s:6:"height";i:343;s:4:"file";s:82:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/04/token.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:95442;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>csrf-cross-site-request-forgery</title>
		<link>http://chanjinhao.com/csrf-cross-site-request-forgery/</link>
		<pubDate>Wed, 24 Apr 2019 06:18:25 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/04/csrf-cross-site-request-forgery.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>421</wp:post_id>
		<wp:post_date>2019-04-24 14:18:25</wp:post_date>
		<wp:post_date_gmt>2019-04-24 06:18:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>csrf-cross-site-request-forgery</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/04/csrf-cross-site-request-forgery.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/04/csrf-cross-site-request-forgery.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:800;s:6:"height";i:472;s:4:"file";s:108:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/04/csrf-cross-site-request-forgery.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:42706;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>MITRE on Threat Detection</title>
		<link>http://chanjinhao.com/2019/04/25/mitre-on-threat-detection/</link>
		<pubDate>Thu, 25 Apr 2019 09:37:51 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?p=428</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>I  just sat through a webinar by the folks at Red Canary, and they covered some questions regarding threat detection using the MITRE ATT&amp;CK framework.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The webinar sat down with the researchers who created MITRE, and it was quite insightful. Here are some of the notes I took that may be useful for present and future work:</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Top 10 MITRE ATT&amp;CK Techniques</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:list {"ordered":true} -->
<ol><li>Powershell</li><li>Scripting</li><li>Regsvr32</li><li>Connection proxy</li><li>Spearphising</li><li>Masquerading</li><li>Credential Dumping</li><li>Registry run keys</li><li>Rundll32</li><li>Service Execution</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>We can observe that a bulk of the these techniques are actually native operating system utilities, and that adversaries are leveraging on these preinstalled utilities to carry out their attacks. Things like Powershell, Regsvr32 and Rundll32 are very common things that are executed in benign settings.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The implications of this is that we simply can't just "turn off" these services in an attempt to disrupt their Cyber Kill Chain. What has to be done is proper logging and auditing of these services.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For example, we need to turn on logging for Powershell command line, or cmd.exe command line parameters to observe what command is being ran. Also, we need to turn on process tracking to identify which process spawns what other processes. If Microsoft Word spawns cmd.exe or Powershell, we know that something is highly suspicious.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>That being said, there needs to be a fine balance to ensure we don't get too much log by enabling everything. Most activities are normally benign, and having too much logging will induced noise, which may invariably hide the malicious activities!</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Top Data Sources for leveraging on  MITRE ATT&amp;CK<br></h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:list {"ordered":true} -->
<ol><li>Process Monitoring</li><li>File Monitoring</li><li>Process Command-line Parameters</li><li>API monitoring</li><li>Process use of network</li><li>Windows Registry</li><li>Packet capture</li><li>Authentication Logs</li><li>Netflow</li><li>Windows Event Logs</li><li> Network Protocol Analysis</li><li>Binary file metadata</li><li>DLL monitoring</li><li>Loaded DLL</li><li>System Calls</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>If that list is too much, or you find that it's too noisy (or your sysadmin policy says you can't enable such logging), then there is a bare minimum data source is required for threat hunting:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Windows Registry</li><li>File Monitoring</li><li>Process Command-line Parameters</li><li>Process Monitoring</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>These 4 telemetry provides a comprehensive enough picture to perform threat hunting. These 4 data sources will cover most crucial end-point activities. There isn't any network components in this, but that can be incorporated if needed.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3><strong>How do you build up threat hunting plan based on MITRE ATT&amp;CK?</strong></h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p><strong>Know the questions you want to answer, and construct hypotheses around them. Evaluate these hypothesis using various data sources.</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Don't in go blindly. Threat hunting has to be done in a directed manner, and you need to know what you're hunting.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Tools to assist in Threat Hunting</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:list -->
<ul><li>DetectionLab by Chris Long</li><li>ThreatHuting splunk app by Olaf Hartong</li><li>PoSh_ATTCK by ENRW</li><li>ATT&amp;CK Navigator</li><li>Atomic Red Team</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>I've not used the DetectionLab, but I've used the rest quite extensively.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The data resource by Olaf Hartong is really comprehensive, as it covers most TTPs. However, most of the queries are Sysmon oriented, so if your environment does not support Sysmon, you have to find way to tweak the Sysmon queries to match your environment.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>PoSh_ATTCK seems to be a Powershell replica of MITRE, and I did not really find much value add in it.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>ATT&amp;CK Navigator is the standard way of browsing the TTPs. Standard, but very useful. They even link the TTPs to suspected APT groups, which can assist in attribution.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Atomic Red Team is a really useful resource in providing atomic tests to execute. This allows you to replay attacks, and get first hand data in your environment. However, it does not cover all the attacks, and there are some TTPs that are still missing in their atomic test list. Still, a very good resource.<br></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>428</wp:post_id>
		<wp:post_date>2019-04-25 17:37:51</wp:post_date>
		<wp:post_date_gmt>2019-04-25 09:37:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mitre-on-threat-detection</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="mitre"><![CDATA[MITRE]]></category>
		<category domain="category" nicename="security"><![CDATA[Security]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1556185073]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[30136555002]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>What is UPnP? (And how it can be malicious)</title>
		<link>http://chanjinhao.com/2019/04/29/what-is-upnp-and-how-it-can-be-malicious/</link>
		<pubDate>Mon, 29 Apr 2019 12:09:11 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?p=431</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>UPnP, which stands for Universal Plug n Play, is a set of networking protocols used to facilitate adding of new devices to the network. It comes enabled default on most new routers.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For example, when you connect a new printer to the network, it automatically becomes discoverable by all other devices without you having to configure the IP address, or opening ports on the firewall. It does so through the concept of zero-configuration networking, which at it's core consists of</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Automatic assignment of network address</li><li>Automatic distribution and resolution of hostnames</li><li>Automatic location of network services such as printers (through Service Discovery Protocol)</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Device search and advertising is done over HTTP over UDP on port 1900</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This means that any UPnP compatible device can join the network and automatically get an IP address, broadcast it's name, advertise it's capabilities /services on request, and learn about capabilities / services on the network.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>UPnP Setup Steps</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:heading {"level":4} -->
<h4>Addressing</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The device implements a DHCP client, and must search for a DHCP server on the network. If no DHCP server exists on the network, it then assigns itself an IP through AutoIP</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>Discovery</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The device then uses Simple Service Discovery Protocol (SSDP) to advertise it's own service to Control Points (CP) on the network by sending SSDP Alive Messages, which provides very basic information about the device</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>Description</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To learn more about the device, the Control Point must retrieve the device description from the URL provided from the SSDP. The Device Description comes in an XML format, and has information such as model number, serial number and manufacturer name.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>Control</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>After getting the description, the Control Point can send actions to the device via Simple Object Access Protocol (SOAP)</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>Notifications</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The UPnP device can send events or notifications to the Control Points on any changes that happen to it. This uses the General Event Notification Architecture (GENA)</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>Presentation</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>If the device has any pages for presentation, the Control Point can receive it and load it on the web browser</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>How It Is Abused</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>UPnP does not perform any sort of authentication, and assumes that any devices that is connected is trusted.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Also, UPnP can automatically configure port forwarding on the router without having any user intervention, or authentication.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Flash UPnP attack was one of the attack that abused the UPnP protocol, and how it works was by sending a UPnP request to the router to forward ports, thus exposing it to the internet. The attack could also change your primary DNS server with a UPnP request.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The best defense therefore is to <strong>disable UPnP on your routers</strong></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>431</wp:post_id>
		<wp:post_date>2019-04-29 20:09:11</wp:post_date>
		<wp:post_date_gmt>2019-04-29 12:09:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>what-is-upnp-and-how-it-can-be-malicious</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="hacking"><![CDATA[Hacking]]></category>
		<category domain="category" nicename="networking"><![CDATA[Networking]]></category>
		<category domain="category" nicename="security"><![CDATA[Security]]></category>
		<category domain="post_tag" nicename="upnp"><![CDATA[UPnP]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1556539755]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[30275598314]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Looking out for C2 Traffic</title>
		<link>http://chanjinhao.com/2019/05/02/looking-out-for-c2-traffic/</link>
		<pubDate>Thu, 02 May 2019 08:14:12 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?p=434</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:heading -->
<h2>Types of C2 Communication</h2>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>When a host gets infected with a malware, sometimes it will attempt to call back to it's Command and Control (C2) to get, or send information. There are 4 types of C2 communication traffic</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Beacon<ul><li>After a host has been compromised, the malware will send a message heartbeat to the C2 to inform them of it's status. This traffic is just to tell the C2 that it's alive.</li></ul></li><li>Command<ul><li>The command is sent from the C2 to the malware residing on the compromised host. It can either be real-time, or non-real-time. Non-real-time commands means that the command is stored and queued somewhere which the malware can retrieve to execute.</li></ul></li><li>Exfiltration<ul><li>This command is sent from the compromised host to the C2. Exfiltration means sending a payload, and this payload can either be a reply from the malware, or stolen data from the host or network. Exfiltration can be done either immediately on request, or at regular (or deliberately irregular) intervals</li></ul></li><li>Connectivity Check<ul><li>This check is done by the malware to check if it has internet connectivity out. This connection may not talk directly to the C2, but may try to connect to something as benign as Google. If it doesn't have any internet connection, it can either defer talking to the C2, or remove itself entirely from the system.</li></ul></li></ol>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Capturing C2 traffic</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>There are some strategies to capture C2 traffic, such as leveraging on CTI to learn about IOCs, patterns and log entries that may indicate a compromise.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Because C2 traffic is a networking phenomenon, most approaches towards network analysis, such as:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Netflow Analysis for inflow and outflow</li><li>IRC and P2P traffic</li><li>DNS query logs (to look out for DNS tunneling or DGA)</li><li>Unusual port numbers and services</li><li>Unusual timing of connections</li><li>Requests to Social Media at unusual hours</li><li>Packet size</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Below shows an image of the packet sizes versus time, and we can see the start difference between a normal Google search and a Malware</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":435,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://chanjinhao.files.wordpress.com/2019/05/eta-blake-fig-2.png" alt="" class="wp-image-435" /></figure></div>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3>Machine Learning to capture C2 traffic</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Machine learning techniques can be employed to detect C2 traffic. In an extremely noisy environment like network traffic, ML perform anomaly detection by sieving out traffic that stands out. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I did a small sample project which can be seen here:<a href="https://github.com/jinhaochan/BotnetDetection" target="_blank" rel="noreferrer noopener" aria-label=" (opens in a new tab)"> https://github.com/jinhaochan/BotnetDetection</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The model trained took features only from network behavior, and had quite a good performance. Although I must say that more advanced malwares these days come up with creative techniques, and in this case, machine learning might fail to detect them due to the lack to training data. Furthermore, the malware can cleverly disguise themselves to look like normal traffic, and the model we train miss those entries</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Analyzing C2 traffic</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Assuming that you know a malware has infected a host and is talking to a C2 server, you can either setup a honeypot, or try to reverse engineer the malware sample on the host.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Setting up the honeypot is essentially performing an MITM between the malware and the C2 server. We allow the malware to connect to the C2 and internet, while isolating it from other machines on the network to prevent it from spreading. This way, we can capture all the traffic that's flowing to and from the C2, and we can find out what the motive of the malware is.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The second method is getting the sample of the malware on the infected host, and perform reverse engineering to find out what functions and capabilities it has.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>MITRE ATT&amp;CK TTP for C2</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>There is a branch Tactics in the MITRE ATT&amp;CK Framework dedicated to C2, and there is a collection of Techniques they use to identify C2 communication.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you are coming up with a system or model to detect C2 traffic, the matrix can be highly beneficial. But take caution to not fit a round peg into a square hole, the list is not comprehensive. Attackers are aware of MITRE and their TTPs, and will actively build ways around them.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Software to use for detection C2</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Bro (now renamed to Zeek) <a href="https://www.zeek.org/">https://www.zeek.org/</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There are many write ups out there on how to use Zeek to capture and analyze traffic. Zeek is not specific to capturing just C2, but a wide array of network activities</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>434</wp:post_id>
		<wp:post_date>2019-05-02 16:14:12</wp:post_date>
		<wp:post_date_gmt>2019-05-02 08:14:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>looking-out-for-c2-traffic</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c2"><![CDATA[C2]]></category>
		<category domain="post_tag" nicename="command-and-control"><![CDATA[Command and Control]]></category>
		<category domain="category" nicename="networking"><![CDATA[Networking]]></category>
		<category domain="category" nicename="security"><![CDATA[Security]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1556784855]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[30377213798]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>eta-blake-fig-2</title>
		<link>http://chanjinhao.com/eta-blake-fig-2/</link>
		<pubDate>Thu, 02 May 2019 07:52:30 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/05/eta-blake-fig-2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>435</wp:post_id>
		<wp:post_date>2019-05-02 15:52:30</wp:post_date>
		<wp:post_date_gmt>2019-05-02 07:52:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>eta-blake-fig-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/05/eta-blake-fig-2.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/05/eta-blake-fig-2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:740;s:6:"height";i:266;s:4:"file";s:92:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/05/eta-blake-fig-2.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:17954;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Hit Refresh</title>
		<link>http://chanjinhao.com/2019/05/05/hit-refresh/</link>
		<pubDate>Sun, 05 May 2019 04:51:28 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?p=438</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>A book by Satya Nadella, CEO of Microsoft</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This book seems to start off as a biography, but it's intent becomes clear by the second chapter, that it's about the changes Satya brings about in Microsoft, and the anticipation of the future innovations such as Mixed Reality, Artificial Intelligence, and Quantum Computing.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I'll like to highlight the 2 important lessons I took away from this book</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Culture being at the heart of everything</li><li>Collaboration brings about greater benefits</li><li>Trust that the consumers places in you</li></ol>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Culture</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:image {"id":439} -->
<figure class="wp-block-image"><img src="https://chanjinhao.files.wordpress.com/2019/05/picture1.png" alt="" class="wp-image-439" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>To me, this diagram was the biggest take away of the book.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>I'll like to emphasize that Culture sit inside BOTH Capabilities and Concepts, meaning to say it affects both circles.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We start off with Concepts, which are innovative ideas that we have and we want to implement. This is the result of Culture that support and promotes creative thinking. A Culture that allows and embraces new ideas, and is welcoming to change. A dead culture is one that is not open to change, and resistant to any new ideas.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Next, we have Capabilities. To realize the ideas  derived produced in Concepts, we need to have the right Capabilities. The right people, right infrastructure, right processes. If there isn't the right Capabilities , it can always be built by hiring the right people, setting up the needed infrastructure, and defining proper processes. All these Capability building cannot happen with the right Culture.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>At the heart of it all, Culture reigns supreme. There are many definitions of Culture, but my very own short and simple definition is</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><p>The Guiding Principles to Solutions</p></blockquote>
<!-- /wp:quote -->

<!-- wp:paragraph -->
<p>When coming up with a solution to any problem, what are the principles that guide you? </p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>If you face an issue of sexual harassment at the work place, what principles do the company policies have to dealing with it: Two strikes, or one strike?</li><li>If someone writes spaghetti code, what principles do the engineers have to dealing with it: Teach, or reprimand? </li><li>If engineers feel stagnant, what principles do the managers have: neglect, or constant training?</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Culture is not related to just one issue, but to many issues within the company.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Collaboration</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>In the Information age, it is no longer a Zero-Sum game, where information shared would not lead to a loss of information.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Nadella talks about the various collaborative efforts that Microsoft engaged in, many initially questionable, but paid off in the end. Some of them are:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Collaborating with their long standing rival Apple, to develop Microsoft Office applications for MacOS</li><li>Collaborating with Linux to integrate Linux environment into Windows, and to provide first class support to Linux machines in Azure Cloud</li><li>Others such as Yahoo and Samsung</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Collaboration almost always leads to greater results, but I personally feel we should be wary of who we collaborate with. Collaborating with companies or people who have no value to you ends up being a dead weight. Selective Collaborate should be done, with clear objectives on both sides, and obvious rationales for collaboration.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As mentioned, it is no longer a Zero-Sum game, and we should not be afraid of intermingling of knowledge.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>438</wp:post_id>
		<wp:post_date>2019-05-05 12:51:28</wp:post_date>
		<wp:post_date_gmt>2019-05-05 04:51:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hit-refresh</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="book-review"><![CDATA[Book Review]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[30471832116]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1557031893]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>picture1</title>
		<link>http://chanjinhao.com/picture1/</link>
		<pubDate>Sun, 05 May 2019 04:10:56 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/05/picture1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>439</wp:post_id>
		<wp:post_date>2019-05-05 12:10:56</wp:post_date>
		<wp:post_date_gmt>2019-05-05 04:10:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>picture1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/05/picture1.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/05/picture1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1000;s:6:"height";i:685;s:4:"file";s:85:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/05/picture1.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:120284;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Side Channel Data Exfiltration</title>
		<link>http://chanjinhao.com/2019/05/10/side-channel-data-exfiltration/</link>
		<pubDate>Fri, 10 May 2019 06:39:52 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?p=442</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>A typical data exfiltration attack can be quite easy to spot. By monitoring the usage of common protocols such as HTTP, HTTPS, FTP or even DNS, we can deduce if a data exfiltration is taking place.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Most modern DLP (Data Leak Prevention) solutions today that incorporate network analysis can perform such detection across multiple protocols. In fact, a simple data analysis by SIEMs and a competent analyst can point out anomalies in traffic behavior and protocol usage.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The bad guys are well aware of this, and thus are looking for many innovative ways to exfiltrate data that does not leverage on typical protocols, of even the network at all. I came across a few that I found were extremely interesting:</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Data Transfer over Ultrasonic Frequency</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p><a href="https://github.com/jamesonrader/CUE-Ultrasonic-Transmissions-Protocol">https://github.com/jamesonrader/CUE-Ultrasonic-Transmissions-Protocol</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>On the write up, it has <strong><em>"No reliance on a data connection, including Wi-Fi, Bluetooth, or cellular service."</em></strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As of now, the advertised usage is targeted at various marketing activities during events at a stadium. One example usage was <strong><em>"Triggering commands on the smartphone through a television broadcast, online video, radio commercial, film and movies."</em></strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>If you can send commands, you can send data. If you can send data, it's data exfiltration.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Data Transfer over Screen Interfaces</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p><a href="https://github.com/pentestpartners/PTP-RAT">https://github.com/pentestpartners/PTP-RAT</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://www.pentestpartners.com/security-blog/exfiltration-by-encoding-data-in-pixel-colour-values/">https://www.pentestpartners.com/security-blog/exfiltration-by-encoding-data-in-pixel-colour-values/</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This package is more straightforward as malicious tool.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You have a sender (Victim) and a receiver (C2). The victim has his machine compromised, and has established an RDP connection back to the C2. To get the RDP connection in the first place can be done by tunneling through SSH: <a href="https://serverfault.com/questions/200249/how-to-tunnel-windows-remote-desktop-through-ssh-using-a-linux-box">https://serverfault.com/questions/200249/how-to-tunnel-windows-remote-desktop-through-ssh-using-a-linux-box</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Once the RDP connection is established, this tool shows that data exfiltration can be performed by encoding data into pixels, which on the receiver end, can read the screen decode them.</p>
<!-- /wp:paragraph -->

<!-- wp:core-embed/youtube {"url":"https://www.youtube.com/watch?time_continue=1\u0026v=hpw8Lz5Fg9I","type":"rich","providerNameSlug":"","className":"wp-embed-aspect-16-9 wp-has-aspect-ratio"} -->
<figure class="wp-block-embed-youtube wp-block-embed is-type-rich wp-embed-aspect-16-9 wp-has-aspect-ratio"><div class="wp-block-embed__wrapper">
https://www.youtube.com/watch?time_continue=1&amp;v=hpw8Lz5Fg9I
</div></figure>
<!-- /wp:core-embed/youtube -->

<!-- wp:heading {"level":3} -->
<h3>Data Transfer over Hardware Manipulation</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Perhaps the most interesting of all is hijacking and manipulating the physical machine itself. In the event of an air-gapped machine where no network connection is present, getting data out can be very challenging. (Getting into an air-gapped machine is even more challenging, and can involve really complex scenarios such as supply-chain attacks)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This paper explain how it's possible to control the blinking of LED lights and, using a recording device, capture the blinking sequences to reconstruct data: <a href="https://arxiv.org/abs/1706.01140">https://arxiv.org/abs/1706.01140</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Even more innovative ones take control of the PC fans, and control the RPM to produce sound based data encoding: <a href="https://www.technologyreview.com/s/601816/how-fansmitter-malware-steals-data-from-air-gapped-computers/">https://www.technologyreview.com/s/601816/how-fansmitter-malware-steals-data-from-air-gapped-computers/</a></p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>End Notes</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>The techniques are endless, and as attackers continue to get more innovative, the list will continue to grow. That being said, all these attacks are considerably hard to pull off, and what we as defenders can do is the bare minimum of preventing easy ways of data exfiltration over the network. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Once we raise the difficulty threshold of data exfiltration to a certain level, then should we start worrying about such innovative and out of the box methods. Get the basics right first!</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>442</wp:post_id>
		<wp:post_date>2019-05-10 14:39:52</wp:post_date>
		<wp:post_date_gmt>2019-05-10 06:39:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>side-channel-data-exfiltration</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="data-exfiltration"><![CDATA[data exfiltration]]></category>
		<category domain="category" nicename="hacking"><![CDATA[Hacking]]></category>
		<category domain="category" nicename="networking"><![CDATA[Networking]]></category>
		<category domain="category" nicename="security"><![CDATA[Security]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_37d780051daf70e98273a32e47369d6f</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1557470394]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[30649810071]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Cyber Kill Chain</title>
		<link>http://chanjinhao.com/2019/05/13/the-cyber-kill-chain/</link>
		<pubDate>Mon, 13 May 2019 08:52:33 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?p=446</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>The Cyber Kill Chain (CKC) is a sequential set of steps that takes place when an attack happens. There are many variations of the CKC by different companies such as , but the "trusted" and most convincing variant is by Lockheed Martin.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":447} -->
<figure class="wp-block-image"><img src="https://chanjinhao.files.wordpress.com/2019/05/the-cyber-kill-chain-body.png.pc-adaptive.1920.medium.png" alt="" class="wp-image-447" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>This CKC is pretty straightforward, and by disrupting any part of the kill chain, you can stop the final attack, which is "Actions On Objectives"</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>At each step, there are examples of what an Adversary could do, and what Defenders can do to detect or disrupt it.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Reconnaissance</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Before carrying out the attack, the adversary will scope out and survey the target. This phase is extremely broad, and can cover technical and non-technical aspects.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For example, they can find out the working hours of your system administrator to plan the right time to attack, or find out what version of OS and email application the company is using. They can harvest emails or contact information through OSINT channels, or social media. They can find scan for open services in the company network.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Because of such a broad scope of activities, it's almost impossible to be aware that someone is performing reconnaissance on your company. What you can do however lies on the technical side, such as:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Enabling logging for your webservers to detect any sort of scraping or probing.</li><li>Disabling all unneeded services</li><li>Disabling ICMP responses</li><li>Properly configuring your Firewall to log and prevent network traffic</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p><strong>Detection</strong>:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>-</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Prevention</strong>: </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The goal here is to prevent information leakage, as well as detecting information probing attempts. Knowing that an attack is going to happen is the first step to protecting yourself.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Weaponization</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>In this stage, the adversary starts to prepare the payload for attack.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Given the information he got from reconnaissance, he can build tools specific for OS versions, application versions or Firewall versions. Since this phase of the attack happens outside the victims circle of control, there is no way of detecting when Weaponization happens.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Detection: </strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>-</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Prevention:  </strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>One possible way of neutralizing this phase is to do regular security  assessments of your infrastructure, and detect if any applications or  versions are vulnerable, and perform patching to secure those assets. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>By doing so, you are preventing, or making it very hard for adversaries to perform Weaponization.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Delivery</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>In the delivery stage, the attacker sends the Weaponized tools to the victim, either via software (Email, links, direct to the webserver) or physical means (USB insertion)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This is the most crucial stage for defenders. Knowing what are all the possible vectors of attacks, and either mitigating it, or eliminating it if possible.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You must know which are your most important infrastructures that are connected to the most important assets, and make sure that they are well secured with various layers of security. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Detection: </strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Logging must also be enabled to detect any point of entry, such as email logs, web logs and endpoint logs.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Prevention:</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p> Airgapped machines, web proxies and proper staff security education all limit the vectors of delivery. </p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Exploitation</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>If you failed to prevent Delivery, the adversaries would be able to enter the machine. Once inside, the next step for them is to perform exploitation to either gain privilege escalation, or to gain unauthorized information. This can either be a software or hardware vulnerability that the adversary leverages on.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Preventing exploitation is a huge monster of a topic on it's own, but basically it revolves around patching your systems, making sure appropriate security controls are in place, and properly educating your staff on security issues like phishing emails and malicious links.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Also, regular security assessments should be done to lock down all possible edge cases.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Detection:</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Endpoint security and application logging</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Prevention:</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>By hardening your systems and educating your users, you're limiting the amount of damage that can be done if the adversary is within your network.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Installation</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Once the adversary gets into your system and performs exploitation, it is highly likely that he would have escalated privileges, and can install other tools he wants to allow him to perform other actions.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>These tools includes keyloggers, rootkits, backdoors, webshells or scripts.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Detection:</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Detection at this phase involves behavioral analysis. HIPS, endpoint detection tools, and log analysis can be used to detect anomalous activities on both the endpoint and network.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Prevention:</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>At this phase, since the adversary already has exploited the system and has escalated privilege. There is little you can do to prevention, but only detection and performing remediation.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Command &amp; Control</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>After installing rootkits and backdoors, the malware needs to receive commands remotely from their server. This is done by establishing a C2 connection out from the victim machine to the adversary.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>C2 communication is hard to detect, and it can take place under commonly used ports and services such as HTTP, DNS or SMTP.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Detection:</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Network based detection can be used to find anomalous activities on the network. Web proxies to log all traffic for analysis.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Prevention:</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Blocking and preventing unauthorized network traffic. Disabling unneeded services that connect out to the internet. Close unused ports. Honey pots to study the C2 traffic.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Actions On Objectives</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>In the CKC, it shows this as the final step after performing all previous actions. Actions On Objects could mean acquiring user credentials, collecting and exfiltrating data or lateral movement. But these actions need not be the final step of the CKC, after establishing a C2 or performing Exploitation.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Depending on the objective the adversary wants to perform, Actions On Objectives could actually happen after the Exploitation phase onward.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This phase is an accumulation of steps, thus there is no single point of detection or prevention. To disrupt this part of the kill chain, you have to target all preceding parts of the CKC.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Detection:</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Logging on network and endpoint to perform anomaly detection.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Prevention:</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Preventing Delivery and Exploitation would prevent the adversaries to perform any Actions, thus preventing this final step of the CKC. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Installation cannot be prevented, since it assumes that the adversary has escalated privileges, and a C2 connection may not be required to perform an Action On Objectives.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>446</wp:post_id>
		<wp:post_date>2019-05-13 16:52:33</wp:post_date>
		<wp:post_date_gmt>2019-05-13 08:52:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-cyber-kill-chain</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cyber-kill-chain"><![CDATA[Cyber kill chain]]></category>
		<category domain="category" nicename="hacking"><![CDATA[Hacking]]></category>
		<category domain="category" nicename="security"><![CDATA[Security]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[30755027005]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1557737556]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>the-cyber-kill-chain-body.png.pc-adaptive.1920.medium</title>
		<link>http://chanjinhao.com/the-cyber-kill-chain-body-png-pc-adaptive-1920-medium/</link>
		<pubDate>Mon, 13 May 2019 06:28:16 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/05/the-cyber-kill-chain-body.png.pc-adaptive.1920.medium.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>447</wp:post_id>
		<wp:post_date>2019-05-13 14:28:16</wp:post_date>
		<wp:post_date_gmt>2019-05-13 06:28:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>the-cyber-kill-chain-body-png-pc-adaptive-1920-medium</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/05/the-cyber-kill-chain-body.png.pc-adaptive.1920.medium.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/05/the-cyber-kill-chain-body.png.pc-adaptive.1920.medium.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1920;s:6:"height";i:2238;s:4:"file";s:130:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/05/the-cyber-kill-chain-body.png.pc-adaptive.1920.medium.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:1283845;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Visualizing Neural Networks</title>
		<link>http://chanjinhao.com/2019/05/19/visualizing-neural-networks/</link>
		<pubDate>Sun, 19 May 2019 01:31:44 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?p=301</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Neural Networks have always been sort of a black box when it comes to it's implementation, and how it produces good results. I came across some material that shows visually, how the neural networks morph the problem space so that they are separable.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Simple Data</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Here's a sample graph that is not linearly separable:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":302,"align":"center","width":284,"height":277} -->
<div class="wp-block-image"><figure class="aligncenter is-resized"><img src="https://chanjinhao.files.wordpress.com/2019/02/simple2_data.png" alt="" class="wp-image-302" width="284" height="277" /></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>When we try to use a linear model to discriminate the two data, we get a poorly separated model:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":303,"align":"center","width":278,"height":271} -->
<div class="wp-block-image"><figure class="aligncenter is-resized"><img src="https://chanjinhao.files.wordpress.com/2019/02/simple2_linear.png" alt="" class="wp-image-303" width="278" height="271" /></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Neural Networks, with the interactions of their hidden layers and nodes, are able to learn more complex information about the graph to plot a non-linear separation:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":304,"align":"center","width":270,"height":263} -->
<div class="wp-block-image"><figure class="aligncenter is-resized"><img src="https://chanjinhao.files.wordpress.com/2019/02/simple2_0.png" alt="" class="wp-image-304" width="270" height="263" /></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>What a Neural Networks does is that it warps the space of the problem so that it becomes more separable. The hidden layers in the network transforms the problem space by representing it in a different way</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":305,"align":"center","width":281,"height":274} -->
<div class="wp-block-image"><figure class="aligncenter is-resized"><img src="https://chanjinhao.files.wordpress.com/2019/02/simple2_1.png" alt="" class="wp-image-305" width="281" height="274" /></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>By warping the problem space with the hidden layers, we see that it's able to linearly separate the two distributions. That's pretty cool! So what the neural network is doing is finding the most optimal way to represent the problem that is discriminative.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So what happens if the data distribution is too complex, or your neural network model is too simple (too shallow) that it can't properly represent the data?</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Spiral Data</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Given a complex data set that resembles a spiral shape, and a neural network model that is too simple, we can see it struggling to find a representation that is separable. This means that there is not enough hidden layers and hidden nodes to transform the data. We need to go deeper!</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":308,"align":"center","width":364,"height":355} -->
<div class="wp-block-image"><figure class="aligncenter is-resized"><img src="https://chanjinhao.files.wordpress.com/2019/02/spiral.2.2-2-2-2-2-2-2.gif" alt="" class="wp-image-308" width="364" height="355" /></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Here's the same spiral graph, but with enough hidden layers and nodes to transform the spiral data to a separable space. We can see the model separating the data very clearly</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":307,"align":"center","width":344,"height":336} -->
<div class="wp-block-image"><figure class="aligncenter is-resized"><img src="https://chanjinhao.files.wordpress.com/2019/02/spiral.1-2.2-2-2-2-2-2-1.gif" alt="" class="wp-image-307" width="344" height="336" /></figure></div>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3>More Complex Data</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>In the last example, we see a more complex example, and see how a neural network can separate the data. </p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":309,"align":"center","width":376,"height":283} -->
<div class="wp-block-image"><figure class="aligncenter is-resized"><img src="https://chanjinhao.files.wordpress.com/2019/02/topology_base.png" alt="" class="wp-image-309" width="376" height="283" /></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p> Given a circular topology data, a shallow neural network will have difficulties trying to separate the data from the inside and outer ring. We see it trying to pull apart the data like how it did with the spiral data, but it fails to do so</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":310,"align":"center","width":351,"height":343} -->
<div class="wp-block-image"><figure class="aligncenter is-resized"><img src="https://chanjinhao.files.wordpress.com/2019/02/topology_2d-2d_train.gif" alt="" class="wp-image-310" width="351" height="343" /></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>By introducing more hidden layers and nodes and going deeper, we see that the data is able to be extracted out into another dimension, making it separable!<br></p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":311} -->
<figure class="wp-block-image"><img src="https://chanjinhao.files.wordpress.com/2019/02/topology_3d.png" alt="" class="wp-image-311" /></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3>Conclusion</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>In this post, I wanted to show how neural networks warp the space of the data make them separable, and how a shallow network might fail to perform well.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>By adding more hidden layers and nodes, we are able to morph and warp the space into different dimensions, representing them differently and making them discriminative</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>301</wp:post_id>
		<wp:post_date>2019-05-19 09:31:44</wp:post_date>
		<wp:post_date_gmt>2019-05-19 01:31:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>visualizing-neural-networks</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="data-science"><![CDATA[Data Science]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[30950555361]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1558231407]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GAN?</title>
		<link>http://chanjinhao.com/2019/05/26/gan/</link>
		<pubDate>Sun, 26 May 2019 05:13:04 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?p=313</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>A Generative Adversarial Network (GAN) is a collection of two neural network models: A Discriminator, and a Generator. The goals of the two models are opposing to each other</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Discriminator: Given a set of features, we try to predict the label </li><li>Generator: Given a label, we try to predict the features that lead to the label</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>For example, a Discriminator in a spam email detector identifies if an email is spam, given certain keywords. A Generator on the other hand, given a spam label, tries to come up with keywords that results in the label spam.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The goal of a GAN is to train a generative model that can produce outputs that are believable enough for the discriminator to classify it as a positive label. At the end, the generative model will be able to produce outputs that are close to what the true distribution produces. Examples of this are image generations, text generation and </p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>How It Works</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Generator:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>The generator takes in a random numbers from a noise generator, and produces a random output</li><li>The outputs of the generator are mixed together with a collection from the actual training data set</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Discriminator:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>The Discriminator takes in data from both the actual data set and the output of the Generator</li><li>The Discriminator makes a prediction of each data and predicts the probability of the label</li><li>It tries to predict if the data is from the training set, or generated from the Generator model (Real vs Fake data)</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>The Discriminator and Generator goes back and forth, Generating new data points, and predicting the data points. This goes on until convergence: When the Generator produces data points that are classified as Real by the Discriminator.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The Discriminator gets the feedback for optimization from the ground truth, and the Generator gets feedback from the Discriminator.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":314,"align":"center","width":503,"height":218} -->
<div class="wp-block-image"><figure class="aligncenter is-resized"><img src="https://chanjinhao.files.wordpress.com/2019/02/gans.png" alt="" class="wp-image-314" width="503" height="218" /></figure></div>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3>Visualizing the Generator</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>We can visualize how the Generator learns to generate outputs that goes closer to the distribution of the real distribution</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":315} -->
<figure class="wp-block-image"><img src="https://chanjinhao.files.wordpress.com/2019/02/iterations-1.gif" alt="" class="wp-image-315" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>We can see that initially, the distribution by the Generator was random and scattered all over. Over several iterations, the Generator starts producing outputs that have a distribution getting closer to the actual distribution.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Math for GAN</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>We have a joint loss function, with the two models (Generative <code>G</code> and Discriminative <code>D</code>) optimizing for different things. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The Discriminator tries to identify if the data is from the true distribution <code>x</code>, and outputs a value <code>D(x)</code>. The Discriminator also tries to recognize if the data comes from the Generator <code>G</code>, which outputs a value <code>D(G(z))</code>. (or <code>1 - D(G(z))</code>, because the inverse of the Generated data is the data from the true distribution) Putting these two together, we get the loss function:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":316,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://chanjinhao.files.wordpress.com/2019/02/1-4xahmaugxeoqnnjhzjq-4q.jpeg" alt="" class="wp-image-316" /></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The Discriminator <code>D</code> wants to maximize this, as it wants to correctly identify true data <code>x</code> and <code>1 - D(G(z))</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>On the other hand, the Generator <code>G</code> tries to generates data to fool the Discriminator, and it wants to minimize the second half of the loss function:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":317,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://chanjinhao.files.wordpress.com/2019/02/1-n235xeigxkl3ktl08d-cza.jpeg" alt="" class="wp-image-317" /></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>By maximizing <code>D</code> and minimizing <code>G</code>, we get the function:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":318} -->
<figure class="wp-block-image"><img src="https://chanjinhao.files.wordpress.com/2019/02/1-ihk3whuaz_0uek4sjicyfw.png" alt="" class="wp-image-318" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>We then use alternating gradient descent, one step to Maximize the function by Discriminator <code>D</code>, and the other step to Minimize the function by Generator <code>G</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We fix the Generator's parameters, and perform one iteration of Gradient Descent on the Discriminator. Then we switch and fix the Discriminator's parameters, and perform one iteration of Gradient Descent on the Generator. We keep alternating these steps of Gradient Descent of both models until convergence.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The Discriminator usually wins early on against the Generator, as initially, it is very easy for the Discriminator to identify Generated data because the Generator has not learnt anything yet. As such, the Generator will get diminished gradient, and learning will be very slow. GAN therefore modifies the loss function slightly to backpropagate the gradient to the Generator</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":319} -->
<figure class="wp-block-image"><img src="https://chanjinhao.files.wordpress.com/2019/02/1-6so6q3dwurg8qrmwk1y3jw.jpeg" alt="" class="wp-image-319" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>As the gradient backpropagated to the Generator approaches 0, the GAN changes the function to another one to ensure the gradient to the Generator does not vanish.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Tips for training a GAN</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>When training the Generator, hold the values of the Discriminator constant.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When training the Discriminator, hold the values of the Generator constant.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>You may train one network that is stronger than the other, giving adverse results: If the Generator is too strong, it will always successfully deceive the Discriminator, leading to a lot of false negatives. If the Discriminator is too strong, it will give outputs that are close to 0 or 1, and the Generator will struggle during learning from gradient descent.<br></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>313</wp:post_id>
		<wp:post_date>2019-05-26 13:13:04</wp:post_date>
		<wp:post_date_gmt>2019-05-26 05:13:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gan</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="data-science"><![CDATA[Data Science]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[31190453486]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1558851732]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Branches of Machine Learning</title>
		<link>http://chanjinhao.com/2019/06/02/branches-of-machine-learning/</link>
		<pubDate>Sun, 02 Jun 2019 07:30:11 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?p=322</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Just finished reading the book "The Master Algorithm", where the author tries to find the ultimate Machine Learning algorithm that can solve different varieties of problems (text, image, predictive, time series etc)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In the book, he goes over the 5 main branches (or tribes) of  Machine Learning. They are:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>The Evoluntionaries</li><li>The Connectionist</li><li>The Symbolist</li><li>The Bayesians</li><li>The Analogizers</li></ol>
<!-- /wp:list -->

<!-- wp:image {"id":323,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://chanjinhao.files.wordpress.com/2019/02/master-algo_thumb.png" alt="" class="wp-image-323" /></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Lets look at what the 5 tribes have to offer, and their each individual "Master Algorithm"</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>The Evolutionaries</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Master Algorithm: <strong>Genetic Algorithm</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Loss Function: <strong>Fitness Function</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Optimization Function:<strong> Genetic Search</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This tribe tries to represent learning by mimicking evolution, where the it uses survival-of-the-fittest idea to pick the best model.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Starting with weak and not-fit models, the models go through different biologically inspired evolutionary stages: Mutation, Cross Over and Selection</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Evolutionaries focus on learning the structure of the model, and not so much of the parameters (something which Connectionist with neural networks focus on)</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>The Connectionists</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Master Algorithm: <strong>Neural Networks</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Loss Function: <strong>RMSE</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Optimization Function: <strong>Gradient Descent and Back Propagation</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The Connectionist represent learning by modelling it after the brain and the neuron connections inside them. Dendrites, Axons and the Cell made up the Neural Network.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In Neural Networks, we are trying to learn the weights of the connections between the cells, and not the structure of the neural network itself (Perhaps there could be a combination of GA and NN, where GA finds the structure, and NN finds the weights)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It follows the notion that a concept can be represented by firing various neurons, and concepts that are similar to each other will cause the same set of neurons firing.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>The Symbolist</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Master Algorithm: <strong>Logic</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Loss Function: <strong>Accuracy</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Optimization Function: <strong>Inverse Deduction</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Symbolist believe that all intelligence can be reduced to symbols, or rules. They build rule base systems, which obviously have huge limitations, because we can't possibly convert all intelligence and edge cases to a hard coded rule. The moment the rule encounters just a slightest bit of noise, it fails to perform.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Also, real life scenarios and concepts are seldom defined in black and white rules, and are usually stochastic and in the grey area.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In some cases, they can perform quite well. A model that Symbolist use are decision trees, which are huge tree that have if-else rules at each branch.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>The Bayesians</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Master Algorithm: <strong>Graphical Models</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Loss Function: <strong>Posterior Probability</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Optimization Function: <strong>Probabilistic Inference</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>As opposed to frequentist, which gives no value to prior beliefs, Bayesians hold prior beliefs at the center of their model.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The Bayesian works on conditional probability, or Bayes Theorem, that tells the probability of event A happening given that B has occurs <code>P(A|B)</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>During the training phase, the model takes the training data to build a list of conditional probabilities. During testing, given certain features, the model will use the conditional probabilities to perform predictions.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A Naive Bayes algorithm is one that assumes that all probabilities are independent of each other. Although it is not a valid assumption in the real world, it still performs quite well.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>The Analogizers</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Master Algorithm: <strong>Support Vector Machines</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Loss Function: <strong>Margin between Support Vectors</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Optimization Function: <strong>Constrained Optimization</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This tribe uses similarities among various data points to categorize them to distinct classes. Based on the similarity between data points, we can relate them together.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Models in this tribe are K-Nearest-Neighbor and Support Vector Machines.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Summary</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:image {"id":325,"align":"center","width":487,"height":487} -->
<div class="wp-block-image"><figure class="aligncenter is-resized"><img src="https://chanjinhao.files.wordpress.com/2019/02/puzzle_thumb.png" alt="" class="wp-image-325" width="487" height="487" /></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The book tries to amalgamate ideas together to form the Master Equation.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We could use posterior probability as the evaluation function, and genetic search coupled with gradient descent as the optimizer </p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>322</wp:post_id>
		<wp:post_date>2019-06-02 15:30:11</wp:post_date>
		<wp:post_date_gmt>2019-06-02 07:30:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>branches-of-machine-learning</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="book-review"><![CDATA[Book Review]]></category>
		<category domain="category" nicename="data-science"><![CDATA[Data Science]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[31420755033]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1559460966]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Random Forests</title>
		<link>http://chanjinhao.com/2019/06/09/random-forests/</link>
		<pubDate>Sun, 09 Jun 2019 12:43:39 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?p=330</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>A random forest is an ensemble approach of combining multiple decision trees. Ensembling and Decision Trees, we first need to explain what these two things are</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Decision Trees</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Decision Trees try to encode and separate the data into if-else rules. It breaks the data down into smaller and smaller subsets. Each node poses the question, and each branch represents the decision.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":331,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://chanjinhao.files.wordpress.com/2019/03/1_jaey3kp7tu2q6hn6lasmrw.png" alt="" class="wp-image-331" /></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Given the example above, how do we know which question to ask first at the root node? Do we first split by Age, Pizza consumption, or Exercise? This decision is made by calculating the <strong>Entropy Loss</strong>, or <strong>Information Gain</strong>. Information gain is calculated using Entropy loss, so the two variables are closely linked.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Intuitively, we want to reduce entropy of the data, so that we can separate them nicely. A 0 entropy data means that all the samples are the same, and an entropy of 1 means that the samples are split evenly between the classes.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":332,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://chanjinhao.files.wordpress.com/2019/03/0_klhgarh43lgdoksn.png" alt="" class="wp-image-332" /><figcaption>When there are 0 samples of class P, Entropy is 0.<br>When 0.5 of the samples are class P, Entropy is 1.<br>When all the samples are class P, Entropy is 0.</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>We want to make splits that <strong>Maximizes Information Gain</strong> (or making the resulting data sets more homogeneous). The following steps are involved:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>For each target feature (Age, Pizza consumption, Exercise), calculate the current Entropy value.</li><li>Split the data on each target feature, and calculate the resulting entropy after splitting.</li><li>Choose the feature that results in the largest information gain, or entropy loss.</li><li>Repeat.</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>That was a gist of a decision tree, now lets look at ensembling and Random Forest</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Ensembling and Random Forest</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Ensembling revolves around the idea of putting together several weak learners to form a strong learner. In Random Forest, the weak learners are Decision Trees</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":333,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://chanjinhao.files.wordpress.com/2019/03/skitch.jpg" alt="" class="wp-image-333" /><figcaption>Blue dots represent the data points.<br>Grey lines represent the weak learners.<br>The red line represents the single strong learner.</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Here's the process of a Random Forest:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>From the full data set, create several subsets by random sampling with replacement.</li><li>Using these subsets, we create Decision Trees from them.</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Now that we created the Random Forest, when we get a new input to predict, we pass the input to all the Decision Trees in the Random Forest. This gives up multiple outputs, one output for each tree. The final result of the Random Forest would then be an average of the trees (if it's a regression problem), or voting by majority (if it's a classification problem).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Downside of Random Forest are:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Random Forest that are used for regression cannot predict beyond the range in the training data they are fed with</li><li>Random Forests may overfit noisy data sets </li></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Conclusion</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>This post was a fairly simple and straightforwad one, cover basic, but essential topics.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We have seen how a Decision Tree works, and the how the Random Forest makes use of multiple Decision Trees. </p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>330</wp:post_id>
		<wp:post_date>2019-06-09 20:43:39</wp:post_date>
		<wp:post_date_gmt>2019-06-09 12:43:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>random-forests</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="data-science"><![CDATA[Data Science]]></category>
		<category domain="post_tag" nicename="decision-tree"><![CDATA[Decision Tree]]></category>
		<category domain="post_tag" nicename="random-forest"><![CDATA[Random Forest]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[31649362687]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1560084629]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>K-Means Clustering</title>
		<link>http://chanjinhao.com/2019/06/16/k-means-clustering/</link>
		<pubDate>Sun, 16 Jun 2019 13:18:12 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?p=340</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>K-Means Clustering is an unsupervised learning algorithm. It works by grouping similar data points together to try to find underlying patterns.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The number of  groups are pre-defined by the user as K.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>How the Algorithm works</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Before the iterative update starts, a random selection of centroid locations are picked on the graph. These centroids act as the beginning points for each cluster. (if K = 5, there will be 5 random centroids)</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Data Assignment Step<ul><li> Each data point is assigned to its nearest centroid, based on the squared Euclidean distance </li></ul></li><li>Centroid Update<ul><li>Given the new data points, re-calculate the centroid value</li></ul></li><li>Repeat until centroid no longer changes, or until a stopping criteria.</li></ol>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Choosing K</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>How do we choose K? Well, iteratively of cause. We define K to be a range of values, and run K-mean clustering through those values.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":341} -->
<figure class="wp-block-image"><img src="https://chanjinhao.files.wordpress.com/2019/03/introduction-to-k-means-clustering-elbow-point-example-1.jpg" alt="" class="wp-image-341" /></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3>Conlcusion</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>This was a pretty short post, but it acts as a summary of how K-means clustering works!</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>340</wp:post_id>
		<wp:post_date>2019-06-16 21:18:12</wp:post_date>
		<wp:post_date_gmt>2019-06-16 13:18:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>k-means-clustering</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="data-science"><![CDATA[Data Science]]></category>
		<category domain="post_tag" nicename="k-means-clustering"><![CDATA[K means clustering]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1560694862]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[31883975478]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>RNN and Vanishing/Exploding Gradients</title>
		<link>http://chanjinhao.com/2019/06/23/rnn-and-vanishing-exploding-gradients/</link>
		<pubDate>Sun, 23 Jun 2019 08:23:07 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?p=344</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>In this post, we're going to be looking at:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Recurrent Neural Networks (RNN)</li><li>Weight updates in an RNN</li><li>Unrolling an RNN</li><li>Vanishing/Exploding Gradient Problem</li></ol>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3>Recurrent Neural Networks</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>A Recurrent Neural Network (RNN) is a variant of neural networks, where in each neuron, the outputs cycle back to themselves, hence being recurrent.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":345} -->
<figure class="wp-block-image"><img src="https://chanjinhao.files.wordpress.com/2019/03/0_mrhhgabskajpbt21.png" alt="" class="wp-image-345" /><figcaption>Each neuron's output cycle back to themselves, as compared to a feed-forward neural network</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>This means that each neuron in an RNN has two sources of inputs:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>The present data (Which can be one or more inputs)</li><li>The recent past data (A single output based on the previous set of inputs)</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Intuitively, this means that the network can learn whats happening now, and what happened before.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The RNN has a Short-Term memory, as the recurrent input is only derived from it's most recent past. Anything that happened way before is "forgotten".</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For example, if we feed in the word "neuron" letter by letter, in a feed-forward NN, when we reach the letter "r", the model would have forgotten "n", "e", "u".</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In an RNN, the model would remember the immediate past, that previously we have seen the letter "u".</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Like a normal feed-forward NN, the RNN also has a weight matrix, but with one additional weight to include the recurrent input. When doing backpropagation, this recurrent weights is also subjected to tweaking.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Weight Updates in an RNN</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>This weight updating phase for an RNN is called Backpropagation Though Time. Lets examine first how a feed-forward NN does forward and backward propagation for weight correction</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In a feed-forward NN, forward propagation is done to get the predicted output. An error estimate is gotten from the predicted output and the true label.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Using the error estimate, we do backpropgation to find the partial derivatives of the error with respect to the weights of the network.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>These derivatives are then used by Gradient Descent to tweak the weights of the model, and ultimately try to minimize the error estimate, so that the predicted output is close to the true output.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":346,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://chanjinhao.files.wordpress.com/2019/03/0_fbugysciqjnfi3n6.png" alt="" class="wp-image-346" /><figcaption>Forward propagation to get the outputs, error estimate calculation, and backpropgation to get the gradients of the error w.r.t. the weights, and apply gradient descent.<br></figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>In an RNN, there is an additional component of the recurrent input in each neuron. This input also has its corresponding weight that needs to be tweaked. To understand how that happens, we need to be able to visualize "unrolling" an RNN</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Unrolling an RNN</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>As mentioned earlier, each neuron will 2 sources of inputs: The current input, and the most recent previous input.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":348,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://chanjinhao.files.wordpress.com/2019/03/0_ynlojw7yvjarwmd4-copy.png" alt="" class="wp-image-348" /><figcaption>The output of the RNN cell is fed back.</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>In the next time step, it will take the current input plus the previous output. We can visualize this by "unrolling" the RNN, so we can see what happens at each time step.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":349,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://chanjinhao.files.wordpress.com/2019/03/0_ynlojw7yvjarwmd4.png" alt="" class="wp-image-349" /><figcaption>An unolled RNN to visualize what happens to the cell at each time step</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The image above shows what happens when you unroll one recurrent neuron. In a network with 100s of neurons, some layers recurrent, things can get really messy.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":350,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://chanjinhao.files.wordpress.com/2019/03/dpln_0423.png" alt="" class="wp-image-350" /><figcaption>Hidden layers 1 and 2 are recurrent. Here we unroll them for 3 time steps</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3>Vanishing/Exploding Gradient Problem</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>When we combine the two concepts of applying Backpropagation on an unrolled RNN, we get Backpropagation through time (BPTT).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Recall that we also need to learn the weights of the recurrent input, and BPTT is done to get the gradient by finding the partial derivatives of the error with respect to the recurrent inputs. (Just like how in a normal feed-forward NN, backpropagation is done to get the partial derivatives of the error with respect to the weights). Using the gradients, Gradient Descent is then applied.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In BPTT, the error is backpropagated from the last time step all the way to the first time step to update the weights of the recurrent input.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The problem comes when there are too many time steps, and BPTT has to propagate error back too many times, which will result in the gradients exploding, or vanishing.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>At each time step, the gradients are multiplied by each other via matrix multiplication because of chain rule. If the gradient is greater than 1.0, a large number of time steps will cause the gradient to "explode", or become too large.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Likewise, when the gradient is less than 1.0, multiplying it too many times by itself will cause the gradient to "vanish", or become close to zero.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Both exploding and vanishing gradients are problematic, because then Gradient Descent will performing poorly on overly large values, or overly small values.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Summary</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>To recap on a feed-forward NN:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Forward propagation is done get the output prediction</li><li>An error estimate is calculated from the model output to the the true values</li><li>Backpropagation is done using the error, to get partial derivative of the error w.r.t. the weights</li><li>Gradient Descent is applied using the gradients to minimize the error</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>And for an RNN:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li> Forward propagation is done get the output prediction </li><li> An error estimate is calculated from the model output to the the true values </li><li>The RNN is unrolled by the total number of time steps</li><li>BPTT is done to get partial derivative of the error w.r.t. the weights</li><li> Gradient Descent is applied using the gradients to minimize the error </li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>The problem comes when there are too many times steps, and performing BPTT causes the gradients to explode or vanish. This affects the final step of applying Gradient Descent.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>344</wp:post_id>
		<wp:post_date>2019-06-23 16:23:07</wp:post_date>
		<wp:post_date_gmt>2019-06-23 08:23:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rnn-and-vanishing-exploding-gradients</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="data-science"><![CDATA[Data Science]]></category>
		<category domain="post_tag" nicename="rnn"><![CDATA[RNN]]></category>
		<category domain="post_tag" nicename="vanishing-gradients"><![CDATA[Vanishing Gradients]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[32105391177]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1561279147]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>LSTM</title>
		<link>http://chanjinhao.com/2019/06/30/lstm/</link>
		<pubDate>Sun, 30 Jun 2019 07:33:55 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?p=355</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>In the previous post, we talked about RNN, and how performing Backpropagation through time (BPTT) on an unrolled RNN with many time steps can lead to the problems of vanishing / exploding gradients, and difficulties in learning long term dependencies.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In this post, we're going to look at a the LSTM (Long Short Term Memory) model that is a variant of an RNN, but is designed specifically to combat the 2 issues.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>LSTM Structure</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Lets visually inspect the difference between a normal RNN cell and an LSTM cell.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":362} -->
<figure class="wp-block-image"><img src="https://chanjinhao.files.wordpress.com/2019/03/lstm3-simplernn.png" alt="" class="wp-image-362" /><figcaption>An unrolled RNN cell</figcaption></figure>
<!-- /wp:image -->

<!-- wp:image {"id":356} -->
<figure class="wp-block-image"><img src="https://chanjinhao.files.wordpress.com/2019/03/lstm3-chain.png" alt="" class="wp-image-356" /><figcaption>An unrolled LSTM cell</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The A on each of the cells represent the Activation in the cell. In the RNN, this can either be a Sigmoid, tanh, ReLU, or other activation functions. In the LSTM however, its a combination of 3 Sigmoids and a tanh function.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The biggest difference, aside from the more complex internal structure of the LSTM, is that it has two connecting data pipelines from cell to cell.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Cell State</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>The top line of an LSTM cell represents the cell state</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":357,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://chanjinhao.files.wordpress.com/2019/03/lstm3-c-line.png" alt="" class="wp-image-357" /></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The LSTM has the ability to modify the cell state by removing information (through the multiplicative forget gate), or adding information (through the additive input gate)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This data flow from cell to cell is modified by two operators: The multiplication operator, and the addition operator denoted by the two pink nodes</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>LSTM Gates</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>The LSTM has 3 gates in the cell:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Forget Gate</li><li>Input gate</li><li>Output Gate</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>These gates modify the data that is flowing in and out of the LSTM cell</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>The Common Sigmoid Layer</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In all the 3 gates, there exists the common Sigmoid layer. This layer outputs a value from 0 to 1 for each state in the cell state.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":365,"align":"center","width":87,"height":106} -->
<div class="wp-block-image"><figure class="aligncenter is-resized"><img src="https://chanjinhao.files.wordpress.com/2019/03/lstm3-gate.png" alt="" class="wp-image-365" width="87" height="106" /><figcaption>The common Sigmoid layer in all 3 gates</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The Sigmoid layer outputs a value from 0 to 1. This value corresponds to a value in the cell state, and this would mean different things for different gates.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In the Forget gate, 0 would mean forget the value in the cell state, and 1 would mean remember the value entirely.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In the Input gate, 0 would mean do not update this value at all, and 1 would mean update the value entirely.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In the Output gate, 0 would mean do not output this cell state value, and 1 would mean output this value entirely.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>Forget Gate</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The first gate is the forget gate. This gate decides what information to discard from the cell state.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This gate has the Sigmoid activation function. It takes in the previous time step's output, and the current time step input.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":359} -->
<figure class="wp-block-image"><img src="https://chanjinhao.files.wordpress.com/2019/03/lstm3-focus-f.png" alt="" class="wp-image-359" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The two inputs are concatenated, and passed through the Sigmoid layer. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Recall that a Sigmoid activation function outputs a value from 0 to 1. A value of 0 means completely forget this input value, while 1 means to remember the value entirely.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>Input Gate</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The next gate is the input gate, which is a combination of both the Sigmoid and tanh activation function. This gate decides what new information to add to the cell state.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":360} -->
<figure class="wp-block-image"><img src="https://chanjinhao.files.wordpress.com/2019/03/lstm3-focus-i.png" alt="" class="wp-image-360" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>There are two steps in the input gate phase</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In the first step, the output of the previous time step and the input of the current time step are concatenated together, and passed into a Sigmoid. This layer decides which cell state values to update. (0 means do not update, 1 means update entirely)</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The inputs are also passed into a tanh activation function, which tells the model what to update the cells states with.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The multiplicative combination of these two outputs tells us which cell state to update (from the sigmoid layer), and what to update it with (tanh layer)</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>Output Gate</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The last gate, output gate, decides what value the cell would output. The output is derived from multiplying the outputs from the Sigmoid layer and tanh layer</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":361} -->
<figure class="wp-block-image"><img src="https://chanjinhao.files.wordpress.com/2019/03/lstm3-focus-o.png" alt="" class="wp-image-361" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The Sigmoid layer takes in  the previous and current time step values, and outputs values 0 to 1 for each value in the cell. A value of 0 means do not output this cell state value at all, and 1 means to output the entire value.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The tanh layer takes in the current cell state, which scales the values to be from -1 to 1. This value is then multiplied by the output of the Sigmoid layer to get the final output value.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Modification of the Cell State</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>The cell states in each LSTM cell are modified either by the forget gate, or the input gate.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":364} -->
<figure class="wp-block-image"><img src="https://chanjinhao.files.wordpress.com/2019/03/lstm3-focus-c-2.png" alt="" class="wp-image-364" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The forget gate outputs values 0-1, and is multiplied by the cell state. Cell states multiplied by 0 will be completely forgotten, while those multiplied by value &gt; 0 will be remembered by varying degrees.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The input gate then updates each value in the cell state by a candidate amount (from the tanh layer), scaled by a factor (decided from the Sigmoid layer)</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Conclusion</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>In each LSTM cell, there contains a cell state.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Forget gate decides what to drop from the cell state</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Input gate creates candidate values to update the cell state</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Output gate decides what values to output from the cell state</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Final Notes</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>I usually end with the conclusion, but all the information above was all the technical aspects of an LSTM. Here are some further questions relating to LSTM.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Q: What are you actually training when you do your Backpropagation through time on an LSTM? </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A: Recall that the gates have to control what to forget, input and output from each LSTM cell. What exactly to forget, input and output are the variables being trained.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Q: So... how does it combat vanishing/exploding gradients?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Gradients explode when their values are greater than 1, and vanish when their values are lesser than 1, and are backpropagated for too large a time step.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The key to LSTM preventing the vanexplgrad (I just made that up) is cell state updating step. Below shows the formula for updating the cell</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":369,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://chanjinhao.files.wordpress.com/2019/03/untitled-1.png" alt="" class="wp-image-369" /><figcaption>Calculating the current cell state using values from the previous cell state</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:list -->
<ul><li><code>c(t)</code> is the current cell state to compute</li><li><code>i</code> is the input gate that decides which cell state to update, <code>g</code> is the actual value changes to be made to the cell state. These two are multiplied together to get final cell state changes.</li><li><code>f</code> is the forget gate, and <code>c(t-1)</code> is the previous cell state. These two are multiplied to drop values from the previous cell state.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>When performing backpropagation, we find the derivative w.r.t the error. This gives us the formula</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":368,"align":"center"} -->
<div class="wp-block-image"><figure class="aligncenter"><img src="https://chanjinhao.files.wordpress.com/2019/03/2.png" alt="" class="wp-image-368" /><figcaption>Derivative of w.r.t the error</figcaption></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>This formula does not have any multiplicative element in it, and so when BPTT occurs, a <em>linear carousel</em> occurs, thus preventing vanexplgrad.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>355</wp:post_id>
		<wp:post_date>2019-06-30 15:33:55</wp:post_date>
		<wp:post_date_gmt>2019-06-30 07:33:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>lstm</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="data-science"><![CDATA[Data Science]]></category>
		<category domain="post_tag" nicename="exploding-gradients"><![CDATA[Exploding Gradients]]></category>
		<category domain="post_tag" nicename="lstm"><![CDATA[LSTM]]></category>
		<category domain="post_tag" nicename="vanishing-gradients"><![CDATA[Vanishing Gradients]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[32335815454]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1561880686]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>DNS Attack Vectors</title>
		<link>http://chanjinhao.com/2019/07/07/dns-attack-vectors/</link>
		<pubDate>Sun, 07 Jul 2019 06:50:09 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?p=375</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Before looking at DNS Attack Vectors, let's do a quick recap of what a DNS is, and what are it's functions.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>What is a DNS?</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>DNS, or Domain Name System, is a server that provides Name to IP Address resolution. When people visit websites, it's much easier for them to remember words, such as Facebook or Hotmail, and the DNS server translates these URLs to IP address such as 73.22.512.31.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Machines in a network, and groups of networks references a DNS server which manages a huge database of domain names to IP addresses. The act of mapping a domain name to an IP is called <code>DNS Name Resolution</code>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When you connect to a home or business network, the service providers  that assign your IP address also sends network configurations that includes 1 or more DNS servers that the device should use to perform DNS Name Resolution.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>DNS traffic takes place on port 53, and has both TCP and UDP protocols</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>DNS Attacks<br></h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Now that we have a rough idea of what a DNS does, lets look at the attack vectors that can target DNS servers</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>1. DNS Tunneling</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>DNS tunneling is a method of attack that encodes data of programs into DNS queries and responses</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The malicious actor must first own a domain name, and his own local DNS server. In this example, we have the domain <code>server1.test.com</code></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The typical steps of a DNS tunneling attack is as follows:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Client sends out a DNS Name Resolution request to the DNS server, but the domain is modified to contain pieces of data: <code>MYDATA.server1.test.com</code></li><li>The DNS server does the IP address resolution of <code>server1.test.com</code>, and sends the modified request to that server</li><li>The information of <code>MYDATA.server1.test.com</code> is forwarded to the malicious server</li><li>The bad actor can inspect the packets to view information from the DNS queries, thus achieving data exfiltration</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>DNS tunneling takes advantage of the fact that domain names are allowed up to 255 characters, but most domain names typically do not go that long. The additional data can thus be appended into the unused character space</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>2. DNS Cache Poisoning</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>DNS cache poisoning is an attack that corrupts the DNS cache so that when DNS Name Resolution is done, it points to a malicious IP address instead of the legitimate one.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The internet has more than one DNS servers for name resolution, and DNS servers would cache information from other DNS servers for efficiency in querying. Your machine also has a local DNS cache which performs a quick lookup, instead of performing DNS Name Resolution again.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>3. DNS Zone Transfer Attack</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>A legitimate DNS Zone Transfer occurs when a slave DNS server requests for information from the master DNS server to update it's DNS records</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>DNS Zone Transfers are performed by TCP protocols to ensure lossless data transfer.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Bad actors can leverage on this to pose as a slave DNS server, and download all information from the master DNS server, thus revealing information about the network.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>4. DNS Domain Lock-Up</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Domains are setup by attackers. When the target DNS server sends a request to one of the malicious Domains, the domains don't send the proper reply to end the connection, but instead send random junk to keep the TCP connection to the DNS alive.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When enough connections are kept alive, this exhausts the DNS resources to perform further Name Resolutions. </p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>5. DNS Water Torture Attack and NXDomain (Non-Existent Domain)</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>When requests with invalid domain names are sent to the DNS server, the DNS server replies with NXDomain, which indicates that the domain names are not valid.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The DNS stores all these queries and NXDomain responses in the cache, and if these requests happens on a large scale, it can flood the cache, thus preventing further Name Resolutions from happening. This essentially is a DDoS on DNS servers.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This attack is analogous to a MAC flooding attack, which fills up the cache with bogus MAC addresses.<br></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>375</wp:post_id>
		<wp:post_date>2019-07-07 14:50:09</wp:post_date>
		<wp:post_date_gmt>2019-07-07 06:50:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dns-attack-vectors</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="hacking"><![CDATA[Hacking]]></category>
		<category domain="category" nicename="networking"><![CDATA[Networking]]></category>
		<category domain="category" nicename="security"><![CDATA[Security]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[32573487984]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1562482652]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Power of Agency</title>
		<link>http://chanjinhao.com/2019/05/14/the-power-of-agency/</link>
		<pubDate>Tue, 14 May 2019 13:19:06 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/2019/05/14/the-power-of-agency/</guid>
		<description></description>
		<content:encoded><![CDATA[Agency is having the feeling that you're in control of the situation at hand, and of yourself.

This post is a review of the book "The Power of Agency", and they offer 7 steps for you to regain this sense of control

<ol>
    <li>Keep a clear head and control the amount of stimuli you get</li>
    <li>Associate selectively with people</li>
    <li>Exercise and move</li>
    <li>Always position yourself as a learner no matter where you are</li>
    <li>Keep your emotions in check</li>
    <li>Learn how to read your intuition</li>
    <li>Deliberate before acting</li>
</ol>

<h2>Keeping a clear head</h2>

<hr>

Practice meditation

Dont multitask

Filter your sources of information

Reduce junk information (social media)

Put away your phone. Far far away.

A traditional pen and paper brings more clarity as opposed to typing

Embrace boredom, and use it as a moment for self reflection

<h2>Associate Selectively</h2>

<hr>

You have Mirror neurons. Mix around with positive people, and you will mirror them

Other people have Mirror neurons. Act positively and others will follow suit

Dont fall into the herd mentality, and disassociate yourself from negative emotions

Learn to say No

Being unpopular is okay

Make or break unhealthy relationships

<h2>Exercise and Move</h2>

<hr>

Walk more

Stand more

Learn to understand the signals your body is giving you (Hungry? Tired?)

Go and experience new places and cultures

Make sleep a priority

<h2>Always be Learning</h2>

<hr>

Pursue new knowledge not within your domain

Learn to embrace failure in learning

Find out what kind if learner are you

Get feedback from others

Bounce and voice out your thought chains and get validation

Look from other peoples perspective

<h2>Keep Your Emotions In Check</h2>

<hr>

Values are not Beliefs. Values are more general. Beliefs are more specific

Tear down misconstructed beliefs from the past. They may not be valid

Identify emotions with names and words

Look at the grander scheme of things

Channel your emotions somewhere

<h2>Intuition</h2>

<hr>

I personally didn't like this chapter, because I find the lessons quite gray and not very concrete.

It seems to just say, trust your heart, which is, to me, one of the worse advice to give anyone.

<h2>Deliberation</h2>

<hr>

Dont be seduced by shortcuts

Name your mental steps to your conclusion

Question the decision you made

Stay open to alternatives

Ask yourself 3 questions for each decision

<ol>
    <li>How did I arrive to that decision</li>
    <li>What other alternatives are there</li>
    <li>How am I feeling during the decision making process</li>
</ol>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>449</wp:post_id>
		<wp:post_date>2019-05-14 21:19:06</wp:post_date>
		<wp:post_date_gmt>2019-05-14 13:19:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-power-of-agency</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1557839964]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[2697]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[30798157710]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Domain Fronting and SNI</title>
		<link>http://chanjinhao.com/2019/06/13/domain-fronting-and-sni/</link>
		<pubDate>Thu, 13 Jun 2019 02:54:06 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?p=451</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Domain fronting is a malicious act of appearing to request to visit a legitimate site (the front), while in actual fact, the request is going to another website.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Domain fronting relies on the SSL technology to work, where the service provider is unable to see the actual malicious hostname the request is going to, but can only see fronted domain the SNI data.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>SNI</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>SNI, which stands for Server Name Indication, helps solves the issue introduced with TLS on HTTP connections.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A server can be shared by many users to host their own websites. For example: AWS, Google Cloud or Azure all host multiple websites that clients can visit.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In a non-TLS connection, when the request is made from the client to the server, the hostname is visible in clear text. The server then simply serves the requested hostname to the client.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In a TLS connection, it gets slightly complicated. A TLS connection requires the certificate of the website to complete the handshake. Each website hosted on the server has their own certificate. However, the hostname is encrypted in the incoming request from the client. Without the hostname, how will the server know which website the client wants to visit, and which certificate to present to the client?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A simple solution is presented by SNI, which indicates the hostname in the initial TLS connection (TLS Hello). This way, the server knows which website to get the certificate from to complete the TLS handshake.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>SNI-Hostname Mismatch</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Domain fronting takes advantage of SNI presented to the server. The hostname is the actual destination the packet is going to, and it's encrypted. The only information the servers have is from the SNI, and attackers can simply spoof the SNI value to something legitimate.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>An example scenario:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Hostname : <code>www.badsite.com</code></li><li>SNI spoofed to show: <code>www.goodsite.com</code></li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Since the hostname is encrypted, no one knows im going to <code>www.badsite.com</code>, and they can only access the SNI data to assume that i'm visiting <code>www.goodsite.com</code></p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":452} -->
<figure class="wp-block-image"><img src="https://chanjinhao.files.wordpress.com/2019/06/1.png" alt="" class="wp-image-452" /></figure>
<!-- /wp:image -->

<!-- wp:image {"id":453} -->
<figure class="wp-block-image"><img src="https://chanjinhao.files.wordpress.com/2019/06/2.png" alt="" class="wp-image-453" /></figure>
<!-- /wp:image -->

<!-- wp:heading {"level":3} -->
<h3>Detection</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:paragraph -->
<p>Domain fronting is used in other malicious scenarios, such as C2 communication and data exfiltration</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Detection of domain fronting obviously can't work just by observing the packet, as the contents are encrypted. Detection can thus only be done through behavioral analysis such as regular beaconing intervals, or suspicious packet sizes.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>451</wp:post_id>
		<wp:post_date>2019-06-13 10:54:06</wp:post_date>
		<wp:post_date_gmt>2019-06-13 02:54:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>domain-fronting-and-sni</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c2"><![CDATA[C2]]></category>
		<category domain="post_tag" nicename="domain-fronting"><![CDATA[Domain Fronting]]></category>
		<category domain="category" nicename="networking"><![CDATA[Networking]]></category>
		<category domain="category" nicename="security"><![CDATA[Security]]></category>
		<category domain="post_tag" nicename="sni"><![CDATA[SNI]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1560394449]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[31770086369]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>1</title>
		<link>http://chanjinhao.com/1-2/</link>
		<pubDate>Thu, 13 Jun 2019 02:50:45 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/06/1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>452</wp:post_id>
		<wp:post_date>2019-06-13 10:50:45</wp:post_date>
		<wp:post_date_gmt>2019-06-13 02:50:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>1-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/06/1.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/06/1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1816;s:6:"height";i:1135;s:4:"file";s:78:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/06/1.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:121722;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>2</title>
		<link>http://chanjinhao.com/2-4/</link>
		<pubDate>Thu, 13 Jun 2019 02:50:51 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/06/2.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>453</wp:post_id>
		<wp:post_date>2019-06-13 10:50:51</wp:post_date>
		<wp:post_date_gmt>2019-06-13 02:50:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>2-4</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/06/2.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/06/2.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1819;s:6:"height";i:1130;s:4:"file";s:78:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/06/2.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:118959;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>What are Proxies?</title>
		<link>http://chanjinhao.com/2019/06/21/what-are-proxies/</link>
		<pubDate>Fri, 21 Jun 2019 01:57:02 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?p=456</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>A Proxy, or a Proxy Server / Web Proxy, is something that sits between the source of the network traffic, and the desired destination of the traffic. What the proxy will do is relay the network traffic across to the other side.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Typically, it would sit between a client and a server, where the client is usually a web browser, and the server being the web server that hosts its resources.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Forward Proxies</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:image {"id":457} -->
<figure class="wp-block-image"><img src="https://chanjinhao.files.wordpress.com/2019/06/1-1.png" alt="" class="wp-image-457" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Forward proxies are setup such that the clients are behind a proxy server that passes all the network traffic from the clients to the server.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Such a setup is viable for several security reasons, such as centralized scanning of traffic, identify protection and blocking of content.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The downsides of this is that all the clients share the same bandwidth on the proxy server, thus potentially slowing the network speed for everyone.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Reverse Proxy</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:image {"id":458} -->
<figure class="wp-block-image"><img src="https://chanjinhao.files.wordpress.com/2019/06/2-1.png" alt="" class="wp-image-458" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>A reverse proxy is the same as the forward proxy, but it's implemented on the server side instead. Multiple servers sit behind the reverse proxy, and the proxy routes the network traffic to the correct servers based on packet information.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The reasons for a reverse proxy also pertain to security such as DDoS protection, but also includes load balancing, where the reverse proxy can detect which server is being overloaded, and redirect the traffic to other servers.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Types of Proxies</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:heading {"level":4} -->
<h4>HTTP Proxies</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>HTTP proxies are designed specifically for proxying HTTP information. HTTP proxies cannot proxy for other types of protocols. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There is also an encrypted version of a HTTPS proxy to prevent the proxy (or anyone along the pipeline) from seeing any data being transferred.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Because HTTP or HTTPS runs on TCP, this means that the HTTP proxy only supports TCP protocols</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>SOCKS Proxies</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>While HTTP proxies are only meant for HTTP traffic, SOCKS operate on a lower level, and thus can support almost all protocols including both TCP and UDP types, as well as HTTP traffic.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The SOCKS proxy server establishes the TCP connection on behalf of the client with an external server, and then uses that connection to route traffic between the client and server.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>SOCKS does not touch the data stream at all, only setting up the connection and routing the traffic.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Comparison between the Proxies</h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:heading {"level":4} -->
<h4>Security</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In both proxies (HTTPS and SOCKS, not HTTP), encryption is present, thus your data flowing through is secure.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>Speed</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>As SOCKS proxies only route data traffic and never touches the data inside, they can route the data much faster. However, most of the time the speed differences are negligible.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>Features</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Since SOCKS proxies supports multiple protocols including HTTP, why still do we need a HTTP proxy?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Because HTTP proxies understand the HTTP traffic that is flowing through, the client and the external server can both talk to the proxy server over HTTP. This can allow the HTTP proxy to do things like caching to improve performance.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The SOCKS proxy on the other hand, does not understand HTTP traffic, and only routes the data that is flowing through. You cannot talk directly to the SOCKS server in HTTP.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p> Also, SOCKS proxies support both TCP and UDP connections, which can be used by more programs.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>456</wp:post_id>
		<wp:post_date>2019-06-21 09:57:02</wp:post_date>
		<wp:post_date_gmt>2019-06-21 01:57:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>what-are-proxies</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="networking"><![CDATA[Networking]]></category>
		<category domain="post_tag" nicename="proxy"><![CDATA[Proxy]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1561082225]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[32036739058]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>1-1</title>
		<link>http://chanjinhao.com/1-1/</link>
		<pubDate>Tue, 18 Jun 2019 05:50:45 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/06/1-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>457</wp:post_id>
		<wp:post_date>2019-06-18 13:50:45</wp:post_date>
		<wp:post_date_gmt>2019-06-18 05:50:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>1-1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/06/1-1.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/06/1-1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1466;s:6:"height";i:710;s:4:"file";s:80:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/06/1-1.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:39789;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>2-1</title>
		<link>http://chanjinhao.com/2-1/</link>
		<pubDate>Tue, 18 Jun 2019 05:54:21 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/06/2-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>458</wp:post_id>
		<wp:post_date>2019-06-18 13:54:21</wp:post_date>
		<wp:post_date_gmt>2019-06-18 05:54:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>2-1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/06/2-1.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/06/2-1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1466;s:6:"height";i:724;s:4:"file";s:80:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/06/2-1.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:39812;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>DNSSEC</title>
		<link>http://chanjinhao.com/2019/09/23/dnssec/</link>
		<pubDate>Mon, 23 Sep 2019 06:16:21 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.com/?p=461</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>In the previous post, we talked about some of the attack vectors on the DNS. In this post, we're going to be talking about DNSSEC, which is an attempt to make the DNS more secure.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>A point to note, DNSSEC does not provide Confidentiality, but only Integrity. Integrity in this case is ensuring that the reply that you received from the DNS is truly the reply, and not altered by any MITM means. The lack of Confidentiality is due to the fact that it does not encrypt your DNS traffic data, and all your queries are still exposed in plain text. These are several technologies out there now that are branching out into encryption of DNS data, named DNS over HTTPS (DoH). But for DNSSEC, there is no encryption.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This post assumes you have knowledge of recursive DNS resolving of hostnames.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>DNSSEC introduces several new resources that are used by the DNSSEC verification process.</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>RRSIG (Resource Record Signature)</li><li>DNSKEY (Public Key for Verification)</li><li>DS (Delegation Signer)</li><li>NSEC (Proof of Nonexistence - No encryption)</li><li>NSEC3 ( Proof of Nonexistence - Encryption)</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>We'll go through each one of them, and explain how they are being used in the verification process.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>RRSIG</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>With DNSSEC, every reply comes with at least one RRSIG reply. RRSIG acts like a digital certification, to verify that this reply is indeed authentic.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>DNSKEY</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>DNSSEC operates on asymmetric encryption, and DNSKEY is the public key. The RRSIG is encrypted with the private key, and verification of the response is done by decrypting it with DNSKEY.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>DS</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>During the recursive DNS resolution process, the parent has to verify the authenticity of the child server. This is done by signing the hash of the child. The parent becomes the Delegation Signing (DS) of the child</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>NSEC/NSEC3</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Without DNSSEC, non-existent domains are return with NXDOMAIN. With DNSSEC, non-existent domains are handled by NSEC and NSEC3 records to prove that they really don't exist. NSEC3 is the encrypted version of NSEC. We'll talk about this in a section later below.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Difference in DNS lookup with DNSSEC </h3>
<!-- /wp:heading -->

<!-- wp:separator -->
<hr class="wp-block-separator" />
<!-- /wp:separator -->

<!-- wp:image {"id":465,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://chanjinhao.files.wordpress.com/2019/09/untitled-1.png?w=531" alt="" class="wp-image-465" /><figcaption>DNS resolution with DNSSEC</figcaption></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Up front, you can see that there is an additional layer called the Validating Resolver, which handles the DNSSEC process.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The recursive DNS resolution to obtain the IP address of isc.org still remains the same (asking <code>.</code>, <code>.org</code> and <code>isc.org</code>). We start the phase above when we  finally get the address of the authoritative server for the address of <code>isc.org</code></p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Ask the authoritative server for the IP address of <code>isc.org</code></li><li>Reply the IP address of <code>isc.org</code>. Also, send the encrypted RRSIG</li><li>Ask for the public DNSKEY of <code>isc.org</code> to verify the RRSIG obtained in step 2</li><li>Reply with the DNSKEY to decrypt the RRSIG, and verify the reply from <code>isc.org</code><ul><li> <code>.org</code> is the parent of <code>isc.org</code>, and thus is the DS of <code>isc.org</code>. As part of the DNSSEC process, <code>isc.org</code> has to the hash of it's DNSKEY to <code>.org</code></li><li>The hash of the child's DNSKEY is signed by the parent's DNSKEY</li><li>i.e. the hash of <code>isc.org</code> DNSKEY is signed by <code>.org</code> DNSKEY</li></ul></li><li>Ask for the hash of <code>isc.org</code> DNSKEY, and ensure that the DNSKEY obtained in step 4 is correct</li><li>Reply with the hash of <code>isc.org</code> DNSKEY, along with the RRSIG of <code>.org</code></li><li>Ask for the public DNSKEY of <code>.org</code> to verify the RRSIG obtained in step 6</li><li> Reply with the DNSKEY to decrypt the RRSIG, and verify the reply from <code>.org</code></li><li><strong>Ask for the hash of <code>.org</code> DNSKEY, and ensure that the DNSKEY obtained in step 8 is correct</strong></li><li><strong> Reply with the hash of <code>.org</code> DNSKEY, along with the RRSIG of  the root server</strong></li><li><strong>Ask for the public DNSKEY of the root server to verify the RRSIG obtained in step 10</strong></li><li><strong> Reply with the DNSKEY to decrypt the RRSIG, and verify the reply from the root server</strong></li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>You can see the pattern of these 4 sets of communication repeating. I've bolded steps 9, 10, 11, 12, as they are the same steps being repeated for each recursive step of DNS resolution.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>These Are Not The Records You're Looking For</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The typical response from a DNS server when a non-existent domain is requested is returning an <code>NXDOMAIN</code> response. However, a simple <code>NXDOMAIN</code> will not suffice, as an attacker can simply spoof this reply to deny services to customers.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>With DNSSEC implemented, instead of using an <code>NXDOMAIN</code> to indicate a non-existent record, we use NSEC as a proof of non-existence. NSEC stands for Next-Secure-Record, and a gist of how it works is by providing information above records before and after the requested domain.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For NSEC to work, the records need to be sorted alphabetically so that by showing the previous and next record, we can determine if the request domain does not exist.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>An example of this in action: We have 3 employees working at a company: Alice, Edward and Susan (already sorted alphabetically). When some one calls and asks for an employee called Bob (which doesn't exist), NSEC will reply the previous and next records (alphabetically), Alice and Edward.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We can see an obvious problem over here. Probe for many non-existent domains, and NSEC will return to you all of the records in the DNS, something which we don't want. This act is called zone-walking, or zone enumeration.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The solution to zone walking is simply to encrypt the information being sent over, which is what is implemented in NSEC3. NSEC3 hashes the entries before sending the data over to the requesting machine</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Credits</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>This post was a summary of this guide by ISC:  <a href="https://downloads.isc.org/isc/dnssec-guide/dnssec-guide.pdf">https://downloads.isc.org/isc/dnssec-guide/dnssec-guide.pdf</a> </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The above documentation is a lot more comprehensive, and this post is meant to highlight content that is important.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>461</wp:post_id>
		<wp:post_date>2019-09-23 14:16:21</wp:post_date>
		<wp:post_date_gmt>2019-09-23 06:16:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dnssec</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="dnssec"><![CDATA[DNSSEC]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>timeline_notification</wp:meta_key>
			<wp:meta_value><![CDATA[1569219384]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[35577327458]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>untitled</title>
		<link>http://chanjinhao.com/untitled-4/</link>
		<pubDate>Tue, 17 Sep 2019 09:38:41 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/09/untitled.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>464</wp:post_id>
		<wp:post_date>2019-09-17 17:38:41</wp:post_date>
		<wp:post_date_gmt>2019-09-17 09:38:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>untitled-4</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/09/untitled.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/09/untitled.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:531;s:6:"height";i:575;s:4:"file";s:85:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/09/untitled.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:71549;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>untitled-1</title>
		<link>http://chanjinhao.com/untitled-1-3/</link>
		<pubDate>Tue, 17 Sep 2019 09:38:57 +0000</pubDate>
		<dc:creator>jinhaochan</dc:creator>
		<guid isPermaLink="false">http://chanjinhao.files.wordpress.com/2019/09/untitled-1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>465</wp:post_id>
		<wp:post_date>2019-09-17 17:38:57</wp:post_date>
		<wp:post_date_gmt>2019-09-17 09:38:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>untitled-1-3</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://chanjinhao.files.wordpress.com/2019/09/untitled-1.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/09/untitled-1.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:531;s:6:"height";i:575;s:4:"file";s:87:"/home/wpcom/public_html/wp-content/blogs.dir/0a2/148736662/files/2019/09/untitled-1.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:71549;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
